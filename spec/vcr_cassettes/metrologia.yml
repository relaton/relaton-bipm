---
http_interactions:
- request:
    method: get
    uri: https://iopscience.iop.org/journal/0026-1394
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip, deflate, br
      Accept:
      - text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
      User-Agent:
      - Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7
      Host:
      - iopscience.iop.org
      Cache-Control:
      - max-age=0
      Upgrade-Insecure-Requests:
      - '1'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - AWSALB=Z1CRjSU0PnrK77rf8RRY2pg+xhmAuZzkS9K+nUjRzis1OtIzrYVHJWnpitHVyi2DSUhUrvx0fQbfkFCiHeh106sWIyRxj95Gafp7SGx/0d8lZyxTuqIbOR+JSbwN;
        Expires=Tue, 25 Oct 2022 00:08:19 GMT; Path=/
      - AWSALBCORS=Z1CRjSU0PnrK77rf8RRY2pg+xhmAuZzkS9K+nUjRzis1OtIzrYVHJWnpitHVyi2DSUhUrvx0fQbfkFCiHeh106sWIyRxj95Gafp7SGx/0d8lZyxTuqIbOR+JSbwN;
        Expires=Tue, 25 Oct 2022 00:08:19 GMT; Path=/; SameSite=None; Secure
      - IOP_session_live=%2F%2F1666051700101%7C6fc29e9a-8f79-4070-92ab-f01ee733f949%7C20221018-146df71326fa8a6230694d2161ab5993%7C%7C%7C%7C%7C%7C%7C%7C%7Cguest%2F2b87c9f18a509e23af68068eb56c3ffe;
        Path=/; Domain=.iop.org; HttpOnly
      - JSESSIONID=B5F7C78E720CBC4FBA37A990E830BD61; Max-Age=-1; Path=; Secure; HttpOnly
      - JSESSIONID=B5F7C78E720CBC4FBA37A990E830BD61; Path=/; HttpOnly
      - __uzma=5fe0da58-7540-45ab-a49e-5319a1e73d5b; HttpOnly; path=/; Expires=Tue,
        18-Apr-23 00:08:19 GMT ; Max-Age=15724800; SameSite=Lax
      - __uzmb=1666051699; HttpOnly; path=/; Expires=Tue, 18-Apr-23 00:08:19 GMT ;
        Max-Age=15724800; SameSite=Lax
      - __uzmc=106211063220; HttpOnly; path=/; Expires=Tue, 18-Apr-23 00:08:19 GMT
        ; Max-Age=15724800; SameSite=Lax
      - __uzmd=1666051699; HttpOnly; path=/; Expires=Tue, 18-Apr-23 00:08:19 GMT ;
        Max-Age=15724800; SameSite=Lax
      - __uzme=0830; HttpOnly; path=/; Expires=Tue, 18-Apr-23 00:08:19 GMT ; Max-Age=15724800;
        SameSite=Lax
      Iop-Associated-Identity-Ids:
      - guest,
      Iop-Session-Id:
      - 6fc29e9a-8f79-4070-92ab-f01ee733f949
      Vary:
      - Accept-Encoding
      Iop-Page-Type:
      - JNL_HOMEPAGE
      Strict-Transport-Security:
      - max-age=31600000
      X-Logged-In:
      - ''
      Date:
      - Tue, 18 Oct 2022 00:08:20 GMT
      Iop-Session-Map:
      - iop_session_id=6fc29e9a-8f79-4070-92ab-f01ee733f949&identity_ids=guest%2C&ics_session_id=20221018-146df71326fa8a6230694d2161ab5993&request_id=c0fab452-0d42-4646-ab32-25f6f4e7326c&identity_id_primary=guest&
      X-Cache-Enabled:
      - '0'
      Content-Language:
      - en-US
      X-Frame-Options:
      - SAMEORIGIN
      Iop-Primary-Institution-Identity-Id:
      - guest
      X-Requested-Cache-Control:
      - max-age=0
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCTxoZWFkPgoJCTxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSxjaHJvbWU9MSI+CgkJCgkJCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4od2luZG93Lk5SRVVNfHwoTlJFVU09e30pKS5pbml0PXtwcml2YWN5Ontjb29raWVzX2VuYWJsZWQ6dHJ1ZX0sYWpheDp7ZGVueV9saXN0OlsiYmFtLm5yLWRhdGEubmV0Il19LGRpc3RyaWJ1dGVkX3RyYWNpbmc6e2VuYWJsZWQ6dHJ1ZX19Oyh3aW5kb3cuTlJFVU18fChOUkVVTT17fSkpLmxvYWRlcl9jb25maWc9e2FnZW50SUQ6IjE3MzI2ODkzNDMiLGFjY291bnRJRDoiOTE3ODc3Iix0cnVzdEtleToiOTE3ODc3Iix4cGlkOiJYUWNBV1ZGVUd3SUhWMU5VRHdZQVgxUT0iLGxpY2Vuc2VLZXk6ImIyYmZhYWUxYjYiLGFwcGxpY2F0aW9uSUQ6IjE3MzI2ODc3OTAifTt3aW5kb3cuTlJFVU18fChOUkVVTT17fSksX19ucl9yZXF1aXJlPWZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKG4pe2lmKCFlW25dKXt2YXIgbz1lW25dPXtleHBvcnRzOnt9fTt0W25dWzBdLmNhbGwoby5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBvPXRbbl1bMV1bZV07cmV0dXJuIHIob3x8ZSl9LG8sby5leHBvcnRzKX1yZXR1cm4gZVtuXS5leHBvcnRzfWlmKCJmdW5jdGlvbiI9PXR5cGVvZiBfX25yX3JlcXVpcmUpcmV0dXJuIF9fbnJfcmVxdWlyZTtmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKylyKG5bb10pO3JldHVybiByfSh7MTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dHJ5e3MuY29uc29sZSYmY29uc29sZS5sb2codCl9Y2F0Y2goZSl7fX12YXIgbyxpPXQoImVlIiksYT10KDMxKSxzPXt9O3RyeXtvPWxvY2FsU3RvcmFnZS5nZXRJdGVtKCJfX25yX2ZsYWdzIikuc3BsaXQoIiwiKSxjb25zb2xlJiYiZnVuY3Rpb24iPT10eXBlb2YgY29uc29sZS5sb2cmJihzLmNvbnNvbGU9ITAsby5pbmRleE9mKCJkZXYiKSE9PS0xJiYocy5kZXY9ITApLG8uaW5kZXhPZigibnJfZGV2IikhPT0tMSYmKHMubnJEZXY9ITApKX1jYXRjaChjKXt9cy5uckRldiYmaS5vbigiaW50ZXJuYWwtZXJyb3IiLGZ1bmN0aW9uKHQpe3IodC5zdGFjayl9KSxzLmRldiYmaS5vbigiZm4tZXJyIixmdW5jdGlvbih0LGUsbil7cihuLnN0YWNrKX0pLHMuZGV2JiYocigiTlIgQUdFTlQgSU4gREVWRUxPUE1FTlQgTU9ERSIpLHIoImZsYWdzOiAiK2EocyxmdW5jdGlvbih0LGUpe3JldHVybiB0fSkuam9pbigiLCAiKSkpfSx7fV0sMjpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlLG4scixzKXt0cnl7bD9sLT0xOm8oc3x8bmV3IFVuY2F1Z2h0RXhjZXB0aW9uKHQsZSxuKSwhMCl9Y2F0Y2goZil7dHJ5e2koImllcnIiLFtmLGMubm93KCksITBdKX1jYXRjaChkKXt9fXJldHVybiJmdW5jdGlvbiI9PXR5cGVvZiB1JiZ1LmFwcGx5KHRoaXMsYShhcmd1bWVudHMpKX1mdW5jdGlvbiBVbmNhdWdodEV4Y2VwdGlvbih0LGUsbil7dGhpcy5tZXNzYWdlPXR8fCJVbmNhdWdodCBlcnJvciB3aXRoIG5vIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24iLHRoaXMuc291cmNlVVJMPWUsdGhpcy5saW5lPW59ZnVuY3Rpb24gbyh0LGUpe3ZhciBuPWU/bnVsbDpjLm5vdygpO2koImVyciIsW3Qsbl0pfXZhciBpPXQoImhhbmRsZSIpLGE9dCgzMikscz10KCJlZSIpLGM9dCgibG9hZGVyIiksZj10KCJnb3MiKSx1PXdpbmRvdy5vbmVycm9yLGQ9ITEscD0ibnJAc2VlbkVycm9yIjtpZighYy5kaXNhYmxlZCl7dmFyIGw9MDtjLmZlYXR1cmVzLmVycj0hMCx0KDEpLHdpbmRvdy5vbmVycm9yPXI7dHJ5e3Rocm93IG5ldyBFcnJvcn1jYXRjaChoKXsic3RhY2siaW4gaCYmKHQoMTQpLHQoMTMpLCJhZGRFdmVudExpc3RlbmVyImluIHdpbmRvdyYmdCg3KSxjLnhocldyYXBwYWJsZSYmdCgxNSksZD0hMCl9cy5vbigiZm4tc3RhcnQiLGZ1bmN0aW9uKHQsZSxuKXtkJiYobCs9MSl9KSxzLm9uKCJmbi1lcnIiLGZ1bmN0aW9uKHQsZSxuKXtkJiYhbltwXSYmKGYobixwLGZ1bmN0aW9uKCl7cmV0dXJuITB9KSx0aGlzLnRocm93bj0hMCxvKG4pKX0pLHMub24oImZuLWVuZCIsZnVuY3Rpb24oKXtkJiYhdGhpcy50aHJvd24mJmw+MCYmKGwtPTEpfSkscy5vbigiaW50ZXJuYWwtZXJyb3IiLGZ1bmN0aW9uKHQpe2koImllcnIiLFt0LGMubm93KCksITBdKX0pfX0se31dLDM6W2Z1bmN0aW9uKHQsZSxuKXt2YXIgcj10KCJsb2FkZXIiKTtyLmRpc2FibGVkfHwoci5mZWF0dXJlcy5pbnM9ITApfSx7fV0sNDpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIoKXtVKyssTD1nLmhhc2gsdGhpc1t1XT15Lm5vdygpfWZ1bmN0aW9uIG8oKXtVLS0sZy5oYXNoIT09TCYmaSgwLCEwKTt2YXIgdD15Lm5vdygpO3RoaXNbaF09fn50aGlzW2hdK3QtdGhpc1t1XSx0aGlzW2RdPXR9ZnVuY3Rpb24gaSh0LGUpe0UuZW1pdCgibmV3VVJMIixbIiIrZyxlXSl9ZnVuY3Rpb24gYSh0LGUpe3Qub24oZSxmdW5jdGlvbigpe3RoaXNbZV09eS5ub3coKX0pfXZhciBzPSItc3RhcnQiLGM9Ii1lbmQiLGY9Ii1ib2R5Iix1PSJmbiIrcyxkPSJmbiIrYyxwPSJjYiIrcyxsPSJjYiIrYyxoPSJqc1RpbWUiLG09ImZldGNoIix2PSJhZGRFdmVudExpc3RlbmVyIix3PXdpbmRvdyxnPXcubG9jYXRpb24seT10KCJsb2FkZXIiKTtpZih3W3ZdJiZ5LnhocldyYXBwYWJsZSYmIXkuZGlzYWJsZWQpe3ZhciB4PXQoMTEpLGI9dCgxMiksRT10KDkpLFI9dCg3KSxPPXQoMTQpLFQ9dCg4KSxTPXQoMTUpLFA9dCgxMCksTT10KCJlZSIpLEM9TS5nZXQoInRyYWNlciIpLE49dCgyMyk7dCgxNykseS5mZWF0dXJlcy5zcGE9ITA7dmFyIEwsVT0wO00ub24odSxyKSxiLm9uKHAsciksUC5vbihwLHIpLE0ub24oZCxvKSxiLm9uKGwsbyksUC5vbihsLG8pLE0uYnVmZmVyKFt1LGQsInhoci1yZXNvbHZlZCJdKSxSLmJ1ZmZlcihbdV0pLE8uYnVmZmVyKFsic2V0VGltZW91dCIrYywiY2xlYXJUaW1lb3V0IitzLHVdKSxTLmJ1ZmZlcihbdSwibmV3LXhociIsInNlbmQteGhyIitzXSksVC5idWZmZXIoW20rcyxtKyItZG9uZSIsbStmK3MsbStmK2NdKSxFLmJ1ZmZlcihbIm5ld1VSTCJdKSx4LmJ1ZmZlcihbdV0pLGIuYnVmZmVyKFsicHJvcGFnYXRlIixwLGwsImV4ZWN1dG9yLWVyciIsInJlc29sdmUiK3NdKSxDLmJ1ZmZlcihbdSwibm8tIit1XSksUC5idWZmZXIoWyJuZXctanNvbnAiLCJjYi1zdGFydCIsImpzb25wLWVycm9yIiwianNvbnAtZW5kIl0pLGEoVCxtK3MpLGEoVCxtKyItZG9uZSIpLGEoUCwibmV3LWpzb25wIiksYShQLCJqc29ucC1lbmQiKSxhKFAsImNiLXN0YXJ0IiksRS5vbigicHVzaFN0YXRlLWVuZCIsaSksRS5vbigicmVwbGFjZVN0YXRlLWVuZCIsaSksd1t2XSgiaGFzaGNoYW5nZSIsaSxOKCEwKSksd1t2XSgibG9hZCIsaSxOKCEwKSksd1t2XSgicG9wc3RhdGUiLGZ1bmN0aW9uKCl7aSgwLFU+MSl9LE4oITApKX19LHt9XSw1OltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcigpe3ZhciB0PW5ldyBQZXJmb3JtYW5jZU9ic2VydmVyKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5nZXRFbnRyaWVzKCk7cyh2LFtuXSl9KTt0cnl7dC5vYnNlcnZlKHtlbnRyeVR5cGVzOlsicmVzb3VyY2UiXX0pfWNhdGNoKGUpe319ZnVuY3Rpb24gbyh0KXtpZihzKHYsW3dpbmRvdy5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKHcpXSksd2luZG93LnBlcmZvcm1hbmNlWyJjIitwXSl0cnl7d2luZG93LnBlcmZvcm1hbmNlW2hdKG0sbywhMSl9Y2F0Y2godCl7fWVsc2UgdHJ5e3dpbmRvdy5wZXJmb3JtYW5jZVtoXSgid2Via2l0IittLG8sITEpfWNhdGNoKHQpe319ZnVuY3Rpb24gaSh0KXt9aWYod2luZG93LnBlcmZvcm1hbmNlJiZ3aW5kb3cucGVyZm9ybWFuY2UudGltaW5nJiZ3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZSl7dmFyIGE9dCgiZWUiKSxzPXQoImhhbmRsZSIpLGM9dCgxNCksZj10KDEzKSx1PXQoNiksZD10KDIzKSxwPSJsZWFyUmVzb3VyY2VUaW1pbmdzIixsPSJhZGRFdmVudExpc3RlbmVyIixoPSJyZW1vdmVFdmVudExpc3RlbmVyIixtPSJyZXNvdXJjZXRpbWluZ2J1ZmZlcmZ1bGwiLHY9ImJzdFJlc291cmNlIix3PSJyZXNvdXJjZSIsZz0iLXN0YXJ0Iix5PSItZW5kIix4PSJmbiIrZyxiPSJmbiIreSxFPSJic3RUaW1lciIsUj0icHVzaFN0YXRlIixPPXQoImxvYWRlciIpO2lmKCFPLmRpc2FibGVkKXtPLmZlYXR1cmVzLnN0bj0hMCx0KDkpLCJhZGRFdmVudExpc3RlbmVyImluIHdpbmRvdyYmdCg3KTt2YXIgVD1OUkVVTS5vLkVWO2Eub24oeCxmdW5jdGlvbih0LGUpe3ZhciBuPXRbMF07biBpbnN0YW5jZW9mIFQmJih0aGlzLmJzdFN0YXJ0PU8ubm93KCkpfSksYS5vbihiLGZ1bmN0aW9uKHQsZSl7dmFyIG49dFswXTtuIGluc3RhbmNlb2YgVCYmcygiYnN0IixbbixlLHRoaXMuYnN0U3RhcnQsTy5ub3coKV0pfSksYy5vbih4LGZ1bmN0aW9uKHQsZSxuKXt0aGlzLmJzdFN0YXJ0PU8ubm93KCksdGhpcy5ic3RUeXBlPW59KSxjLm9uKGIsZnVuY3Rpb24odCxlKXtzKEUsW2UsdGhpcy5ic3RTdGFydCxPLm5vdygpLHRoaXMuYnN0VHlwZV0pfSksZi5vbih4LGZ1bmN0aW9uKCl7dGhpcy5ic3RTdGFydD1PLm5vdygpfSksZi5vbihiLGZ1bmN0aW9uKHQsZSl7cyhFLFtlLHRoaXMuYnN0U3RhcnQsTy5ub3coKSwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0pfSksYS5vbihSK2csZnVuY3Rpb24odCl7dGhpcy50aW1lPU8ubm93KCksdGhpcy5zdGFydFBhdGg9bG9jYXRpb24ucGF0aG5hbWUrbG9jYXRpb24uaGFzaH0pLGEub24oUit5LGZ1bmN0aW9uKHQpe3MoImJzdEhpc3QiLFtsb2NhdGlvbi5wYXRobmFtZStsb2NhdGlvbi5oYXNoLHRoaXMuc3RhcnRQYXRoLHRoaXMudGltZV0pfSksdSgpPyhzKHYsW3dpbmRvdy5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKCJyZXNvdXJjZSIpXSkscigpKTpsIGluIHdpbmRvdy5wZXJmb3JtYW5jZSYmKHdpbmRvdy5wZXJmb3JtYW5jZVsiYyIrcF0/d2luZG93LnBlcmZvcm1hbmNlW2xdKG0sbyxkKCExKSk6d2luZG93LnBlcmZvcm1hbmNlW2xdKCJ3ZWJraXQiK20sbyxkKCExKSkpLGRvY3VtZW50W2xdKCJzY3JvbGwiLGksZCghMSkpLGRvY3VtZW50W2xdKCJrZXlwcmVzcyIsaSxkKCExKSksZG9jdW1lbnRbbF0oImNsaWNrIixpLGQoITEpKX19fSx7fV0sNjpbZnVuY3Rpb24odCxlLG4pe2UuZXhwb3J0cz1mdW5jdGlvbigpe3JldHVybiJQZXJmb3JtYW5jZU9ic2VydmVyImluIHdpbmRvdyYmImZ1bmN0aW9uIj09dHlwZW9mIHdpbmRvdy5QZXJmb3JtYW5jZU9ic2VydmVyfX0se31dLDc6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe2Zvcih2YXIgZT10O2UmJiFlLmhhc093blByb3BlcnR5KHUpOyllPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtlJiZvKGUpfWZ1bmN0aW9uIG8odCl7cy5pblBsYWNlKHQsW3UsZF0sIi0iLGkpfWZ1bmN0aW9uIGkodCxlKXtyZXR1cm4gdFsxXX12YXIgYT10KCJlZSIpLmdldCgiZXZlbnRzIikscz10KCJ3cmFwLWZ1bmN0aW9uIikoYSwhMCksYz10KCJnb3MiKSxmPVhNTEh0dHBSZXF1ZXN0LHU9ImFkZEV2ZW50TGlzdGVuZXIiLGQ9InJlbW92ZUV2ZW50TGlzdGVuZXIiO2UuZXhwb3J0cz1hLCJnZXRQcm90b3R5cGVPZiJpbiBPYmplY3Q/KHIoZG9jdW1lbnQpLHIod2luZG93KSxyKGYucHJvdG90eXBlKSk6Zi5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodSkmJihvKHdpbmRvdyksbyhmLnByb3RvdHlwZSkpLGEub24odSsiLXN0YXJ0IixmdW5jdGlvbih0LGUpe3ZhciBuPXRbMV07aWYobnVsbCE9PW4mJigiZnVuY3Rpb24iPT10eXBlb2Ygbnx8Im9iamVjdCI9PXR5cGVvZiBuKSl7dmFyIHI9YyhuLCJuckB3cmFwcGVkIixmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtpZigiZnVuY3Rpb24iPT10eXBlb2Ygbi5oYW5kbGVFdmVudClyZXR1cm4gbi5oYW5kbGVFdmVudC5hcHBseShuLGFyZ3VtZW50cyl9dmFyIGU9e29iamVjdDp0LCJmdW5jdGlvbiI6bn1bdHlwZW9mIG5dO3JldHVybiBlP3MoZSwiZm4tIixudWxsLGUubmFtZXx8ImFub255bW91cyIpOm59KTt0aGlzLndyYXBwZWQ9dFsxXT1yfX0pLGEub24oZCsiLXN0YXJ0IixmdW5jdGlvbih0KXt0WzFdPXRoaXMud3JhcHBlZHx8dFsxXX0pfSx7fV0sODpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlLG4pe3ZhciByPXRbZV07ImZ1bmN0aW9uIj09dHlwZW9mIHImJih0W2VdPWZ1bmN0aW9uKCl7dmFyIHQ9aShhcmd1bWVudHMpLGU9e307by5lbWl0KG4rImJlZm9yZS1zdGFydCIsW3RdLGUpO3ZhciBhO2VbbV0mJmVbbV0uZHQmJihhPWVbbV0uZHQpO3ZhciBzPXIuYXBwbHkodGhpcyx0KTtyZXR1cm4gby5lbWl0KG4rInN0YXJ0IixbdCxhXSxzKSxzLnRoZW4oZnVuY3Rpb24odCl7cmV0dXJuIG8uZW1pdChuKyJlbmQiLFtudWxsLHRdLHMpLHR9LGZ1bmN0aW9uKHQpe3Rocm93IG8uZW1pdChuKyJlbmQiLFt0XSxzKSx0fSl9KX12YXIgbz10KCJlZSIpLmdldCgiZmV0Y2giKSxpPXQoMzIpLGE9dCgzMSk7ZS5leHBvcnRzPW87dmFyIHM9d2luZG93LGM9ImZldGNoLSIsZj1jKyJib2R5LSIsdT1bImFycmF5QnVmZmVyIiwiYmxvYiIsImpzb24iLCJ0ZXh0IiwiZm9ybURhdGEiXSxkPXMuUmVxdWVzdCxwPXMuUmVzcG9uc2UsbD1zLmZldGNoLGg9InByb3RvdHlwZSIsbT0ibnJAY29udGV4dCI7ZCYmcCYmbCYmKGEodSxmdW5jdGlvbih0LGUpe3IoZFtoXSxlLGYpLHIocFtoXSxlLGYpfSkscihzLCJmZXRjaCIsYyksby5vbihjKyJlbmQiLGZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztpZihlKXt2YXIgcj1lLmhlYWRlcnMuZ2V0KCJjb250ZW50LWxlbmd0aCIpO251bGwhPT1yJiYobi5yeFNpemU9ciksby5lbWl0KGMrImRvbmUiLFtudWxsLGVdLG4pfWVsc2Ugby5lbWl0KGMrImRvbmUiLFt0XSxuKX0pKX0se31dLDk6W2Z1bmN0aW9uKHQsZSxuKXt2YXIgcj10KCJlZSIpLmdldCgiaGlzdG9yeSIpLG89dCgid3JhcC1mdW5jdGlvbiIpKHIpO2UuZXhwb3J0cz1yO3ZhciBpPXdpbmRvdy5oaXN0b3J5JiZ3aW5kb3cuaGlzdG9yeS5jb25zdHJ1Y3RvciYmd2luZG93Lmhpc3RvcnkuY29uc3RydWN0b3IucHJvdG90eXBlLGE9d2luZG93Lmhpc3Rvcnk7aSYmaS5wdXNoU3RhdGUmJmkucmVwbGFjZVN0YXRlJiYoYT1pKSxvLmluUGxhY2UoYSxbInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSJdLCItIil9LHt9XSwxMDpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7ZnVuY3Rpb24gZSgpe2YuZW1pdCgianNvbnAtZW5kIixbXSxsKSx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoImxvYWQiLGUsYyghMSkpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcigiZXJyb3IiLG4sYyghMSkpfWZ1bmN0aW9uIG4oKXtmLmVtaXQoImpzb25wLWVycm9yIixbXSxsKSxmLmVtaXQoImpzb25wLWVuZCIsW10sbCksdC5yZW1vdmVFdmVudExpc3RlbmVyKCJsb2FkIixlLGMoITEpKSx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoImVycm9yIixuLGMoITEpKX12YXIgcj10JiYic3RyaW5nIj09dHlwZW9mIHQubm9kZU5hbWUmJiJzY3JpcHQiPT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKHIpe3ZhciBvPSJmdW5jdGlvbiI9PXR5cGVvZiB0LmFkZEV2ZW50TGlzdGVuZXI7aWYobyl7dmFyIGE9aSh0LnNyYyk7aWYoYSl7dmFyIGQ9cyhhKSxwPSJmdW5jdGlvbiI9PXR5cGVvZiBkLnBhcmVudFtkLmtleV07aWYocCl7dmFyIGw9e307dS5pblBsYWNlKGQucGFyZW50LFtkLmtleV0sImNiLSIsbCksdC5hZGRFdmVudExpc3RlbmVyKCJsb2FkIixlLGMoITEpKSx0LmFkZEV2ZW50TGlzdGVuZXIoImVycm9yIixuLGMoITEpKSxmLmVtaXQoIm5ldy1qc29ucCIsW3Quc3JjXSxsKX19fX19ZnVuY3Rpb24gbygpe3JldHVybiJhZGRFdmVudExpc3RlbmVyImluIHdpbmRvd31mdW5jdGlvbiBpKHQpe3ZhciBlPXQubWF0Y2goZCk7cmV0dXJuIGU/ZVsxXTpudWxsfWZ1bmN0aW9uIGEodCxlKXt2YXIgbj10Lm1hdGNoKGwpLHI9blsxXSxvPW5bM107cmV0dXJuIG8/YShvLGVbcl0pOmVbcl19ZnVuY3Rpb24gcyh0KXt2YXIgZT10Lm1hdGNoKHApO3JldHVybiBlJiZlLmxlbmd0aD49Mz97a2V5OmVbMl0scGFyZW50OmEoZVsxXSx3aW5kb3cpfTp7a2V5OnQscGFyZW50OndpbmRvd319dmFyIGM9dCgyMyksZj10KCJlZSIpLmdldCgianNvbnAiKSx1PXQoIndyYXAtZnVuY3Rpb24iKShmKTtpZihlLmV4cG9ydHM9ZixvKCkpe3ZhciBkPS9bPyZdKD86Y2FsbGJhY2t8Y2IpPShbXiYjXSspLyxwPS8oLiopXC4oW14uXSspLyxsPS9eKFx3KykoXC58JCkoLiopJC8saD1bImFwcGVuZENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwicmVwbGFjZUNoaWxkIl07Tm9kZSYmTm9kZS5wcm90b3R5cGUmJk5vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkP3UuaW5QbGFjZShOb2RlLnByb3RvdHlwZSxoLCJkb20tIik6KHUuaW5QbGFjZShIVE1MRWxlbWVudC5wcm90b3R5cGUsaCwiZG9tLSIpLHUuaW5QbGFjZShIVE1MSGVhZEVsZW1lbnQucHJvdG90eXBlLGgsImRvbS0iKSx1LmluUGxhY2UoSFRNTEJvZHlFbGVtZW50LnByb3RvdHlwZSxoLCJkb20tIikpLGYub24oImRvbS1zdGFydCIsZnVuY3Rpb24odCl7cih0WzBdKX0pfX0se31dLDExOltmdW5jdGlvbih0LGUsbil7dmFyIHI9dCgiZWUiKS5nZXQoIm11dGF0aW9uIiksbz10KCJ3cmFwLWZ1bmN0aW9uIikociksaT1OUkVVTS5vLk1PO2UuZXhwb3J0cz1yLGkmJih3aW5kb3cuTXV0YXRpb25PYnNlcnZlcj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGk/bmV3IGkobyh0LCJmbi0iKSk6aS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LE11dGF0aW9uT2JzZXJ2ZXIucHJvdG90eXBlPWkucHJvdG90eXBlKX0se31dLDEyOltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt2YXIgZT1pLmNvbnRleHQoKSxuPXModCwiZXhlY3V0b3ItIixlLG51bGwsITEpLHI9bmV3IGYobik7cmV0dXJuIGkuY29udGV4dChyKS5nZXRDdHg9ZnVuY3Rpb24oKXtyZXR1cm4gZX0scn12YXIgbz10KCJ3cmFwLWZ1bmN0aW9uIiksaT10KCJlZSIpLmdldCgicHJvbWlzZSIpLGE9dCgiZWUiKS5nZXRPclNldENvbnRleHQscz1vKGkpLGM9dCgzMSksZj1OUkVVTS5vLlBSO2UuZXhwb3J0cz1pLGYmJih3aW5kb3cuUHJvbWlzZT1yLFsiYWxsIiwicmFjZSJdLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9Zlt0XTtmW3RdPWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIHIodCl7cmV0dXJuIGZ1bmN0aW9uKCl7aS5lbWl0KCJwcm9wYWdhdGUiLFtudWxsLCFvXSxhLCExLCExKSxvPW98fCF0fX12YXIgbz0hMTtjKG4sZnVuY3Rpb24oZSxuKXtQcm9taXNlLnJlc29sdmUobikudGhlbihyKCJhbGwiPT09dCkscighMSkpfSk7dmFyIGE9ZS5hcHBseShmLGFyZ3VtZW50cykscz1mLnJlc29sdmUoYSk7cmV0dXJuIHN9fSksWyJyZXNvbHZlIiwicmVqZWN0Il0uZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1mW3RdO2ZbdF09ZnVuY3Rpb24odCl7dmFyIG49ZS5hcHBseShmLGFyZ3VtZW50cyk7cmV0dXJuIHQhPT1uJiZpLmVtaXQoInByb3BhZ2F0ZSIsW3QsITBdLG4sITEsITEpLG59fSksZi5wcm90b3R5cGVbImNhdGNoIl09ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbihudWxsLHQpfSxmLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGYucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6cn19KSxjKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGYpLGZ1bmN0aW9uKHQsZSl7dHJ5e3JbZV09ZltlXX1jYXRjaChuKXt9fSksby53cmFwSW5QbGFjZShmLnByb3RvdHlwZSwidGhlbiIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPW8uYXJnc1RvQXJyYXkuYXBwbHkodGhpcyxhcmd1bWVudHMpLHI9YShlKTtyLnByb21pc2U9ZSxuWzBdPXMoblswXSwiY2ItIixyLG51bGwsITEpLG5bMV09cyhuWzFdLCJjYi0iLHIsbnVsbCwhMSk7dmFyIGM9dC5hcHBseSh0aGlzLG4pO3JldHVybiByLm5leHRQcm9taXNlPWMsaS5lbWl0KCJwcm9wYWdhdGUiLFtlLCEwXSxjLCExLCExKSxjfX0pLGkub24oImV4ZWN1dG9yLXN0YXJ0IixmdW5jdGlvbih0KXt0WzBdPXModFswXSwicmVzb2x2ZS0iLHRoaXMsbnVsbCwhMSksdFsxXT1zKHRbMV0sInJlc29sdmUtIix0aGlzLG51bGwsITEpfSksaS5vbigiZXhlY3V0b3ItZXJyIixmdW5jdGlvbih0LGUsbil7dFsxXShuKX0pLGkub24oImNiLWVuZCIsZnVuY3Rpb24odCxlLG4pe2kuZW1pdCgicHJvcGFnYXRlIixbbiwhMF0sdGhpcy5uZXh0UHJvbWlzZSwhMSwhMSl9KSxpLm9uKCJwcm9wYWdhdGUiLGZ1bmN0aW9uKHQsZSxuKXt0aGlzLmdldEN0eCYmIWV8fCh0aGlzLmdldEN0eD1mdW5jdGlvbigpe2lmKHQgaW5zdGFuY2VvZiBQcm9taXNlKXZhciBlPWkuY29udGV4dCh0KTtyZXR1cm4gZSYmZS5nZXRDdHg/ZS5nZXRDdHgoKTp0aGlzfSl9KSxyLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIiIrZn0pfSx7fV0sMTM6W2Z1bmN0aW9uKHQsZSxuKXt2YXIgcj10KCJlZSIpLmdldCgicmFmIiksbz10KCJ3cmFwLWZ1bmN0aW9uIikociksaT0iZXF1ZXN0QW5pbWF0aW9uRnJhbWUiO2UuZXhwb3J0cz1yLG8uaW5QbGFjZSh3aW5kb3csWyJyIitpLCJtb3pSIitpLCJ3ZWJraXRSIitpLCJtc1IiK2ldLCJyYWYtIiksci5vbigicmFmLXN0YXJ0IixmdW5jdGlvbih0KXt0WzBdPW8odFswXSwiZm4tIil9KX0se31dLDE0OltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUsbil7dFswXT1hKHRbMF0sImZuLSIsbnVsbCxuKX1mdW5jdGlvbiBvKHQsZSxuKXt0aGlzLm1ldGhvZD1uLHRoaXMudGltZXJEdXJhdGlvbj1pc05hTih0WzFdKT8wOit0WzFdLHRbMF09YSh0WzBdLCJmbi0iLHRoaXMsbil9dmFyIGk9dCgiZWUiKS5nZXQoInRpbWVyIiksYT10KCJ3cmFwLWZ1bmN0aW9uIikoaSkscz0ic2V0VGltZW91dCIsYz0ic2V0SW50ZXJ2YWwiLGY9ImNsZWFyVGltZW91dCIsdT0iLXN0YXJ0IixkPSItIjtlLmV4cG9ydHM9aSxhLmluUGxhY2Uod2luZG93LFtzLCJzZXRJbW1lZGlhdGUiXSxzK2QpLGEuaW5QbGFjZSh3aW5kb3csW2NdLGMrZCksYS5pblBsYWNlKHdpbmRvdyxbZiwiY2xlYXJJbW1lZGlhdGUiXSxmK2QpLGkub24oYyt1LHIpLGkub24ocyt1LG8pfSx7fV0sMTU6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSl7ZC5pblBsYWNlKGUsWyJvbnJlYWR5c3RhdGVjaGFuZ2UiXSwiZm4tIixzKX1mdW5jdGlvbiBvKCl7dmFyIHQ9dGhpcyxlPXUuY29udGV4dCh0KTt0LnJlYWR5U3RhdGU+MyYmIWUucmVzb2x2ZWQmJihlLnJlc29sdmVkPSEwLHUuZW1pdCgieGhyLXJlc29sdmVkIixbXSx0KSksZC5pblBsYWNlKHQseSwiZm4tIixzKX1mdW5jdGlvbiBpKHQpe3gucHVzaCh0KSxtJiYoRT9FLnRoZW4oYSk6dz93KGEpOihSPS1SLE8uZGF0YT1SKSl9ZnVuY3Rpb24gYSgpe2Zvcih2YXIgdD0wO3Q8eC5sZW5ndGg7dCsrKXIoW10seFt0XSk7eC5sZW5ndGgmJih4PVtdKX1mdW5jdGlvbiBzKHQsZSl7cmV0dXJuIGV9ZnVuY3Rpb24gYyh0LGUpe2Zvcih2YXIgbiBpbiB0KWVbbl09dFtuXTtyZXR1cm4gZX10KDcpO3ZhciBmPXQoImVlIiksdT1mLmdldCgieGhyIiksZD10KCJ3cmFwLWZ1bmN0aW9uIikodSkscD10KDIzKSxsPU5SRVVNLm8saD1sLlhIUixtPWwuTU8sdj1sLlBSLHc9bC5TSSxnPSJyZWFkeXN0YXRlY2hhbmdlIix5PVsib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbmxvYWRzdGFydCIsIm9ubG9hZGVuZCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiXSx4PVtdO2UuZXhwb3J0cz11O3ZhciBiPXdpbmRvdy5YTUxIdHRwUmVxdWVzdD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgaCh0KTt0cnl7dS5lbWl0KCJuZXcteGhyIixbZV0sZSksZS5hZGRFdmVudExpc3RlbmVyKGcsbyxwKCExKSl9Y2F0Y2gobil7dHJ5e3UuZW1pdCgiaW50ZXJuYWwtZXJyb3IiLFtuXSl9Y2F0Y2gocil7fX1yZXR1cm4gZX07aWYoYyhoLGIpLGIucHJvdG90eXBlPWgucHJvdG90eXBlLGQuaW5QbGFjZShiLnByb3RvdHlwZSxbIm9wZW4iLCJzZW5kIl0sIi14aHItIixzKSx1Lm9uKCJzZW5kLXhoci1zdGFydCIsZnVuY3Rpb24odCxlKXtyKHQsZSksaShlKX0pLHUub24oIm9wZW4teGhyLXN0YXJ0IixyKSxtKXt2YXIgRT12JiZ2LnJlc29sdmUoKTtpZighdyYmIXYpe3ZhciBSPTEsTz1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShSKTtuZXcgbShhKS5vYnNlcnZlKE8se2NoYXJhY3RlckRhdGE6ITB9KX19ZWxzZSBmLm9uKCJmbi1lbmQiLGZ1bmN0aW9uKHQpe3RbMF0mJnRbMF0udHlwZT09PWd8fGEoKX0pfSx7fV0sMTY6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe2lmKCFzKHQpKXJldHVybiBudWxsO3ZhciBlPXdpbmRvdy5OUkVVTTtpZighZS5sb2FkZXJfY29uZmlnKXJldHVybiBudWxsO3ZhciBuPShlLmxvYWRlcl9jb25maWcuYWNjb3VudElEfHwiIikudG9TdHJpbmcoKXx8bnVsbCxyPShlLmxvYWRlcl9jb25maWcuYWdlbnRJRHx8IiIpLnRvU3RyaW5nKCl8fG51bGwsZj0oZS5sb2FkZXJfY29uZmlnLnRydXN0S2V5fHwiIikudG9TdHJpbmcoKXx8bnVsbDtpZighbnx8IXIpcmV0dXJuIG51bGw7dmFyIGg9bC5nZW5lcmF0ZVNwYW5JZCgpLG09bC5nZW5lcmF0ZVRyYWNlSWQoKSx2PURhdGUubm93KCksdz17c3BhbklkOmgsdHJhY2VJZDptLHRpbWVzdGFtcDp2fTtyZXR1cm4odC5zYW1lT3JpZ2lufHxjKHQpJiZwKCkpJiYody50cmFjZUNvbnRleHRQYXJlbnRIZWFkZXI9byhoLG0pLHcudHJhY2VDb250ZXh0U3RhdGVIZWFkZXI9aShoLHYsbixyLGYpKSwodC5zYW1lT3JpZ2luJiYhdSgpfHwhdC5zYW1lT3JpZ2luJiZjKHQpJiZkKCkpJiYody5uZXdyZWxpY0hlYWRlcj1hKGgsbSx2LG4scixmKSksd31mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIjAwLSIrZSsiLSIrdCsiLTAxIn1mdW5jdGlvbiBpKHQsZSxuLHIsbyl7dmFyIGk9MCxhPSIiLHM9MSxjPSIiLGY9IiI7cmV0dXJuIG8rIkBucj0iK2krIi0iK3MrIi0iK24rIi0iK3IrIi0iK3QrIi0iK2ErIi0iK2MrIi0iK2YrIi0iK2V9ZnVuY3Rpb24gYSh0LGUsbixyLG8saSl7dmFyIGE9ImJ0b2EiaW4gd2luZG93JiYiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93LmJ0b2E7aWYoIWEpcmV0dXJuIG51bGw7dmFyIHM9e3Y6WzAsMV0sZDp7dHk6IkJyb3dzZXIiLGFjOnIsYXA6byxpZDp0LHRyOmUsdGk6bn19O3JldHVybiBpJiZyIT09aSYmKHMuZC50az1pKSxidG9hKEpTT04uc3RyaW5naWZ5KHMpKX1mdW5jdGlvbiBzKHQpe3JldHVybiBmKCkmJmModCl9ZnVuY3Rpb24gYyh0KXt2YXIgZT0hMSxuPXt9O2lmKCJpbml0ImluIE5SRVVNJiYiZGlzdHJpYnV0ZWRfdHJhY2luZyJpbiBOUkVVTS5pbml0JiYobj1OUkVVTS5pbml0LmRpc3RyaWJ1dGVkX3RyYWNpbmcpLHQuc2FtZU9yaWdpbillPSEwO2Vsc2UgaWYobi5hbGxvd2VkX29yaWdpbnMgaW5zdGFuY2VvZiBBcnJheSlmb3IodmFyIHI9MDtyPG4uYWxsb3dlZF9vcmlnaW5zLmxlbmd0aDtyKyspe3ZhciBvPWgobi5hbGxvd2VkX29yaWdpbnNbcl0pO2lmKHQuaG9zdG5hbWU9PT1vLmhvc3RuYW1lJiZ0LnByb3RvY29sPT09by5wcm90b2NvbCYmdC5wb3J0PT09by5wb3J0KXtlPSEwO2JyZWFrfX1yZXR1cm4gZX1mdW5jdGlvbiBmKCl7cmV0dXJuImluaXQiaW4gTlJFVU0mJiJkaXN0cmlidXRlZF90cmFjaW5nImluIE5SRVVNLmluaXQmJiEhTlJFVU0uaW5pdC5kaXN0cmlidXRlZF90cmFjaW5nLmVuYWJsZWR9ZnVuY3Rpb24gdSgpe3JldHVybiJpbml0ImluIE5SRVVNJiYiZGlzdHJpYnV0ZWRfdHJhY2luZyJpbiBOUkVVTS5pbml0JiYhIU5SRVVNLmluaXQuZGlzdHJpYnV0ZWRfdHJhY2luZy5leGNsdWRlX25ld3JlbGljX2hlYWRlcn1mdW5jdGlvbiBkKCl7cmV0dXJuImluaXQiaW4gTlJFVU0mJiJkaXN0cmlidXRlZF90cmFjaW5nImluIE5SRVVNLmluaXQmJk5SRVVNLmluaXQuZGlzdHJpYnV0ZWRfdHJhY2luZy5jb3JzX3VzZV9uZXdyZWxpY19oZWFkZXIhPT0hMX1mdW5jdGlvbiBwKCl7cmV0dXJuImluaXQiaW4gTlJFVU0mJiJkaXN0cmlidXRlZF90cmFjaW5nImluIE5SRVVNLmluaXQmJiEhTlJFVU0uaW5pdC5kaXN0cmlidXRlZF90cmFjaW5nLmNvcnNfdXNlX3RyYWNlY29udGV4dF9oZWFkZXJzfXZhciBsPXQoMjgpLGg9dCgxOCk7ZS5leHBvcnRzPXtnZW5lcmF0ZVRyYWNlUGF5bG9hZDpyLHNob3VsZEdlbmVyYXRlVHJhY2U6c319LHt9XSwxNzpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcy5wYXJhbXMsbj10aGlzLm1ldHJpY3M7aWYoIXRoaXMuZW5kZWQpe3RoaXMuZW5kZWQ9ITA7Zm9yKHZhciByPTA7cjxwO3IrKyl0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZFtyXSx0aGlzLmxpc3RlbmVyLCExKTtyZXR1cm4gZS5wcm90b2NvbCYmImRhdGEiPT09ZS5wcm90b2NvbD92b2lkIGcoIkFqYXgvRGF0YVVybC9FeGNsdWRlZCIpOnZvaWQoZS5hYm9ydGVkfHwobi5kdXJhdGlvbj1hLm5vdygpLXRoaXMuc3RhcnRUaW1lLHRoaXMubG9hZENhcHR1cmVDYWxsZWR8fDQhPT10LnJlYWR5U3RhdGU/bnVsbD09ZS5zdGF0dXMmJihlLnN0YXR1cz0wKTppKHRoaXMsdCksbi5jYlRpbWU9dGhpcy5jYlRpbWUscygieGhyIixbZSxuLHRoaXMuc3RhcnRUaW1lLHRoaXMuZW5kVGltZSwieGhyIl0sdGhpcykpKX19ZnVuY3Rpb24gbyh0LGUpe3ZhciBuPWMoZSkscj10LnBhcmFtcztyLmhvc3RuYW1lPW4uaG9zdG5hbWUsci5wb3J0PW4ucG9ydCxyLnByb3RvY29sPW4ucHJvdG9jb2wsci5ob3N0PW4uaG9zdG5hbWUrIjoiK24ucG9ydCxyLnBhdGhuYW1lPW4ucGF0aG5hbWUsdC5wYXJzZWRPcmlnaW49bix0LnNhbWVPcmlnaW49bi5zYW1lT3JpZ2lufWZ1bmN0aW9uIGkodCxlKXt0LnBhcmFtcy5zdGF0dXM9ZS5zdGF0dXM7dmFyIG49dihlLHQubGFzdFNpemUpO2lmKG4mJih0Lm1ldHJpY3MucnhTaXplPW4pLHQuc2FtZU9yaWdpbil7dmFyIHI9ZS5nZXRSZXNwb25zZUhlYWRlcigiWC1OZXdSZWxpYy1BcHAtRGF0YSIpO3ImJih0LnBhcmFtcy5jYXQ9ci5zcGxpdCgiLCAiKS5wb3AoKSl9dC5sb2FkQ2FwdHVyZUNhbGxlZD0hMH12YXIgYT10KCJsb2FkZXIiKTtpZihhLnhocldyYXBwYWJsZSYmIWEuZGlzYWJsZWQpe3ZhciBzPXQoImhhbmRsZSIpLGM9dCgxOCksZj10KDE2KS5nZW5lcmF0ZVRyYWNlUGF5bG9hZCx1PXQoImVlIiksZD1bImxvYWQiLCJlcnJvciIsImFib3J0IiwidGltZW91dCJdLHA9ZC5sZW5ndGgsbD10KCJpZCIpLGg9dCgyNCksbT10KDIyKSx2PXQoMTkpLHc9dCgyMyksZz10KDI1KS5yZWNvcmRTdXBwb3J0YWJpbGl0eSx5PU5SRVVNLm8uUkVRLHg9d2luZG93LlhNTEh0dHBSZXF1ZXN0O2EuZmVhdHVyZXMueGhyPSEwLHQoMTUpLHQoOCksdS5vbigibmV3LXhociIsZnVuY3Rpb24odCl7dmFyIGU9dGhpcztlLnRvdGFsQ2JzPTAsZS5jYWxsZWQ9MCxlLmNiVGltZT0wLGUuZW5kPXIsZS5lbmRlZD0hMSxlLnhockd1aWRzPXt9LGUubGFzdFNpemU9bnVsbCxlLmxvYWRDYXB0dXJlQ2FsbGVkPSExLGUucGFyYW1zPXRoaXMucGFyYW1zfHx7fSxlLm1ldHJpY3M9dGhpcy5tZXRyaWNzfHx7fSx0LmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLGZ1bmN0aW9uKG4pe2koZSx0KX0sdyghMSkpLGgmJihoPjM0fHxoPDEwKXx8dC5hZGRFdmVudExpc3RlbmVyKCJwcm9ncmVzcyIsZnVuY3Rpb24odCl7ZS5sYXN0U2l6ZT10LmxvYWRlZH0sdyghMSkpfSksdS5vbigib3Blbi14aHItc3RhcnQiLGZ1bmN0aW9uKHQpe3RoaXMucGFyYW1zPXttZXRob2Q6dFswXX0sbyh0aGlzLHRbMV0pLHRoaXMubWV0cmljcz17fX0pLHUub24oIm9wZW4teGhyLWVuZCIsZnVuY3Rpb24odCxlKXsibG9hZGVyX2NvbmZpZyJpbiBOUkVVTSYmInhwaWQiaW4gTlJFVU0ubG9hZGVyX2NvbmZpZyYmdGhpcy5zYW1lT3JpZ2luJiZlLnNldFJlcXVlc3RIZWFkZXIoIlgtTmV3UmVsaWMtSUQiLE5SRVVNLmxvYWRlcl9jb25maWcueHBpZCk7dmFyIG49Zih0aGlzLnBhcnNlZE9yaWdpbik7aWYobil7dmFyIHI9ITE7bi5uZXdyZWxpY0hlYWRlciYmKGUuc2V0UmVxdWVzdEhlYWRlcigibmV3cmVsaWMiLG4ubmV3cmVsaWNIZWFkZXIpLHI9ITApLG4udHJhY2VDb250ZXh0UGFyZW50SGVhZGVyJiYoZS5zZXRSZXF1ZXN0SGVhZGVyKCJ0cmFjZXBhcmVudCIsbi50cmFjZUNvbnRleHRQYXJlbnRIZWFkZXIpLG4udHJhY2VDb250ZXh0U3RhdGVIZWFkZXImJmUuc2V0UmVxdWVzdEhlYWRlcigidHJhY2VzdGF0ZSIsbi50cmFjZUNvbnRleHRTdGF0ZUhlYWRlcikscj0hMCksciYmKHRoaXMuZHQ9bil9fSksdS5vbigic2VuZC14aHItc3RhcnQiLGZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tZXRyaWNzLHI9dFswXSxvPXRoaXM7aWYobiYmcil7dmFyIGk9bShyKTtpJiYobi50eFNpemU9aSl9dGhpcy5zdGFydFRpbWU9YS5ub3coKSx0aGlzLmxpc3RlbmVyPWZ1bmN0aW9uKHQpe3RyeXsiYWJvcnQiIT09dC50eXBlfHxvLmxvYWRDYXB0dXJlQ2FsbGVkfHwoby5wYXJhbXMuYWJvcnRlZD0hMCksKCJsb2FkIiE9PXQudHlwZXx8by5jYWxsZWQ9PT1vLnRvdGFsQ2JzJiYoby5vbmxvYWRDYWxsZWR8fCJmdW5jdGlvbiIhPXR5cGVvZiBlLm9ubG9hZCkpJiZvLmVuZChlKX1jYXRjaChuKXt0cnl7dS5lbWl0KCJpbnRlcm5hbC1lcnJvciIsW25dKX1jYXRjaChyKXt9fX07Zm9yKHZhciBzPTA7czxwO3MrKyllLmFkZEV2ZW50TGlzdGVuZXIoZFtzXSx0aGlzLmxpc3RlbmVyLHcoITEpKX0pLHUub24oInhoci1jYi10aW1lIixmdW5jdGlvbih0LGUsbil7dGhpcy5jYlRpbWUrPXQsZT90aGlzLm9ubG9hZENhbGxlZD0hMDp0aGlzLmNhbGxlZCs9MSx0aGlzLmNhbGxlZCE9PXRoaXMudG90YWxDYnN8fCF0aGlzLm9ubG9hZENhbGxlZCYmImZ1bmN0aW9uIj09dHlwZW9mIG4ub25sb2FkfHx0aGlzLmVuZChuKX0pLHUub24oInhoci1sb2FkLWFkZGVkIixmdW5jdGlvbih0LGUpe3ZhciBuPSIiK2wodCkrISFlO3RoaXMueGhyR3VpZHMmJiF0aGlzLnhockd1aWRzW25dJiYodGhpcy54aHJHdWlkc1tuXT0hMCx0aGlzLnRvdGFsQ2JzKz0xKX0pLHUub24oInhoci1sb2FkLXJlbW92ZWQiLGZ1bmN0aW9uKHQsZSl7dmFyIG49IiIrbCh0KSshIWU7dGhpcy54aHJHdWlkcyYmdGhpcy54aHJHdWlkc1tuXSYmKGRlbGV0ZSB0aGlzLnhockd1aWRzW25dLHRoaXMudG90YWxDYnMtPTEpfSksdS5vbigieGhyLXJlc29sdmVkIixmdW5jdGlvbigpe3RoaXMuZW5kVGltZT1hLm5vdygpfSksdS5vbigiYWRkRXZlbnRMaXN0ZW5lci1lbmQiLGZ1bmN0aW9uKHQsZSl7ZSBpbnN0YW5jZW9mIHgmJiJsb2FkIj09PXRbMF0mJnUuZW1pdCgieGhyLWxvYWQtYWRkZWQiLFt0WzFdLHRbMl1dLGUpfSksdS5vbigicmVtb3ZlRXZlbnRMaXN0ZW5lci1lbmQiLGZ1bmN0aW9uKHQsZSl7ZSBpbnN0YW5jZW9mIHgmJiJsb2FkIj09PXRbMF0mJnUuZW1pdCgieGhyLWxvYWQtcmVtb3ZlZCIsW3RbMV0sdFsyXV0sZSl9KSx1Lm9uKCJmbi1zdGFydCIsZnVuY3Rpb24odCxlLG4pe2UgaW5zdGFuY2VvZiB4JiYoIm9ubG9hZCI9PT1uJiYodGhpcy5vbmxvYWQ9ITApLCgibG9hZCI9PT0odFswXSYmdFswXS50eXBlKXx8dGhpcy5vbmxvYWQpJiYodGhpcy54aHJDYlN0YXJ0PWEubm93KCkpKX0pLHUub24oImZuLWVuZCIsZnVuY3Rpb24odCxlKXt0aGlzLnhockNiU3RhcnQmJnUuZW1pdCgieGhyLWNiLXRpbWUiLFthLm5vdygpLXRoaXMueGhyQ2JTdGFydCx0aGlzLm9ubG9hZCxlXSxlKX0pLHUub24oImZldGNoLWJlZm9yZS1zdGFydCIsZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LGUpe3ZhciBuPSExO3JldHVybiBlLm5ld3JlbGljSGVhZGVyJiYodC5zZXQoIm5ld3JlbGljIixlLm5ld3JlbGljSGVhZGVyKSxuPSEwKSxlLnRyYWNlQ29udGV4dFBhcmVudEhlYWRlciYmKHQuc2V0KCJ0cmFjZXBhcmVudCIsZS50cmFjZUNvbnRleHRQYXJlbnRIZWFkZXIpLGUudHJhY2VDb250ZXh0U3RhdGVIZWFkZXImJnQuc2V0KCJ0cmFjZXN0YXRlIixlLnRyYWNlQ29udGV4dFN0YXRlSGVhZGVyKSxuPSEwKSxufXZhciBuLHI9dFsxXXx8e307InN0cmluZyI9PXR5cGVvZiB0WzBdP249dFswXTp0WzBdJiZ0WzBdLnVybD9uPXRbMF0udXJsOndpbmRvdy5VUkwmJnRbMF0mJnRbMF1pbnN0YW5jZW9mIFVSTCYmKG49dFswXS5ocmVmKSxuJiYodGhpcy5wYXJzZWRPcmlnaW49YyhuKSx0aGlzLnNhbWVPcmlnaW49dGhpcy5wYXJzZWRPcmlnaW4uc2FtZU9yaWdpbik7dmFyIG89Zih0aGlzLnBhcnNlZE9yaWdpbik7aWYobyYmKG8ubmV3cmVsaWNIZWFkZXJ8fG8udHJhY2VDb250ZXh0UGFyZW50SGVhZGVyKSlpZigic3RyaW5nIj09dHlwZW9mIHRbMF18fHdpbmRvdy5VUkwmJnRbMF0mJnRbMF1pbnN0YW5jZW9mIFVSTCl7dmFyIGk9e307Zm9yKHZhciBhIGluIHIpaVthXT1yW2FdO2kuaGVhZGVycz1uZXcgSGVhZGVycyhyLmhlYWRlcnN8fHt9KSxlKGkuaGVhZGVycyxvKSYmKHRoaXMuZHQ9byksdC5sZW5ndGg+MT90WzFdPWk6dC5wdXNoKGkpfWVsc2UgdFswXSYmdFswXS5oZWFkZXJzJiZlKHRbMF0uaGVhZGVycyxvKSYmKHRoaXMuZHQ9byl9KSx1Lm9uKCJmZXRjaC1zdGFydCIsZnVuY3Rpb24odCxlKXt0aGlzLnBhcmFtcz17fSx0aGlzLm1ldHJpY3M9e30sdGhpcy5zdGFydFRpbWU9YS5ub3coKSx0aGlzLmR0PWUsdC5sZW5ndGg+PTEmJih0aGlzLnRhcmdldD10WzBdKSx0Lmxlbmd0aD49MiYmKHRoaXMub3B0cz10WzFdKTt2YXIgbixyPXRoaXMub3B0c3x8e30saT10aGlzLnRhcmdldDtpZigic3RyaW5nIj09dHlwZW9mIGk/bj1pOiJvYmplY3QiPT10eXBlb2YgaSYmaSBpbnN0YW5jZW9mIHk/bj1pLnVybDp3aW5kb3cuVVJMJiYib2JqZWN0Ij09dHlwZW9mIGkmJmkgaW5zdGFuY2VvZiBVUkwmJihuPWkuaHJlZiksbyh0aGlzLG4pLCJkYXRhIiE9PXRoaXMucGFyYW1zLnByb3RvY29sKXt2YXIgcz0oIiIrKGkmJmkgaW5zdGFuY2VvZiB5JiZpLm1ldGhvZHx8ci5tZXRob2R8fCJHRVQiKSkudG9VcHBlckNhc2UoKTt0aGlzLnBhcmFtcy5tZXRob2Q9cyx0aGlzLnR4U2l6ZT1tKHIuYm9keSl8fDB9fSksdS5vbigiZmV0Y2gtZG9uZSIsZnVuY3Rpb24odCxlKXtpZih0aGlzLmVuZFRpbWU9YS5ub3coKSx0aGlzLnBhcmFtc3x8KHRoaXMucGFyYW1zPXt9KSwiZGF0YSI9PT10aGlzLnBhcmFtcy5wcm90b2NvbClyZXR1cm4gdm9pZCBnKCJBamF4L0RhdGFVcmwvRXhjbHVkZWQiKTt0aGlzLnBhcmFtcy5zdGF0dXM9ZT9lLnN0YXR1czowO3ZhciBuOyJzdHJpbmciPT10eXBlb2YgdGhpcy5yeFNpemUmJnRoaXMucnhTaXplLmxlbmd0aD4wJiYobj0rdGhpcy5yeFNpemUpO3ZhciByPXt0eFNpemU6dGhpcy50eFNpemUscnhTaXplOm4sZHVyYXRpb246YS5ub3coKS10aGlzLnN0YXJ0VGltZX07cygieGhyIixbdGhpcy5wYXJhbXMscix0aGlzLnN0YXJ0VGltZSx0aGlzLmVuZFRpbWUsImZldGNoIl0sdGhpcyl9KX19LHt9XSwxODpbZnVuY3Rpb24odCxlLG4pe3ZhciByPXt9O2UuZXhwb3J0cz1mdW5jdGlvbih0KXtpZih0IGluIHIpcmV0dXJuIHJbdF07aWYoMD09PSh0fHwiIikuaW5kZXhPZigiZGF0YToiKSlyZXR1cm57cHJvdG9jb2w6ImRhdGEifTt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIiksbj13aW5kb3cubG9jYXRpb24sbz17fTtlLmhyZWY9dCxvLnBvcnQ9ZS5wb3J0O3ZhciBpPWUuaHJlZi5zcGxpdCgiOi8vIik7IW8ucG9ydCYmaVsxXSYmKG8ucG9ydD1pWzFdLnNwbGl0KCIvIilbMF0uc3BsaXQoIkAiKS5wb3AoKS5zcGxpdCgiOiIpWzFdKSxvLnBvcnQmJiIwIiE9PW8ucG9ydHx8KG8ucG9ydD0iaHR0cHMiPT09aVswXT8iNDQzIjoiODAiKSxvLmhvc3RuYW1lPWUuaG9zdG5hbWV8fG4uaG9zdG5hbWUsby5wYXRobmFtZT1lLnBhdGhuYW1lLG8ucHJvdG9jb2w9aVswXSwiLyIhPT1vLnBhdGhuYW1lLmNoYXJBdCgwKSYmKG8ucGF0aG5hbWU9Ii8iK28ucGF0aG5hbWUpO3ZhciBhPSFlLnByb3RvY29sfHwiOiI9PT1lLnByb3RvY29sfHxlLnByb3RvY29sPT09bi5wcm90b2NvbCxzPWUuaG9zdG5hbWU9PT1kb2N1bWVudC5kb21haW4mJmUucG9ydD09PW4ucG9ydDtyZXR1cm4gby5zYW1lT3JpZ2luPWEmJighZS5ob3N0bmFtZXx8cyksIi8iPT09by5wYXRobmFtZSYmKHJbdF09byksb319LHt9XSwxOTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlKXt2YXIgbj10LnJlc3BvbnNlVHlwZTtyZXR1cm4ianNvbiI9PT1uJiZudWxsIT09ZT9lOiJhcnJheWJ1ZmZlciI9PT1ufHwiYmxvYiI9PT1ufHwianNvbiI9PT1uP28odC5yZXNwb25zZSk6InRleHQiPT09bnx8IiI9PT1ufHx2b2lkIDA9PT1uP28odC5yZXNwb25zZVRleHQpOnZvaWQgMH12YXIgbz10KDIyKTtlLmV4cG9ydHM9cn0se31dLDIwOltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBvKHQsZSxuLHIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB1LnJlY29yZFN1cHBvcnRhYmlsaXR5KCJBUEkvIitlKyIvY2FsbGVkIiksaSh0K2UsW2Yubm93KCldLmNvbmNhdChzKGFyZ3VtZW50cykpLG4/bnVsbDp0aGlzLHIpLG4/dm9pZCAwOnRoaXN9fXZhciBpPXQoImhhbmRsZSIpLGE9dCgzMSkscz10KDMyKSxjPXQoImVlIikuZ2V0KCJ0cmFjZXIiKSxmPXQoImxvYWRlciIpLHU9dCgyNSksZD1OUkVVTTsidW5kZWZpbmVkIj09dHlwZW9mIHdpbmRvdy5uZXdyZWxpYyYmKG5ld3JlbGljPWQpO3ZhciBwPVsic2V0UGFnZVZpZXdOYW1lIiwic2V0Q3VzdG9tQXR0cmlidXRlIiwic2V0RXJyb3JIYW5kbGVyIiwiZmluaXNoZWQiLCJhZGRUb1RyYWNlIiwiaW5saW5lSGl0IiwiYWRkUmVsZWFzZSJdLGw9ImFwaS0iLGg9bCsiaXhuLSI7YShwLGZ1bmN0aW9uKHQsZSl7ZFtlXT1vKGwsZSwhMCwiYXBpIil9KSxkLmFkZFBhZ2VBY3Rpb249byhsLCJhZGRQYWdlQWN0aW9uIiwhMCksZC5zZXRDdXJyZW50Um91dGVOYW1lPW8obCwicm91dGVOYW1lIiwhMCksZS5leHBvcnRzPW5ld3JlbGljLGQuaW50ZXJhY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHIpLmdldCgpfTt2YXIgbT1yLnByb3RvdHlwZT17Y3JlYXRlVHJhY2VyOmZ1bmN0aW9uKHQsZSl7dmFyIG49e30scj10aGlzLG89ImZ1bmN0aW9uIj09dHlwZW9mIGU7cmV0dXJuIGkoaCsidHJhY2VyIixbZi5ub3coKSx0LG5dLHIpLGZ1bmN0aW9uKCl7aWYoYy5lbWl0KChvPyIiOiJuby0iKSsiZm4tc3RhcnQiLFtmLm5vdygpLHIsb10sbiksbyl0cnl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKHQpe3Rocm93IGMuZW1pdCgiZm4tZXJyIixbYXJndW1lbnRzLHRoaXMsdF0sbiksdH1maW5hbGx5e2MuZW1pdCgiZm4tZW5kIixbZi5ub3coKV0sbil9fX19O2EoImFjdGlvblRleHQsc2V0TmFtZSxzZXRBdHRyaWJ1dGUsc2F2ZSxpZ25vcmUsb25FbmQsZ2V0Q29udGV4dCxlbmQsZ2V0Ii5zcGxpdCgiLCIpLGZ1bmN0aW9uKHQsZSl7bVtlXT1vKGgsZSl9KSxuZXdyZWxpYy5ub3RpY2VFcnJvcj1mdW5jdGlvbih0LGUpeyJzdHJpbmciPT10eXBlb2YgdCYmKHQ9bmV3IEVycm9yKHQpKSx1LnJlY29yZFN1cHBvcnRhYmlsaXR5KCJBUEkvbm90aWNlRXJyb3IvY2FsbGVkIiksaSgiZXJyIixbdCxmLm5vdygpLCExLGVdKX19LHt9XSwyMTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7aWYoTlJFVU0uaW5pdCl7Zm9yKHZhciBlPU5SRVVNLmluaXQsbj10LnNwbGl0KCIuIikscj0wO3I8bi5sZW5ndGgtMTtyKyspaWYoZT1lW25bcl1dLCJvYmplY3QiIT10eXBlb2YgZSlyZXR1cm47cmV0dXJuIGU9ZVtuW24ubGVuZ3RoLTFdXX19ZS5leHBvcnRzPXtnZXRDb25maWd1cmF0aW9uOnJ9fSx7fV0sMjI6W2Z1bmN0aW9uKHQsZSxuKXtlLmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoInN0cmluZyI9PXR5cGVvZiB0JiZ0Lmxlbmd0aClyZXR1cm4gdC5sZW5ndGg7aWYoIm9iamVjdCI9PXR5cGVvZiB0KXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZ0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXImJnQuYnl0ZUxlbmd0aClyZXR1cm4gdC5ieXRlTGVuZ3RoO2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgQmxvYiYmdCBpbnN0YW5jZW9mIEJsb2ImJnQuc2l6ZSlyZXR1cm4gdC5zaXplO2lmKCEoInVuZGVmaW5lZCIhPXR5cGVvZiBGb3JtRGF0YSYmdCBpbnN0YW5jZW9mIEZvcm1EYXRhKSl0cnl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHQpLmxlbmd0aH1jYXRjaChlKXtyZXR1cm59fX19LHt9XSwyMzpbZnVuY3Rpb24odCxlLG4pe3ZhciByPSExO3RyeXt2YXIgbz1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sInBhc3NpdmUiLHtnZXQ6ZnVuY3Rpb24oKXtyPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJ0ZXN0UGFzc2l2ZSIsbnVsbCxvKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigidGVzdFBhc3NpdmUiLG51bGwsbyl9Y2F0Y2goaSl7fWUuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gcj97cGFzc2l2ZTohMCxjYXB0dXJlOiEhdH06ISF0fX0se31dLDI0OltmdW5jdGlvbih0LGUsbil7dmFyIHI9MCxvPW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hbXC9cc10oXGQrXC5cZCspLyk7byYmKHI9K29bMV0pLGUuZXhwb3J0cz1yfSx7fV0sMjU6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSl7dmFyIG49W2EsdCx7bmFtZTp0fSxlXTtyZXR1cm4gaSgic3RvcmVNZXRyaWMiLG4sbnVsbCwiYXBpIiksbn1mdW5jdGlvbiBvKHQsZSl7dmFyIG49W3MsdCx7bmFtZTp0fSxlXTtyZXR1cm4gaSgic3RvcmVFdmVudE1ldHJpY3MiLG4sbnVsbCwiYXBpIiksbn12YXIgaT10KCJoYW5kbGUiKSxhPSJzbSIscz0iY20iO2UuZXhwb3J0cz17Y29uc3RhbnRzOntTVVBQT1JUQUJJTElUWV9NRVRSSUM6YSxDVVNUT01fTUVUUklDOnN9LHJlY29yZFN1cHBvcnRhYmlsaXR5OnIscmVjb3JkQ3VzdG9tOm99fSx7fV0sMjY6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKCl7cmV0dXJuIHMuZXhpc3RzJiZwZXJmb3JtYW5jZS5ub3c/TWF0aC5yb3VuZChwZXJmb3JtYW5jZS5ub3coKSk6KGk9TWF0aC5tYXgoKG5ldyBEYXRlKS5nZXRUaW1lKCksaSkpLWF9ZnVuY3Rpb24gbygpe3JldHVybiBpfXZhciBpPShuZXcgRGF0ZSkuZ2V0VGltZSgpLGE9aSxzPXQoMzMpO2UuZXhwb3J0cz1yLGUuZXhwb3J0cy5vZmZzZXQ9YSxlLmV4cG9ydHMuZ2V0TGFzdFRpbWVzdGFtcD1vfSx7fV0sMjc6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSl7dmFyIG49dC5nZXRFbnRyaWVzKCk7bi5mb3JFYWNoKGZ1bmN0aW9uKHQpeyJmaXJzdC1wYWludCI9PT10Lm5hbWU/bCgidGltaW5nIixbImZwIixNYXRoLmZsb29yKHQuc3RhcnRUaW1lKV0pOiJmaXJzdC1jb250ZW50ZnVsLXBhaW50Ij09PXQubmFtZSYmbCgidGltaW5nIixbImZjcCIsTWF0aC5mbG9vcih0LnN0YXJ0VGltZSldKX0pfWZ1bmN0aW9uIG8odCxlKXt2YXIgbj10LmdldEVudHJpZXMoKTtpZihuLmxlbmd0aD4wKXt2YXIgcj1uW24ubGVuZ3RoLTFdO2lmKGYmJmY8ci5zdGFydFRpbWUpcmV0dXJuO3ZhciBvPVtyXSxpPWEoe30pO2kmJm8ucHVzaChpKSxsKCJsY3AiLG8pfX1mdW5jdGlvbiBpKHQpe3QuZ2V0RW50cmllcygpLmZvckVhY2goZnVuY3Rpb24odCl7dC5oYWRSZWNlbnRJbnB1dHx8bCgiY2xzIixbdF0pfSl9ZnVuY3Rpb24gYSh0KXt2YXIgZT1uYXZpZ2F0b3IuY29ubmVjdGlvbnx8bmF2aWdhdG9yLm1vekNvbm5lY3Rpb258fG5hdmlnYXRvci53ZWJraXRDb25uZWN0aW9uO2lmKGUpcmV0dXJuIGUudHlwZSYmKHRbIm5ldC10eXBlIl09ZS50eXBlKSxlLmVmZmVjdGl2ZVR5cGUmJih0WyJuZXQtZXR5cGUiXT1lLmVmZmVjdGl2ZVR5cGUpLGUucnR0JiYodFsibmV0LXJ0dCJdPWUucnR0KSxlLmRvd25saW5rJiYodFsibmV0LWRsaW5rIl09ZS5kb3dubGluayksdH1mdW5jdGlvbiBzKHQpe2lmKHQgaW5zdGFuY2VvZiB3JiYheSl7dmFyIGU9TWF0aC5yb3VuZCh0LnRpbWVTdGFtcCksbj17dHlwZTp0LnR5cGV9O2EobiksZTw9aC5ub3coKT9uLmZpZD1oLm5vdygpLWU6ZT5oLm9mZnNldCYmZTw9RGF0ZS5ub3coKT8oZS09aC5vZmZzZXQsbi5maWQ9aC5ub3coKS1lKTplPWgubm93KCkseT0hMCxsKCJ0aW1pbmciLFsiZmkiLGUsbl0pfX1mdW5jdGlvbiBjKHQpeyJoaWRkZW4iPT09dCYmKGY9aC5ub3coKSxsKCJwYWdlSGlkZSIsW2ZdKSl9aWYoISgiaW5pdCJpbiBOUkVVTSYmInBhZ2Vfdmlld190aW1pbmciaW4gTlJFVU0uaW5pdCYmImVuYWJsZWQiaW4gTlJFVU0uaW5pdC5wYWdlX3ZpZXdfdGltaW5nJiZOUkVVTS5pbml0LnBhZ2Vfdmlld190aW1pbmcuZW5hYmxlZD09PSExKSl7dmFyIGYsdSxkLHAsbD10KCJoYW5kbGUiKSxoPXQoImxvYWRlciIpLG09dCgzMCksdj10KDIzKSx3PU5SRVVNLm8uRVY7aWYoIlBlcmZvcm1hbmNlT2JzZXJ2ZXIiaW4gd2luZG93JiYiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93LlBlcmZvcm1hbmNlT2JzZXJ2ZXIpe3U9bmV3IFBlcmZvcm1hbmNlT2JzZXJ2ZXIocik7dHJ5e3Uub2JzZXJ2ZSh7ZW50cnlUeXBlczpbInBhaW50Il19KX1jYXRjaChnKXt9ZD1uZXcgUGVyZm9ybWFuY2VPYnNlcnZlcihvKTt0cnl7ZC5vYnNlcnZlKHtlbnRyeVR5cGVzOlsibGFyZ2VzdC1jb250ZW50ZnVsLXBhaW50Il19KX1jYXRjaChnKXt9cD1uZXcgUGVyZm9ybWFuY2VPYnNlcnZlcihpKTt0cnl7cC5vYnNlcnZlKHt0eXBlOiJsYXlvdXQtc2hpZnQiLGJ1ZmZlcmVkOiEwfSl9Y2F0Y2goZyl7fX1pZigiYWRkRXZlbnRMaXN0ZW5lciJpbiBkb2N1bWVudCl7dmFyIHk9ITEseD1bImNsaWNrIiwia2V5ZG93biIsIm1vdXNlZG93biIsInBvaW50ZXJkb3duIiwidG91Y2hzdGFydCJdO3guZm9yRWFjaChmdW5jdGlvbih0KXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHQscyx2KCExKSl9KX1tKGMpfX0se31dLDI4OltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcigpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZT8xNSZlW24rK106MTYqTWF0aC5yYW5kb20oKXwwfXZhciBlPW51bGwsbj0wLHI9d2luZG93LmNyeXB0b3x8d2luZG93Lm1zQ3J5cHRvO3ImJnIuZ2V0UmFuZG9tVmFsdWVzJiYoZT1yLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgzMSkpKTtmb3IodmFyIG8saT0ieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4IixhPSIiLHM9MDtzPGkubGVuZ3RoO3MrKylvPWlbc10sIngiPT09bz9hKz10KCkudG9TdHJpbmcoMTYpOiJ5Ij09PW8/KG89MyZ0KCl8OCxhKz1vLnRvU3RyaW5nKDE2KSk6YSs9bztyZXR1cm4gYX1mdW5jdGlvbiBvKCl7cmV0dXJuIGEoMTYpfWZ1bmN0aW9uIGkoKXtyZXR1cm4gYSgzMil9ZnVuY3Rpb24gYSh0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIG4/MTUmbltyKytdOjE2Kk1hdGgucmFuZG9tKCl8MH12YXIgbj1udWxsLHI9MCxvPXdpbmRvdy5jcnlwdG98fHdpbmRvdy5tc0NyeXB0bztvJiZvLmdldFJhbmRvbVZhbHVlcyYmVWludDhBcnJheSYmKG49by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkodCkpKTtmb3IodmFyIGk9W10sYT0wO2E8dDthKyspaS5wdXNoKGUoKS50b1N0cmluZygxNikpO3JldHVybiBpLmpvaW4oIiIpfWUuZXhwb3J0cz17Z2VuZXJhdGVVdWlkOnIsZ2VuZXJhdGVTcGFuSWQ6byxnZW5lcmF0ZVRyYWNlSWQ6aX19LHt9XSwyOTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlKXtpZighbylyZXR1cm4hMTtpZih0IT09bylyZXR1cm4hMTtpZighZSlyZXR1cm4hMDtpZighaSlyZXR1cm4hMTtmb3IodmFyIG49aS5zcGxpdCgiLiIpLHI9ZS5zcGxpdCgiLiIpLGE9MDthPHIubGVuZ3RoO2ErKylpZihyW2FdIT09blthXSlyZXR1cm4hMTtyZXR1cm4hMH12YXIgbz1udWxsLGk9bnVsbCxhPS9WZXJzaW9uXC8oXFMrKVxzK1NhZmFyaS87aWYobmF2aWdhdG9yLnVzZXJBZ2VudCl7dmFyIHM9bmF2aWdhdG9yLnVzZXJBZ2VudCxjPXMubWF0Y2goYSk7YyYmcy5pbmRleE9mKCJDaHJvbWUiKT09PS0xJiZzLmluZGV4T2YoIkNocm9taXVtIik9PT0tMSYmKG89IlNhZmFyaSIsaT1jWzFdKX1lLmV4cG9ydHM9e2FnZW50Om8sdmVyc2lvbjppLG1hdGNoOnJ9fSx7fV0sMzA6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe2Z1bmN0aW9uIGUoKXt0KHMmJmRvY3VtZW50W3NdP2RvY3VtZW50W3NdOmRvY3VtZW50W2ldPyJoaWRkZW4iOiJ2aXNpYmxlIil9ImFkZEV2ZW50TGlzdGVuZXIiaW4gZG9jdW1lbnQmJmEmJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoYSxlLG8oITEpKX12YXIgbz10KDIzKTtlLmV4cG9ydHM9cjt2YXIgaSxhLHM7InVuZGVmaW5lZCIhPXR5cGVvZiBkb2N1bWVudC5oaWRkZW4/KGk9ImhpZGRlbiIsYT0idmlzaWJpbGl0eWNoYW5nZSIscz0idmlzaWJpbGl0eVN0YXRlIik6InVuZGVmaW5lZCIhPXR5cGVvZiBkb2N1bWVudC5tc0hpZGRlbj8oaT0ibXNIaWRkZW4iLGE9Im1zdmlzaWJpbGl0eWNoYW5nZSIpOiJ1bmRlZmluZWQiIT10eXBlb2YgZG9jdW1lbnQud2Via2l0SGlkZGVuJiYoaT0id2Via2l0SGlkZGVuIixhPSJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlIixzPSJ3ZWJraXRWaXNpYmlsaXR5U3RhdGUiKX0se31dLDMxOltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUpe3ZhciBuPVtdLHI9IiIsaT0wO2ZvcihyIGluIHQpby5jYWxsKHQscikmJihuW2ldPWUocix0W3JdKSxpKz0xKTtyZXR1cm4gbn12YXIgbz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2UuZXhwb3J0cz1yfSx7fV0sMzI6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSxuKXtlfHwoZT0wKSwidW5kZWZpbmVkIj09dHlwZW9mIG4mJihuPXQ/dC5sZW5ndGg6MCk7Zm9yKHZhciByPS0xLG89bi1lfHwwLGk9QXJyYXkobzwwPzA6byk7KytyPG87KWlbcl09dFtlK3JdO3JldHVybiBpfWUuZXhwb3J0cz1yfSx7fV0sMzM6W2Z1bmN0aW9uKHQsZSxuKXtlLmV4cG9ydHM9e2V4aXN0czoidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdy5wZXJmb3JtYW5jZSYmd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZyYmInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cucGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydH19LHt9XSxlZTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIoKXt9ZnVuY3Rpb24gbyh0KXtmdW5jdGlvbiBlKHQpe3JldHVybiB0JiZ0IGluc3RhbmNlb2Ygcj90OnQ/Zih0LGMsYSk6YSgpfWZ1bmN0aW9uIG4obixyLG8saSxhKXtpZihhIT09ITEmJihhPSEwKSwhbC5hYm9ydGVkfHxpKXt0JiZhJiZ0KG4scixvKTtmb3IodmFyIHM9ZShvKSxjPW0obiksZj1jLmxlbmd0aCx1PTA7dTxmO3UrKyljW3VdLmFwcGx5KHMscik7dmFyIHA9ZFt5W25dXTtyZXR1cm4gcCYmcC5wdXNoKFt4LG4scixzXSksc319ZnVuY3Rpb24gaSh0LGUpe2dbdF09bSh0KS5jb25jYXQoZSl9ZnVuY3Rpb24gaCh0LGUpe3ZhciBuPWdbdF07aWYobilmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdPT09ZSYmbi5zcGxpY2UociwxKX1mdW5jdGlvbiBtKHQpe3JldHVybiBnW3RdfHxbXX1mdW5jdGlvbiB2KHQpe3JldHVybiBwW3RdPXBbdF18fG8obil9ZnVuY3Rpb24gdyh0LGUpe2wuYWJvcnRlZHx8dSh0LGZ1bmN0aW9uKHQsbil7ZT1lfHwiZmVhdHVyZSIseVtuXT1lLGUgaW4gZHx8KGRbZV09W10pfSl9dmFyIGc9e30seT17fSx4PXtvbjppLGFkZEV2ZW50TGlzdGVuZXI6aSxyZW1vdmVFdmVudExpc3RlbmVyOmgsZW1pdDpuLGdldDp2LGxpc3RlbmVyczptLGNvbnRleHQ6ZSxidWZmZXI6dyxhYm9ydDpzLGFib3J0ZWQ6ITF9O3JldHVybiB4fWZ1bmN0aW9uIGkodCl7cmV0dXJuIGYodCxjLGEpfWZ1bmN0aW9uIGEoKXtyZXR1cm4gbmV3IHJ9ZnVuY3Rpb24gcygpeyhkLmFwaXx8ZC5mZWF0dXJlKSYmKGwuYWJvcnRlZD0hMCxkPWwuYmFja2xvZz17fSl9dmFyIGM9Im5yQGNvbnRleHQiLGY9dCgiZ29zIiksdT10KDMxKSxkPXt9LHA9e30sbD1lLmV4cG9ydHM9bygpO2UuZXhwb3J0cy5nZXRPclNldENvbnRleHQ9aSxsLmJhY2tsb2c9ZH0se31dLGdvczpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlLG4pe2lmKG8uY2FsbCh0LGUpKXJldHVybiB0W2VdO3ZhciByPW4oKTtpZihPYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5rZXlzKXRyeXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6cix3cml0YWJsZTohMCxlbnVtZXJhYmxlOiExfSkscn1jYXRjaChpKXt9cmV0dXJuIHRbZV09cixyfXZhciBvPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZS5leHBvcnRzPXJ9LHt9XSxoYW5kbGU6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSxuLHIpe28uYnVmZmVyKFt0XSxyKSxvLmVtaXQodCxlLG4pfXZhciBvPXQoImVlIikuZ2V0KCJoYW5kbGUiKTtlLmV4cG9ydHM9cixyLmVlPW99LHt9XSxpZDpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dHlwZW9mIHQ7cmV0dXJuIXR8fCJvYmplY3QiIT09ZSYmImZ1bmN0aW9uIiE9PWU/LTE6dD09PXdpbmRvdz8wOmEodCxpLGZ1bmN0aW9uKCl7cmV0dXJuIG8rK30pfXZhciBvPTEsaT0ibnJAaWQiLGE9dCgiZ29zIik7ZS5leHBvcnRzPXJ9LHt9XSxsb2FkZXI6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKCl7aWYoIVQrKyl7dmFyIHQ9Ty5pbmZvPU5SRVVNLmluZm8sZT1tLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTtpZihzZXRUaW1lb3V0KGYuYWJvcnQsM2U0KSwhKHQmJnQubGljZW5zZUtleSYmdC5hcHBsaWNhdGlvbklEJiZlKSlyZXR1cm4gZi5hYm9ydCgpO2MoRSxmdW5jdGlvbihlLG4pe3RbZV18fCh0W2VdPW4pfSk7dmFyIG49YSgpO3MoIm1hcmsiLFsib25sb2FkIixuK08ub2Zmc2V0XSxudWxsLCJhcGkiKSxzKCJ0aW1pbmciLFsibG9hZCIsbl0pO3ZhciByPW0uY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7MD09PXQuYWdlbnQuaW5kZXhPZigiaHR0cDovLyIpfHwwPT09dC5hZ2VudC5pbmRleE9mKCJodHRwczovLyIpP3Iuc3JjPXQuYWdlbnQ6ci5zcmM9bCsiOi8vIit0LmFnZW50LGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocixlKX19ZnVuY3Rpb24gbygpeyJjb21wbGV0ZSI9PT1tLnJlYWR5U3RhdGUmJmkoKX1mdW5jdGlvbiBpKCl7cygibWFyayIsWyJkb21Db250ZW50IixhKCkrTy5vZmZzZXRdLG51bGwsImFwaSIpfXZhciBhPXQoMjYpLHM9dCgiaGFuZGxlIiksYz10KDMxKSxmPXQoImVlIiksdT10KDI5KSxkPXQoMjEpLHA9dCgyMyksbD1kLmdldENvbmZpZ3VyYXRpb24oInNzbCIpPT09ITE/Imh0dHAiOiJodHRwcyIsaD13aW5kb3csbT1oLmRvY3VtZW50LHY9ImFkZEV2ZW50TGlzdGVuZXIiLHc9ImF0dGFjaEV2ZW50IixnPWguWE1MSHR0cFJlcXVlc3QseT1nJiZnLnByb3RvdHlwZSx4PSExO05SRVVNLm89e1NUOnNldFRpbWVvdXQsU0k6aC5zZXRJbW1lZGlhdGUsQ1Q6Y2xlYXJUaW1lb3V0LFhIUjpnLFJFUTpoLlJlcXVlc3QsRVY6aC5FdmVudCxQUjpoLlByb21pc2UsTU86aC5NdXRhdGlvbk9ic2VydmVyfTt2YXIgYj0iIitsb2NhdGlvbixFPXtiZWFjb246ImJhbS5uci1kYXRhLm5ldCIsZXJyb3JCZWFjb246ImJhbS5uci1kYXRhLm5ldCIsYWdlbnQ6ImpzLWFnZW50Lm5ld3JlbGljLmNvbS9uci1zcGEtMTIxNi5taW4uanMifSxSPWcmJnkmJnlbdl0mJiEvQ3JpT1MvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksTz1lLmV4cG9ydHM9e29mZnNldDphLmdldExhc3RUaW1lc3RhbXAoKSxub3c6YSxvcmlnaW46YixmZWF0dXJlczp7fSx4aHJXcmFwcGFibGU6Uix1c2VyQWdlbnQ6dSxkaXNhYmxlZDp4fTtpZigheCl7dCgyMCksdCgyNyksbVt2XT8obVt2XSgiRE9NQ29udGVudExvYWRlZCIsaSxwKCExKSksaFt2XSgibG9hZCIscixwKCExKSkpOihtW3ddKCJvbnJlYWR5c3RhdGVjaGFuZ2UiLG8pLGhbd10oIm9ubG9hZCIscikpLHMoIm1hcmsiLFsiZmlyc3RieXRlIixhLmdldExhc3RUaW1lc3RhbXAoKV0sbnVsbCwiYXBpIik7dmFyIFQ9MH19LHt9XSwid3JhcC1mdW5jdGlvbiI6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSl7ZnVuY3Rpb24gbihlLG4scixjLGYpe2Z1bmN0aW9uIG5yV3JhcHBlcigpe3ZhciBpLGEsdSxwO3RyeXthPXRoaXMsaT1kKGFyZ3VtZW50cyksdT0iZnVuY3Rpb24iPT10eXBlb2Ygcj9yKGksYSk6cnx8e319Y2F0Y2gobCl7byhbbCwiIixbaSxhLGNdLHVdLHQpfXMobisic3RhcnQiLFtpLGEsY10sdSxmKTt0cnl7cmV0dXJuIHA9ZS5hcHBseShhLGkpfWNhdGNoKGgpe3Rocm93IHMobisiZXJyIixbaSxhLGhdLHUsZiksaH1maW5hbGx5e3MobisiZW5kIixbaSxhLHBdLHUsZil9fXJldHVybiBhKGUpP2U6KG58fChuPSIiKSxucldyYXBwZXJbcF09ZSxpKGUsbnJXcmFwcGVyLHQpLG5yV3JhcHBlcil9ZnVuY3Rpb24gcih0LGUscixvLGkpe3J8fChyPSIiKTt2YXIgcyxjLGYsdT0iLSI9PT1yLmNoYXJBdCgwKTtmb3IoZj0wO2Y8ZS5sZW5ndGg7ZisrKWM9ZVtmXSxzPXRbY10sYShzKXx8KHRbY109bihzLHU/YytyOnIsbyxjLGkpKX1mdW5jdGlvbiBzKG4scixpLGEpe2lmKCFofHxlKXt2YXIgcz1oO2g9ITA7dHJ5e3QuZW1pdChuLHIsaSxlLGEpfWNhdGNoKGMpe28oW2MsbixyLGldLHQpfWg9c319cmV0dXJuIHR8fCh0PXUpLG4uaW5QbGFjZT1yLG4uZmxhZz1wLG59ZnVuY3Rpb24gbyh0LGUpe2V8fChlPXUpO3RyeXtlLmVtaXQoImludGVybmFsLWVycm9yIix0KX1jYXRjaChuKXt9fWZ1bmN0aW9uIGkodCxlLG4pe2lmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmtleXMpdHJ5e3ZhciByPU9iamVjdC5rZXlzKHQpO3JldHVybiByLmZvckVhY2goZnVuY3Rpb24obil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbbl19LHNldDpmdW5jdGlvbihlKXtyZXR1cm4gdFtuXT1lLGV9fSl9KSxlfWNhdGNoKGkpe28oW2ldLG4pfWZvcih2YXIgYSBpbiB0KWwuY2FsbCh0LGEpJiYoZVthXT10W2FdKTtyZXR1cm4gZX1mdW5jdGlvbiBhKHQpe3JldHVybiEodCYmdCBpbnN0YW5jZW9mIEZ1bmN0aW9uJiZ0LmFwcGx5JiYhdFtwXSl9ZnVuY3Rpb24gcyh0LGUpe3ZhciBuPWUodCk7cmV0dXJuIG5bcF09dCxpKHQsbix1KSxufWZ1bmN0aW9uIGModCxlLG4pe3ZhciByPXRbZV07dFtlXT1zKHIsbil9ZnVuY3Rpb24gZigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KHQpLG49MDtuPHQ7KytuKWVbbl09YXJndW1lbnRzW25dO3JldHVybiBlfXZhciB1PXQoImVlIiksZD10KDMyKSxwPSJuckBvcmlnaW5hbCIsbD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGg9ITE7ZS5leHBvcnRzPXIsZS5leHBvcnRzLndyYXBGdW5jdGlvbj1zLGUuZXhwb3J0cy53cmFwSW5QbGFjZT1jLGUuZXhwb3J0cy5hcmdzVG9BcnJheT1mfSx7fV19LHt9LFsibG9hZGVyIiwyLDE3LDUsMyw0XSk7PC9zY3JpcHQ+PHNjcmlwdD4KCQkJZnVuY3Rpb24gRGVmZXJKUyhzcmMpIHsKCQkJZnVuY3Rpb24gZG93bmxvYWRKU0F0T25sb2FkKCkgewoJCQl2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwoJCQllbGVtZW50LnNyYyA9IHNyYzsKCQkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTsKCQkJfQoJCQlpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpCgkJCXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgZG93bmxvYWRKU0F0T25sb2FkLCBmYWxzZSk7CgkJCWVsc2UgaWYgKHdpbmRvdy5hdHRhY2hFdmVudCkKCQkJd2luZG93LmF0dGFjaEV2ZW50KCJvbmxvYWQiLCBkb3dubG9hZEpTQXRPbmxvYWQpOwoJCQllbHNlIHdpbmRvdy5vbmxvYWQgPSBkb3dubG9hZEpTQXRPbmxvYWQ7CgkJCX0KCQk8L3NjcmlwdD4KCQk8c2NyaXB0PgoJCQkJRGVmZXJKUygiaHR0cHM6Ly9kMWJ4aDh1YXMxbW53Ny5jbG91ZGZyb250Lm5ldC9hc3NldHMvZW1iZWQuanMiKTsKCQkJPC9zY3JpcHQ+CgkJPHNjcmlwdD4KCQkJCURlZmVySlMoImh0dHBzOi8vZDFieGg4dWFzMW1udzcuY2xvdWRmcm9udC5uZXQvYXNzZXRzL2VtYmVkLmpzIik7CgkJCTwvc2NyaXB0PgoJCTxzY3JpcHQ+CgkJCQlEZWZlckpTKCJodHRwczovL2JhZGdlLmRpbWVuc2lvbnMuYWkvYmFkZ2UuanMiKTsKCQkJPC9zY3JpcHQ+CgkJPHNjcmlwdD4KCQkJCURlZmVySlMoImh0dHBzOi8vYmFkZ2UuZGltZW5zaW9ucy5haS9iYWRnZS5qcyIpOwoJCQk8L3NjcmlwdD4KCQk8c2NyaXB0PgoJCQkJRGVmZXJKUygiaHR0cHM6Ly9iYWRnZS5kaW1lbnNpb25zLmFpL2JhZGdlLmpzIik7CgkJCTwvc2NyaXB0PgoJCTxzY3JpcHQ+CgkJCXZhciBfdXJjb25maWcgPSB7IHNpZDogImRlZmMzYTdkLTRiMzQtNGI2Zi1hZDFjLTA3MTZlMGEwNWE2NSIsIGFpcDogMCwgdXNlUGFnZVByb3RvY29sOiBmYWxzZSB9OwoJCQkoZnVuY3Rpb24gKGQsIHMpCgkJCQoJCQl7IHZhciBqcyA9IGQuY3JlYXRlRWxlbWVudChzKSwgc2MgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdOyBqcy5zcmMgPSAiaHR0cHM6Ly9oaXQudXB0cmVuZHNkYXRhLmNvbS9ydW0ubWluLmpzIjsganMuYXN5bmMgPSAiYXN5bmMiOyBzYy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqcywgc2MpOyB9CgkJCShkb2N1bWVudCwgInNjcmlwdCIpKTsKCQk8L3NjcmlwdD4KCQk8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CgkJPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KCQk8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9Im5vYXJjaGl2ZSI+CgkJPHRpdGxlPk1ldHJvbG9naWEgLSBJT1BzY2llbmNlPC90aXRsZT4KCQkJPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtaW5pbXVtLXNjYWxlPTEuMCI+CgkJPCEtLSBOb3RlIEdyaWRzZXQgcmVmIDM1MDg5IC0tPgo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vc3RhdGljLmlvcHNjaWVuY2UuY29tLzIuOTIuMC9jc3MvY3JpdGljYWwtc3R5bGVzLm1pbi5jc3MiIHR5cGU9InRleHQvY3NzIiAvPgo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vc3RhdGljLmlvcHNjaWVuY2UuY29tLzIuOTIuMC9jc3MvbWFpbi1zdHlsZXMubWluLmNzcyIgbWVkaWE9InByaW50IiBvbmxvYWQ9InRoaXMubWVkaWE9J2FsbCciPgoKPCEtLVtpZiBsdGUgSUUgMTBdPgo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vc3RhdGljLmlvcHNjaWVuY2UuY29tLzIuOTIuMC9jc3MvZ3JpZHNldC1pZS1sdGU4LmNzcyIgdHlwZT0idGV4dC9jc3MiIC8+CjwhW2VuZGlmXS0tPgo8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgIChmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKAogICAgICAgIHsnZ3RtLnN0YXJ0JzogbmV3IERhdGUoKS5nZXRUaW1lKCksZXZlbnQ6J2d0bS5qcyd9CiAgICAgICAgKTt2YXIgZj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLAogICAgICAgIGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQogICAgICAgICdodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JytpK2RsO2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaixmKTsKICAgICAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJ2RhdGFMYXllcicsJ0dUTS1NNzNaNFcnKTsKICAgIDwvc2NyaXB0Pgo8IS0tIEVuZCBHb29nbGUgVGFnIE1hbmFnZXIgLS0+PHNjcmlwdD4KCQkvKiAgQ3V0dGluZyB0aGUgbXVzdGFyZCAtIGh0dHA6Ly9yZXNwb25zaXZlbmV3cy5jby51ay9wb3N0LzE4OTQ4NDY2Mzk5L2N1dHRpbmctdGhlLW11c3RhcmQgKi8KCQkKCQkvKiBCZWxvdyBpcyB0aGUgb3JpZ2luYWwgaWYgc3RhdGVtZW50LCBmcm9tIHRoZSBsaW5rIGFib3ZlLiBJIGhhdmUgYW1lbmRlZCBpdCB0byB0dXJuIG9mIEpTIG9uIGFsbCBJRSBicm93c2VycyBsZXNzIHRoYW4gMTAuCgkJVGhpcyBpcyBkdWUgdG8gYSBmdW5jdGlvbiBpbiB0aGUgaW9wLmpxdWVyeS50b29sYmFyIGxpbmUgMzUvMzYuIFVzZXMgLnJlbW92ZSB3aGljaCBpcyBub3QgbmF0aXZlIGpzIHN1cHBvcnRlZCBpbiBJRTkgb3IgbG93ZXIgKi8KCQkvKmlmKCdxdWVyeVNlbGVjdG9yJyBpbiBkb2N1bWVudAoJCSYmICdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdwoJCSYmICdhZGRFdmVudExpc3RlbmVyJyBpbiB3aW5kb3cpKi8KCQkKCQkvKiBUaGlzIGlzIHRoZSB1cGRhdGVkIHNlbGVjdG9yLCB0YWtlbiBmcm9tOiBodHRwczovL2p1c3RtYXJrdXAuY29tL2xvZy8yMDE1LzAyLzI2L2N1dC10aGUtbXVzdGFyZC1yZXZpc2l0ZWQvICovCgkJaWYoJ3Zpc2liaWxpdHlTdGF0ZScgaW4gZG9jdW1lbnQpIHsKCQkKCQkvKiEgbG9hZEpTOiBsb2FkIGEgSlMuIFdlIGFyZSBsb2FkaW5nIHRoaXMgY29tbWFuZCBzdHJhaWdodCBhd2F5LCBiZWZvcmUgdGhlIGJvZHkgbG9hZHMsIHNvIHRoYXQgSUYgYSB1c2VyIGhhcyBKUyBlbmFibGVkLCB0aGVpciBzaG93IGhpZGUgcGFuZWxzIHdpbGwgYXV0b21hdGljYWxseSBiZSBjbG9zZWQuICovCgkJLyogSWYgdGhpcyBpc24ndCBoZXJlLCB0aGVuIHRoZXNlIHBhbmVscyBhcHBlYXIgb3BlbiB3aGlsZSB0aGUgcGFnZSBpcyBsb2FkaW5nLCB0aGVuIHdoZW4gdGhlIGpzIGxvYWRzIGF0IHRoZSBib3R0b20gb2YgdGhlIHBhZ2UsIHRoZXkgYXJlIHNodXQuIFNvIHRoZSB1c2VycyBzZWVzIG9wZW4gY29udGVudCwgdGhlbiBoaWRkZW4gYWZ0ZXIgYSBzZWNvbmQgb3IgMiB3aGVuIHRoZSBqcyBpcyBsb2FkZWQuIE5vdCBuaWNlICovCgkJZG9jdW1lbnQud3JpdGUoIjxzdHlsZT4ucmV2ZWFsLWNvbnRlbnR7ZGlzcGxheTpub25lO30uc2VhcmNoLXJlcy1maWx0ZXIgLnJldmVhbC1jb250ZW50e2Rpc3BsYXk6YmxvY2s7fTwvc3R5bGU+Iik7CgkJfQoJCTwvc2NyaXB0PgoJCTxzY3JpcHQ+dmFyIF9fdXpkYm1fMSA9ICI1ZmUwZGE1OC03NTQwLTQ1YWItYTQ5ZS01MzE5YTFlNzNkNWIiO3ZhciBfX3V6ZGJtXzIgPSAiTkRZNVptTTRaVEF0T0RReU55MDBZalEwTFRsaU5tSXRaR0ZqTWpJek5EUTVZMkZsSkRFM01pNDNNaTR4TXprdU1UQTAiOzwvc2NyaXB0PiA8c2NyaXB0PihmdW5jdGlvbih3LCBkLCBlLCB1LCBjLCBnLCBhLCBiKXsgd1siU1NKU0Nvbm5lY3Rvck9iaiJdID0ge3NzX2NpZCA6IGMsIGRvbWFpbl9pbmZvOiAiYXV0byJ9OyBhID0gZC5jcmVhdGVFbGVtZW50KGUpOyBhLmFzeW5jID0gdHJ1ZTsgYS5zcmMgPSB1OyBiID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKVswXTsgYi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBiKTsgfSkod2luZG93LGRvY3VtZW50LCJzY3JpcHQiLCJodHRwczovL2Nkbi5wZXJmZHJpdmUuY29tL2FwZXJ0dXJlL2FwZXJ0dXJlLmpzIiwiYTFjMyIsInNzQ29uZiIpOzwvc2NyaXB0PjwvaGVhZD4KCTxib2R5IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvT3JnYW5pemF0aW9uIiBjbGFzcz0iaXNzbi0wMDI2LTEzOTQiPgogICAgPGEgaWQ9ImJhY2stdG8tdG9wLXRhcmdldCIgdGFiaW5kZXg9Ii0xIj48L2E+CiAgICA8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPgo8bm9zY3JpcHQ+PGlmcmFtZSBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLU03M1o0VyIKICAgIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPjwvaWZyYW1lPjwvbm9zY3JpcHQ+CjwhLS0gRW5kIEdvb2dsZSBUYWcgTWFuYWdlciAobm9zY3JpcHQpIC0tPjxkaXYgY2xhc3M9ImNvb2tpZXMtYmFubmVyLXdyYXAiIGlkPSJjb29raWVCYW5uZXIiPgogICAgPGRpdiBjbGFzcz0iY29va2llcy1iYW5uZXIgY2YiPgogICAgICAgIFRoaXMgc2l0ZSB1c2VzIGNvb2tpZXMuIEJ5IGNvbnRpbnVpbmcgdG8gdXNlIHRoaXMgc2l0ZSB5b3UgYWdyZWUgdG8gb3VyIHVzZSBvZiBjb29raWVzLiBUbyBmaW5kIG91dCBtb3JlLCBzZWUgb3VyCiAgICAgICAgPGEgaHJlZj0iaHR0cDovL2lvcHB1Ymxpc2hpbmcub3JnL3ByaXZhY3lQb2xpY3kiPlByaXZhY3kgYW5kIENvb2tpZXM8L2E+IHBvbGljeS4KICAgICAgICA8c3BhbiByb2xlPSJidXR0b24iIHRhYmluZGV4PSIwIiBjbGFzcz0iZmEtaWNvbiBjb29raWVzLWJhbm5lci1jbG9zZSI+PHN2ZyBhcmlhLWhpZGRlbj0idHJ1ZSIgZm9jdXNhYmxlPSJmYWxzZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgNTEyIDUxMiI+PHBhdGggZD0iTTI1NiA4QzExOSA4IDggMTE5IDggMjU2czExMSAyNDggMjQ4IDI0OCAyNDgtMTExIDI0OC0yNDhTMzkzIDggMjU2IDh6bTEyMS42IDMxMy4xYzQuNyA0LjcgNC43IDEyLjMgMCAxN0wzMzggMzc3LjZjLTQuNyA0LjctMTIuMyA0LjctMTcgMEwyNTYgMzEybC02NS4xIDY1LjZjLTQuNyA0LjctMTIuMyA0LjctMTcgMEwxMzQuNCAzMzhjLTQuNy00LjctNC43LTEyLjMgMC0xN2w2NS42LTY1LTY1LjYtNjUuMWMtNC43LTQuNy00LjctMTIuMyAwLTE3bDM5LjYtMzkuNmM0LjctNC43IDEyLjMtNC43IDE3IDBsNjUgNjUuNyA2NS4xLTY1LjZjNC43LTQuNyAxMi4zLTQuNyAxNyAwbDM5LjYgMzkuNmM0LjcgNC43IDQuNyAxMi4zIDAgMTdMMzEyIDI1Nmw2NS42IDY1LjF6Ij48L3BhdGg+PC9zdmc+PHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPkNsb3NlIHRoaXMgbm90aWZpY2F0aW9uPC9zcGFuPjwvc3Bhbj4KICAgIDwvZGl2Pgo8L2Rpdj48IS0tIFN0YXJ0IFByb2R1Y3Rpb24gdG9vbGJhciAtLT4KPCEtLSBFbmQgUHJvZHVjdGlvbiB0b29sYmFyIC0tPjwhLS0gU3RhcnQgRG93bnRpbWUgQmFubmVyIC0tPgo8IS0tIEVuZCBEb3dudGltZSBCYW5uZXIgLS0+PCEtLSBIZWFkZXIgdGlsZSBzdGFydHMgLS0+CjxoZWFkZXIgcm9sZT0iYmFubmVyIiBkYXRhLW5hdi1ncm91cD4KCTxkaXYgY2xhc3M9ImFjY2Vzc2liaWxpdHkiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+CgkgICAgPHA+PHN0cm9uZz5BY2Nlc3NpYmlsaXR5IExpbmtzPC9zdHJvbmc+PC9wPgoJICAgIDx1bD4KCSAgICAgICAgPGxpPjxhIGhyZWY9IiNwYWdlLWNvbnRlbnQiPlNraXAgdG8gY29udGVudDwvYT48L2xpPgoJICAgICAgICA8bGk+PGEgaHJlZj0iL3NlYXJjaCNjb250ZW50Q29sIj5Ta2lwIHRvIHNlYXJjaCBJT1BzY2llbmNlPC9hPjwvbGk+CgkgICAgICAgIDxsaT48YSBocmVmPSIvam91cm5hbHMjY29udGVudENvbCI+U2tpcCB0byBKb3VybmFscyBsaXN0PC9hPjwvbGk+CgkgICAgICAgIDxsaT48YSBocmVmPSIvcGFnZS9hY2Nlc3NpYmlsaXR5I2NvbnRlbnRDb2wiPkFjY2Vzc2liaWxpdHkgaGVscDwvYT48L2xpPgoJICAgIDwvdWw+Cgk8L2Rpdj4KICAgIDxkaXYgY2xhc3M9IndyYXBwZXIgZGdoLXNob3dncmlkIHRnaC1zaG93Z3JpZCBjZiIgbmFtZT0iY29udGVudENvbCI+CgogICAgICAgIDxkaXYgaWQ9Im1vYmlsZS1oZWFkZXIiIGNsYXNzPSJ0YS1oaWRlIGRhLWhpZGUgd2QtbW9iaWxlLW5hdiI+CiAgICAgICAgICAgIDxhIHRpdGxlPSJNZW51IiBocmVmPSIjc2lkci1tYWluIiBpZD0ic2ltcGxlLW1lbnUiIGNsYXNzPSJpY29uLW1lbnUiPjwvYT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGEgaHJlZj0iLyIgaXRlbXByb3A9InVybCIgY2xhc3M9ImhlYWRlci1sb2dvIHdkLWhlYWRlci1ncmFwaGljIj4KICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9Im5hbWUiIGNvbnRlbnQ9IklPUHNjaWVuY2UiPgogICAgICAgICAgICA8c3ZnIGhlaWdodD0iMTUiIHdpZHRoPSIxMDAiPgogICAgICAgICAgICAgICAgPGltYWdlIHhsaW5rOmhyZWY9Imh0dHBzOi8vc3RhdGljLmlvcHNjaWVuY2UuY29tLzIuOTIuMC9pbWcvaW9wcy1sb2dvLnN2ZyIgc3JjPSJodHRwczovL3N0YXRpYy5pb3BzY2llbmNlLmNvbS8yLjkyLjAvaW1nL2lvcHMtbG9nby5wbmciIGhlaWdodD0iMTUiIHdpZHRoPSIxMDAiIGJvcmRlcj0iMCIgaXRlbXByb3A9ImxvZ28iIC8+CiAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+SU9QIFNjaWVuY2UgaG9tZTwvc3Bhbj4KICAgICAgICA8L2E+CgogICAgICAgIDxzZWN0aW9uIHJvbGU9InJlZ2lvbiIgYXJpYS1sYWJlbD0iQWNjZXNzaWJpbGl0eSBsaW5rcyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY2Vzc2liaWxpdHktc2tpcC1saW5rcyI+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBocmVmPSIjc2tpcC10by1jb250ZW50LWxpbmstdGFyZ2V0Ij5Ta2lwIHRvIGNvbnRlbnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIGlkPSJhY2Nlc3NpYmlsaXR5LWhlbHAiIGhyZWY9Ii9wYWdlL2FjY2Vzc2liaWxpdHkjc2tpcC10by1jb250ZW50LWxpbmstdGFyZ2V0Ij5BY2Nlc3NpYmlsaXR5IEhlbHA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvc2VjdGlvbj4KCiAgICAgICAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIiBpZD0ic2lkciIgY2xhc3M9Im0taGlkZSB3ZC1tYWluLW5hdiIgYXJpYS1sYWJlbD0iU2l0ZSI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im5hdi10b3AtbGluay1kcm9wLWRvd24gbmF2LWl0ZW0gbmF2LXNlYXJjaCIgZGF0YS1uYXYtdHJpZ2dlcj0iYXJ0aWNsZWxvb2t1cCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9Im5hdi1kcm9wZG93bi1hcnRpY2xlbG9va3VwIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3N0YXRpYy5pb3BzY2llbmNlLmNvbS8yLjkyLjAvaW1nL2ljb24tc2VhcmNoLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlNlYXJjaDwvc3Bhbj4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdi1qb3VybmFscyBuYXYtaXRlbSB3ZC1uYXYtam91cm5hbCI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LXRvcC1saW5rLWRyb3AtZG93biIgaHJlZj0iL2pvdXJuYWxzIiBkYXRhLW5hdi10cmlnZ2VyPSJqb3VybmFscyI+Sm91cm5hbHM8c3BhbiBjbGFzcz0iaWNvbi1hcnJvdy1kb3duIj48L3NwYW4+PC9hPgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdi1kcm9wLWRvd24gd2QtbmF2LWpvdXJuYWwtZGQiIGRhdGEtbmF2LWl0ZW09ImpvdXJuYWxzIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvam91cm5hbHMiPgogICAgICAgICAgICAgICAgICAgICAgICBKb3VybmFscyBsaXN0CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im0taGlkZSI+QnJvd3NlIG1vcmUgdGhhbiAxMDAgc2NpZW5jZSBqb3VybmFsIHRpdGxlczwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3BhZ2Uvc3ViamVjdHMiPgogICAgICAgICAgICAgICAgICAgICAgICBTdWJqZWN0IGNvbGxlY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im0taGlkZSI+UmVhZCB0aGUgdmVyeSBiZXN0IHJlc2VhcmNoIHB1Ymxpc2hlZCBpbiBJT1Agam91cm5hbHM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9qb3VybmFscz90eXBlPXBhcnRuZXIjanMtdGFiLXB1YnBhcnQiPgogICAgICAgICAgICAgICAgICAgICAgICBQdWJsaXNoaW5nIHBhcnRuZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im0taGlkZSI+UGFydG5lciBvcmdhbmlzYXRpb25zIGFuZCBwdWJsaWNhdGlvbnM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9pbmZvL3BhZ2Uvb3BlbmFjY2VzcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIE9wZW4gYWNjZXNzCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im0taGlkZSI+SU9QIFB1Ymxpc2hpbmcgb3BlbiBhY2Nlc3MgcG9saWN5IGd1aWRlPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvY29uZmVyZW5jZS1zZXJpZXMiPgogICAgICAgICAgICAgICAgICAgICAgICBJT1AgQ29uZmVyZW5jZSBTZXJpZXMKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibS1oaWRlIj5SZWFkIG9wZW4gYWNjZXNzIHByb2NlZWRpbmdzIGZyb20gc2NpZW5jZSBjb25mZXJlbmNlcyB3b3JsZHdpZGU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtYm9va3MgbmF2LWl0ZW0gd2QtbmF2LWJvb2tzIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9ib29rcyIgY2xhc3M9Im5hdi10b3AtbGluayI+Qm9va3M8L2E+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2LXB1Ymxpc2hpbmctc3VwcG9ydCBuYXYtaXRlbSB3ZC1wdWJsaXNoaW5nLXN1cHBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHVibGlzaGluZ3N1cHBvcnQuaW9wc2NpZW5jZS5pb3Aub3JnIiBjbGFzcz0ibmF2LXRvcC1saW5rIj5QdWJsaXNoaW5nIFN1cHBvcnQ8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSBIZWFkZXIgTG9naW4gdGlsZSBzdGFydHMgaGVyZSAtLT4KICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtbG9naW4gbmF2LWl0ZW0gd2QtbmF2LWxvZ2luIj4KPGEgY2xhc3M9Im5hdi10b3AtbGluay1kcm9wLWRvd24iIGlkPSJsb2dpbi1kcm9wLWRvd24tdXNlciIgaHJlZj0iaHR0cHM6Ly9teWlvcHNjaWVuY2UuaW9wLm9yZy9zaWduaW4/b3JpZ2luPWEwJnJldHVybj1odHRwcyUzQSUyRiUyRmlvcHNjaWVuY2UuaW9wLm9yZyUyRmpvdXJuYWwlMkYwMDI2LTEzOTQiIGRhdGEtbmF2LXRyaWdnZXI9ImxvZ2luIj48c3BhbiBjbGFzcz0ibmF2LXRvcC11c2VybmFtZSI+PHNwYW4gY2xhc3M9ImZhLWljb24iPjxzdmcgYXJpYS1oaWRkZW49InRydWUiIGZvY3VzYWJsZT0iZmFsc2UiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDQ5NiA1MTIiPjxwYXRoIGQ9Ik0yNDggOEMxMTEgOCAwIDExOSAwIDI1NnMxMTEgMjQ4IDI0OCAyNDggMjQ4LTExMSAyNDgtMjQ4UzM4NSA4IDI0OCA4em0wIDk2YzQ4LjYgMCA4OCAzOS40IDg4IDg4cy0zOS40IDg4LTg4IDg4LTg4LTM5LjQtODgtODggMzkuNC04OCA4OC04OHptMCAzNDRjLTU4LjcgMC0xMTEuMy0yNi42LTE0Ni41LTY4LjIgMTguOC0zNS40IDU1LjYtNTkuOCA5OC41LTU5LjggMi40IDAgNC44LjQgNy4xIDEuMSAxMyA0LjIgMjYuNiA2LjkgNDAuOSA2LjkgMTQuMyAwIDI4LTIuNyA0MC45LTYuOSAyLjMtLjcgNC43LTEuMSA3LjEtMS4xIDQyLjkgMCA3OS43IDI0LjQgOTguNSA1OS44QzM1OS4zIDQyMS40IDMwNi43IDQ0OCAyNDggNDQ4eiI+PC9wYXRoPjwvc3ZnPjwvc3Bhbj5Mb2dpbjwvc3Bhbj48c3BhbiBjbGFzcz0iaWNvbi1hcnJvdy1kb3duIj48L3NwYW4+PC9hPgogICAgICAgIDxkaXYgY2xhc3M9Im5hdi1kcm9wLWRvd24gd2QtbmF2LWxvZ2luLWRkIiBkYXRhLW5hdi1pdGVtPSJsb2dpbiI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbXlpb3BzY2llbmNlLmlvcC5vcmcvc2lnbmluP29yaWdpbj1hMCZyZXR1cm49aHR0cHMlM0ElMkYlMkZpb3BzY2llbmNlLmlvcC5vcmclMkZqb3VybmFsJTJGMDAyNi0xMzk0IiBpZD0id2QtbG9naW4tbGluayI+SU9Qc2NpZW5jZSBsb2dpbiAvIFNpZ24gVXA8L2E+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj48IS0tIEhlYWRlciBMb2dpbiB0aWxlIGVuZHMgaGVyZSAtLT4KICAgICAgICAgICAgPC9uYXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJhcnQtbG9va3VwLXBhbmVsIG0taGlkZSBuYXYtZHJvcC1kb3duIiBkYXRhLW5hdi1pdGVtPSJhcnRpY2xlbG9va3VwIj4KICAgIDxkaXYgY2xhc3M9IndyYXBwZXIgd3JhcHBlci0tc2VhcmNoIGNmIj4KICAgICAgICA8YSB0aXRsZT0iQ2xvc2UiIGNsYXNzPSJjbG9zZS1pY29uIGFydC1sb29rdXBfX2Nsb3NlIiB0YWJpbmRleD0iMCIgcm9sZT0iYnV0dG9uIiBhcmlhLWRlc2NyaWJlZGJ5PSJjbG9zZS1zZWFyY2gtZGVzY3JpcHRpb24iPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1jbG9zZSI+PC9zcGFuPgogICAgICAgIDwvYT4KICAgICAgICA8cCBpZD0iY2xvc2Utc2VhcmNoLWRlc2NyaXB0aW9uIiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+Q2xpY2sgaGVyZSB0byBjbG9zZSB0aGlzIHBhbmVsLjwvcD4KCiAgICAgICAgPGRpdiBpZD0ic2VhcmNoIiBjbGFzcz0id2QtaGVhZGVyLXNlYXJjaCBhcnQtbG9va3VwX19zZWFyY2giPgogICAgPGZvcm0gYWNjZXB0LWNoYXJzZXQ9InV0Zi04LGlzby04ODU5LTEiIGNsYXNzPSJwcmltYXJ5LXNlYXJjaCIgbWV0aG9kPSJnZXQiIGFjdGlvbj0iL25zZWFyY2giIHJvbGU9InNlYXJjaCI+CiAgICAgICAgPGZpZWxkc2V0IGFyaWEtbGFiZWxsZWRieT0ic2VhcmNoLWxlZ2VuZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydC1sb29rdXBfX2ZpZWxkcy13cmFwcGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNlYXJjaC1sZWdlbmQiIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5QcmltYXJ5IHNlYXJjaDwvZGl2PgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icXVpY2tTZWFyY2giPlNlYXJjaCBhbGwgSU9Qc2NpZW5jZSBjb250ZW50PC9sYWJlbD4KCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiB4LXdlYmtpdC1zcGVlY2g9IiIgbmFtZT0idGVybXMiIGlkPSJxdWlja1NlYXJjaCIgY2xhc3M9ImFydC1sb29rdXBfX2ZpZWxkLS1ncm93IgogICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlYXJjaCBhbGwgSU9Qc2NpZW5jZSBjb250ZW50IiB2YWx1ZT0iIi8+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIHgtd2Via2l0LXNwZWVjaD0iIiB2YWx1ZT0iU2VhcmNoIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGhkci1zZWFyY2gtYnRuIGJkLTAgYXJ0LWxvb2t1cF9fc3VibWl0Ij4KCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZmllbGRzZXQ+CiAgICA8L2Zvcm0+CjwvZGl2Pgo8ZGl2IGlkPSJ3ZC1jb250ZW50LWZpbmRlciIgY2xhc3M9ImFydC1sb29rdXBfX2NvbnRlbnQtZmluZGVyIj4KICAgICAgICAgICAgPGZvcm0gYWNjZXB0LWNoYXJzZXQ9InV0Zi04LGlzby04ODU5LTEiIG1ldGhvZD0iZ2V0IiBhY3Rpb249Ii9maW5kY29udGVudCIgbmFtZT0iY29udGVudEZpbmRlckZvcm0iCiAgICAgIGlkPSJ3ZC1maW5kLWFydC1mb3JtIiBjbGFzcz0iY2YgZmluZC1hcnRpY2xlLWlzc3VlLWRpc3BsYXkiIGF1dG9jb21wbGV0ZT0iT0ZGIj4KICAgIDxmaWVsZHNldCBhcmlhLWxhYmVsbGVkYnk9ImNvbnRlbnQtZmluZGVyLWxlZ2VuZCI+CiAgICAgICAgPGRpdiBpZD0iY29udGVudC1maW5kZXItbGVnZW5kIiBjbGFzcz0iZXllYnJvdyBleWVicm93LS1ibHVlIj5BcnRpY2xlIExvb2t1cDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImFydC1sb29rdXBfX2ZpZWxkcy13cmFwcGVyIj4KCiAgICAgICAgICAgIDxsYWJlbCBmb3I9IkNGX0pPVVJOQUwiIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5TZWxlY3Qgam91cm5hbCAocmVxdWlyZWQpPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJDRl9KT1VSTkFMIgogICAgICAgIGlkPSJDRl9KT1VSTkFMImNsYXNzPSJmaW5kLWFydGljbGUtc2VsZWN0IGFydC1sb29rdXBfX2NvbnRlbnQtZmluZGVyLWZpZWxkIGFydC1sb29rdXBfX2ZpZWxkLS1ncm93IGFydC1sb29rdXBfX2NvbnRlbnQtZmluZGVyLWZpZWxkLS1maXJzdCIgPgogICAgPG9wdGlvbiB2YWx1ZT0ibm9uZSIgIGhpZGRlbiBkaXNhYmxlZD5TZWxlY3Qgam91cm5hbCAocmVxdWlyZWQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjIwNTMtMTU4MyIgICA+MkQgTWF0ZXIuICgyMDE0IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTAwNC00MjNYIiAgID5BY3RhIFBoeXMuIFNpbi4gKE92ZXJzZWFzIEVkbikgKDE5OTIgLSAxOTk5KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyMDQzLTYyNjIiICAgPkFkdi4gTmF0LiBTY2k6IE5hbm9zY2kuIE5hbm90ZWNobm9sLiAoMjAxMCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE4ODItMDc4NiIgICA+QXBwbC4gUGh5cy4gRXhwcmVzcyAoMjAwOCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE3NTgtNTA5MCIgICA+QmlvZmFicmljYXRpb24gKDIwMDkgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNzQ4LTMxOTAiICAgPkJpb2luc3Bpci4gQmlvbWltLiAoMjAwNiAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE3NDgtNjA1WCIgICA+QmlvbWVkLiBNYXRlci4gKDIwMDYgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyMDU3LTE5NzYiICAgPkJpb21lZC4gUGh5cy4gRW5nLiBFeHByZXNzICgyMDE1IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDUwOC0zNDQzIiAgID5Cci4gSi4gQXBwbC4gUGh5cy4gKDE5NTAgLSAxOTY3KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxMDA5LTkyNzEiICAgPkNoaW4uIEouIEFzdHJvbi4gQXN0cm9waHlzLiAoMjAwMSAtIDIwMDgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjEwMDMtNzcxMyIgICA+Q2hpbi4gSi4gQ2hlbS4gUGh5cy4gKDE5ODcgLSAyMDA3KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNjc0LTAwNjgiICAgPkNoaW4uIEouIENoZW0uIFBoeXMuICgyMDA4IC0gMjAxMik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTAwOS0xOTYzIiAgID5DaGluZXNlIFBoeXMuICgyMDAwIC0gMjAwNyk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTY3NC0xMDU2IiAgID5DaGluZXNlIFBoeXMuIEIgKDIwMDggLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNjc0LTExMzciICAgPkNoaW5lc2UgUGh5cy4gQyAoMjAwOCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAyNTYtMzA3WCIgICA+Q2hpbmVzZSBQaHlzLiBMZXR0LiAoMTk4NCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAyNjQtOTM4MSIgICA+Q2xhc3MuIFF1YW50dW0gR3Jhdi4gKDE5ODQgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwMTQzLTA4MTUiICAgPkNsaW4uIFBoeXMuIFBoeXNpb2wuIE1lYXMuICgxOTgwIC0gMTk5Mik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTM2NC03ODMwIiAgID5Db21idXN0LiBUaGVvcnkgTW9kZWxsaW5nICgxOTk3IC0gMjAwNCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDI1My02MTAyIiAgID5Db21tdW4uIFRoZW9yLiBQaHlzLiAoMTk4MiAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE3NDktNDY5OSIgICA+Q29tcHV0LiBTY2kuIERpc2MuICgyMDA4IC0gMjAxNSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjA1Ny0xNzM5IiAgID5Db252ZXJnLiBTY2kuIFBoeXMuIE9uY29sLiAoMjAxNSAtIDIwMTgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjA5NjctMTg0NiIgICA+RGlzdHJpYi4gU3lzdC4gRW5nbmcuICgxOTkzIC0gMTk5OSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjc1NC0yNzM0IiAgID5FQ1MgQWR2LiAoMjAyMiAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjIxNjItODczNCIgICA+RUNTIEVsZWN0cm9jaGVtLiBMZXR0LiAoMjAxMiAtIDIwMTUpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjIxNjItODc3NyIgICA+RUNTIEouIFNvbGlkIFN0YXRlIFNjaS4gVGVjaG5vbC4gKDIwMTIgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNzU0LTI3MjYiICAgPkVDUyBTZW5zLiBQbHVzICgyMDIyIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjE2Mi04NzUwIiAgID5FQ1MgU29saWQgU3RhdGUgTGV0dC4gKDIwMTIgLSAyMDE1KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxOTM4LTU4NjIiICAgPkVDUyBUcmFucy4gKDIwMDUgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwMjk1LTUwNzUiICAgPkVQTCAoMTk4NiAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE5NDQtODc4MyIgICA+RWxlY3Ryb2NoZW0uIFNvYy4gSW50ZXJmYWNlICgxOTkyIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTk0NC04Nzc1IiAgID5FbGVjdHJvY2hlbS4gU29saWQtU3RhdGUgTGV0dC4gKDE5OTggLSAyMDEyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNTE2LTEwNzUiICAgPkVsZWN0cm9uLiBTdHJ1Y3QuICgyMDE5IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjYzMS04Njk1IiAgID5FbmcuIFJlcy4gRXhwcmVzcyAoMjAxOSAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjI1MTUtNzYyMCIgICA+RW52aXJvbi4gUmVzLiBDb21tdW4uICgyMDE4IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTc0OC05MzI2IiAgID5FbnZpcm9uLiBSZXMuIExldHQuICgyMDA2IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjc1Mi01Mjk1IiAgID5FbnZpcm9uLiBSZXMuOiBDbGltYXRlICgyMDIyIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjc1Mi02NjRYIiAgID5FbnZpcm9uLiBSZXMuOiBFY29sLiAoMjAyMiAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjI3NTItNTMwOSIgICA+RW52aXJvbi4gUmVzLjogSGVhbHRoICgyMDIyIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjYzNC00NTA1IiAgID5FbnZpcm9uLiBSZXMuOiBJbmZyYXN0cnVjdC4gU3VzdGFpbi4gKDIwMjEgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwMTQzLTA4MDciICAgPkV1ci4gSi4gUGh5cy4gKDE5ODAgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyMDU4LTg1ODUiICAgPkZsZXguIFByaW50LiBFbGVjdHJvbi4gKDIwMTUgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxODczLTcwMDUiICAgPkZsdWlkIER5bi4gUmVzLiAoMTk4NiAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjI2MzEtNjMzMSIgICA+RnVuY3QuIENvbXBvcy4gU3RydWN0LiAoMjAxOCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE3NTUtMTMxNSIgICA+SU9QIENvbmYuIFNlci46IEVhcnRoIEVudmlyb24uIFNjaS4gKDIwMDggLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNzU3LTg5OVgiICAgPklPUCBDb25mLiBTZXIuOiBNYXRlci4gU2NpLiBFbmcuICgyMDA5IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjYzMy0xMzU3IiAgID5JT1AgU2NpTm90ZXMgKDIwMjAgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNjMxLTc5OTAiICAgPkludC4gSi4gRXh0cmVtLiBNYW51Zi4gKDIwMTkgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwMjY2LTU2MTEiICAgPkludmVyc2UgUHJvYmxlbXMgKDE5ODUgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxMDY0LTU2MzIiICAgPkl6di4gTWF0aC4gKDE5OTUgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNzUyLTcxNjMiICAgPkouIEJyZWF0aCBSZXMuICgyMDA3IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTQ3NS03NTE2IiAgID5KLiBDb3Ntb2wuIEFzdHJvcGFydC4gUGh5cy4gKDIwMDMgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxOTQ1LTcxMTEiICAgPkouIEVsZWN0cm9jaGVtLiBTb2MuICgxOTAyIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTc0Mi0yMTQwIiAgID5KLiBHZW9waHlzLiBFbmcuICgyMDA0IC0gMjAxOCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTEyNi02NzA4IiAgID5KLiBIaWdoIEVuZXJneSBQaHlzLiAoMTk5NyAtIDIwMDkpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE3NDgtMDIyMSIgICA+Si4gSW5zdC4gKDIwMDYgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwOTYwLTEzMTciICAgPkouIE1pY3JvbWVjaC4gTWljcm9lbmcuICgxOTkxIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTc0MS0yNTUyIiAgID5KLiBOZXVyYWwgRW5nLiAoMjAwNCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAzNjgtMzI4MSIgICA+Si4gTnVjbC4gRW5lcmd5LCBQYXJ0IEMgUGxhc21hIFBoeXMuICgxOTU5IC0gMTk2Nik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDE1MC01MzZYIiAgID5KLiBPcHQuICgxOTc3IC0gMTk5OCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjA0MC04OTg2IiAgID5KLiBPcHQuICgyMDEwIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTQ2NC00MjU4IiAgID5KLiBPcHQuIEE6IFB1cmUgQXBwbC4gT3B0LiAoMTk5OSAtIDIwMDkpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE0NjQtNDI2NiIgICA+Si4gT3B0LiBCOiBRdWFudHVtIFNlbWljbGFzcy4gT3B0LiAoMTk5OSAtIDIwMDUpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAwMjItMzY4OSIgICA+Si4gUGh5cy4gQTogR2VuLiBQaHlzLiAoMTk2OCAtIDE5NzIpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAzMDUtNDQ3MCIgICA+Si4gUGh5cy4gQTogTWF0aC4gR2VuLiAoMTk3NSAtIDIwMDYpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAzMDEtMDAxNSIgICA+Si4gUGh5cy4gQTogTWF0aC4gTnVjbC4gR2VuLiAoMTk3MyAtIDE5NzQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE3NTEtODEyMSIgICA+Si4gUGh5cy4gQTogTWF0aC4gVGhlb3IuICgyMDA3IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDk1My00MDc1IiAgID5KLiBQaHlzLiBCOiBBdC4gTW9sLiBPcHQuIFBoeXMuICgxOTg4IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAyMi0zNzAwIiAgID5KLiBQaHlzLiBCOiBBdC4gTW9sLiBQaHlzLiAoMTk2OCAtIDE5ODcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAwMjItMzcxOSIgICA+Si4gUGh5cy4gQzogU29saWQgU3RhdGUgUGh5cy4gKDE5NjggLSAxOTg4KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyMzk5LTY1MjgiICAgPkouIFBoeXMuIENvbW11bi4gKDIwMTcgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNjMyLTA3MlgiICAgPkouIFBoeXMuIENvbXBsZXguICgyMDE5IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAyMi0zNzI3IiAgID5KLiBQaHlzLiBEOiBBcHBsLiBQaHlzLiAoMTk2OCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAwMjItMzczNSIgICA+Si4gUGh5cy4gRTogU2NpLiBJbnN0cnVtLiAoMTk2OCAtIDE5ODkpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjI1MTUtNzY1NSIgICA+Si4gUGh5cy4gRW5lcmd5ICgyMDE4IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDMwNS00NjA4IiAgID5KLiBQaHlzLiBGOiBNZXQuIFBoeXMuICgxOTcxIC0gMTk4OCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDk1NC0zODk5IiAgID5KLiBQaHlzLiBHOiBOdWNsLiBQYXJ0LiBQaHlzLiAoMTk4OSAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAzMDUtNDYxNiIgICA+Si4gUGh5cy4gRzogTnVjbC4gUGh5cy4gKDE5NzUgLSAxOTg4KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNTE1LTc2MzkiICAgPkouIFBoeXMuIE1hdGVyLiAoMjAxOCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjI1MTUtNzY0NyIgICA+Si4gUGh5cy4gUGhvdG9uaWNzICgyMDE4IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDk1My04OTg0IiAgID5KLiBQaHlzLjogQ29uZGVucy4gTWF0dGVyICgxOTg5IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTc0Mi02NTk2IiAgID5KLiBQaHlzLjogQ29uZi4gU2VyLiAoMjAwNCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjA5NTItNDc0NiIgICA+Si4gUmFkaW9sLiBQcm90LiAoMTk4OCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjA5NTAtNzY3MSIgICA+Si4gU2NpLiBJbnN0cnVtLiAoMTkyMyAtIDE5NjcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE2NzQtNDkyNiIgICA+Si4gU2VtaWNvbmQuICgyMDA5IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDI2MC0yODE0IiAgID5KLiBTb2MuIFJhZGlvbC4gUHJvdC4gKDE5ODEgLSAxOTg3KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNzQyLTU0NjgiICAgPkouIFN0YXQuIE1lY2guICgyMDA0IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTQ2OC01MjQ4IiAgID5KLiBUdXJidWxlbmNlICgyMDAwIC0gMjAwNCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTM0Ny00MDY1IiAgID5KcG4uIEouIEFwcGwuIFBoeXMuICgxOTYyIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTU1NS02NjExIiAgID5MYXNlciBQaHlzLiAoMjAxMyAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE2MTItMjAyWCIgICA+TGFzZXIgUGh5cy4gTGV0dC4gKDIwMDQgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNjMyLTIxNTMiICAgPk1hY2guIExlYXJuLjogU2NpLiBUZWNobm9sLiAoMjAxOSAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjI3NTItNTcyNCIgICA+TWF0ZXIuIEZ1dHVyZXMgKDIwMjIgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNjMzLTQzNTYiICAgPk1hdGVyLiBRdWFudHVtIFRlY2hub2wuICgyMDIwIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjA1My0xNTkxIiAgID5NYXRlci4gUmVzLiBFeHByZXNzICgyMDE0IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAyNS01NzI2IiAgID5NYXRoLiBVU1NSIEl6di4gKDE5NjcgLSAxOTkyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwMDI1LTU3MzQiICAgPk1hdGguIFVTU1IgU2IuICgxOTY3IC0gMTk5Myk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDk1Ny0wMjMzIiAgID5NZWFzLiBTY2kuIFRlY2hub2wuICgxOTkwIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjE1MS0yMDQzIiAgID5NZWV0LiBBYnN0ci4gKDIwMDIgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyMDUwLTYxMjAiICAgPk1ldGhvZHMgQXBwbC4gRmx1b3Jlc2MuICgyMDEzIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAyNi0xMzk0IiBzZWxlY3RlZCAgPk1ldHJvbG9naWEgKDE5NjUgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwOTY1LTAzOTMiICAgPk1vZGVsbGluZyBTaW11bC4gTWF0ZXIuIFNjaS4gRW5nLiAoMTk5MiAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjIzOTktNzUzMiIgICA+TXVsdGlmdW5jdC4gTWF0ZXIuICgyMDE4IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjYzMi05NTlYIiAgID5OYW5vIEV4cHJlc3MgKDIwMjAgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyMzk5LTE5ODQiICAgPk5hbm8gRnV0dXJlcyAoMjAxNyAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjA5NTctNDQ4NCIgICA+TmFub3RlY2hub2xvZ3kgKDE5OTAgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwOTU0LTg5OFgiICAgPk5ldHdvcms6IENvbXB1dC4gTmV1cmFsIFN5c3QuICgxOTkwIC0gMjAwNCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjYzNC00Mzg2IiAgID5OZXVyb21vcnBoLiBDb21wdXQuIEVuZy4gKDIwMjEgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxMzY3LTI2MzAiICAgPk5ldyBKLiBQaHlzLiAoMTk5OCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjA5NTEtNzcxNSIgICA+Tm9ubGluZWFyaXR5ICgxOTg4IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDMzNS03MzY4IiAgID5Ob3V2ZWxsZSBSZXZ1ZSBkJ09wdGlxdWUgKDE5NzMgLSAxOTc2KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwMDI5LTQ3ODAiICAgPk5vdXZlbGxlIFJldnVlIGQnT3B0aXF1ZSBBcHBsaXF1w6llICgxOTcwIC0gMTk3Mik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAyOS01NTE1IiAgID5OdWNsLiBGdXNpb24gKDE5NjAgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNTM4LTM4NzMiICAgPlBBU1AgKDE4ODkgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNDc4LTM5NzUiICAgPlBoeXMuIEJpb2wuICgyMDA0IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAzMS05MTEyIiAgID5QaHlzLiBCdWxsLiAoMTk1MCAtIDE5ODgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAwMzEtOTEyMCIgICA+UGh5cy4gRWR1Yy4gKDE5NjYgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwMDMxLTkxNTUiICAgPlBoeXMuIE1lZC4gQmlvbC4gKDE5NTYgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNDAyLTQ4OTYiICAgPlBoeXMuIFNjci4gKDE5NzAgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyMDU4LTcwNTgiICAgPlBoeXMuIFdvcmxkICgxOTg4IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTA2My03ODY5IiAgID5QaHlzLi1Vc3AuICgxOTkzIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDMwNS00NjI0IiAgID5QaHlzaWNzIGluIFRlY2hub2xvZ3kgKDE5NzMgLSAxOTg4KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwOTY3LTMzMzQiICAgPlBoeXNpb2wuIE1lYXMuICgxOTkzIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAzMi0xMDI4IiAgID5QbGFzbWEgUGh5cy4gKDE5NjcgLSAxOTgzKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwNzQxLTMzMzUiICAgPlBsYXNtYSBQaHlzLiBDb250cm9sLiBGdXNpb24gKDE5ODQgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNTE2LTEwNjciICAgPlBsYXNtYSBSZXMuIEV4cHJlc3MgKDIwMTggLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxMDA5LTA2MzAiICAgPlBsYXNtYSBTY2kuIFRlY2hub2wuICgxOTk5IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDk2My0wMjUyIiAgID5QbGFzbWEgU291cmNlcyBTY2kuIFRlY2hub2wuICgxOTkyIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMjU3Ni0xNTc5IiAgID5Qcm9jLiAtIEVsZWN0cm9jaGVtLiBTb2MuICgxOTY3IC0gMjAwNSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDk1OS01MzA5IiAgID5Qcm9jLiBQaHlzLiBTb2MuICgxOTI2IC0gMTk0OCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDM3MC0xMzI4IiAgID5Qcm9jLiBQaHlzLiBTb2MuICgxOTU4IC0gMTk2Nyk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDM3MC0xMjk4IiAgID5Qcm9jLiBQaHlzLiBTb2MuIEEgKDE5NDkgLSAxOTU3KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwMzcwLTEzMDEiICAgPlByb2MuIFBoeXMuIFNvYy4gQiAoMTk0OSAtIDE5NTcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE0NzgtNzgxNCIgICA+UHJvYy4gUGh5cy4gU29jLiBMb25kb24gKDE4NzQgLSAxOTI1KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNTE2LTEwOTEiICAgPlByb2cuIEJpb21lZC4gRW5nLiAoMjAxOCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjI1MTYtMTA4MyIgICA+UHJvZy4gRW5lcmd5ICgyMDE4IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDk2My02NjI1IiAgID5QdWJsaWMgVW5kZXJzdGFuZC4gU2NpLiAoMTk5MiAtIDIwMDIpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjA5NjMtOTY1OSIgICA+UHVyZSBBcHBsLiBPcHQuICgxOTkyIC0gMTk5OCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTQ2OS03Njg4IiAgID5RdWFudGl0YXRpdmUgRmluYW5jZSAoMjAwMSAtIDIwMDQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjEwNjMtNzgxOCIgICA+UXVhbnR1bSBFbGVjdHJvbi4gKDE5OTMgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwOTU0LTg5OTgiICAgPlF1YW50dW0gT3B0LiAoMTk4OSAtIDE5OTQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjIwNTgtOTU2NSIgICA+UXVhbnR1bSBTY2kuIFRlY2hub2wuICgyMDE1IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTM1NS01MTExIiAgID5RdWFudHVtIFNlbWljbGFzcy4gT3B0LiAoMTk5NSAtIDE5OTgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAwMzQtNDg4NSIgICA+UmVwLiBQcm9nLiBQaHlzLiAoMTkzNCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE2NzQtNDUyNyIgICA+UmVzLiBBc3Ryb24uIEFzdHJvcGh5cy4gKDIwMDkgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyNTE1LTUxNzIiICAgPlJlc2VhcmNoIE5vdGVzIG9mIHRoZSBBQVMgKDIwMTcgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwMDM0LTY2ODMiICAgPlJldmlldyBvZiBQaHlzaWNzIGluIFRlY2hub2xvZ3kgKDE5NzAgLSAxOTcyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxNDY4LTQ4MDIiICAgPlJ1c3MuIEFjYWQuIFNjaS4gU2IuIE1hdGguICgxOTkzIC0gMTk5NSk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAzNi0wMjFYIiAgID5SdXNzLiBDaGVtLiBSZXYuICgxOTYwIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAzNi0wMjc5IiAgID5SdXNzLiBNYXRoLiBTdXJ2LiAoMTk2MCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE0NjgtNDgxMCIgICA+UnVzc2lhbiBBY2FkLiBTY2kuIEl6di4gTWF0aC4gKDE5OTMgLSAxOTk1KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxMDY0LTU2MTYiICAgPlNiLiBNYXRoLiAoMTk5NSAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE0NjgtNjk5NiIgICA+U2NpLiBUZWNobm9sLiBBZHYuIE1hdGVyLiAoMjAwMCAtIDIwMTUpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAyNjgtMTI0MiIgICA+U2VtaWNvbmQuIFNjaS4gVGVjaG5vbC4gKDE5ODYgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwOTY0LTE3MjYiICAgPlNtYXJ0IE1hdGVyLiBTdHJ1Y3QuICgxOTkyIC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDA0OS0xNzQ4IiAgID5Tb3YuIEouIFF1YW50dW0gRWxlY3Ryb24uICgxOTcxIC0gMTk5Mik8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAzOC01NjcwIiAgID5Tb3YuIFBoeXMuIFVzcC4gKDE5NTggLSAxOTkyKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIwOTUzLTIwNDgiICAgPlN1cGVyY29uZC4gU2NpLiBUZWNobm9sLiAoMTk4OCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjIwNTEtNjcyWCIgICA+U3VyZi4gVG9wb2dyLjogTWV0cm9sLiBQcm9wLiAoMjAxMyAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE1MzgtMzg4MSIgICA+VGhlIEFzdHJvbm9taWNhbCBKb3VybmFsICgxODQ5IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMDAwNC02MzdYIiAgID5UaGUgQXN0cm9waHlzaWNhbCBKb3VybmFsICgxOTk2IC0gcHJlc2VudCk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTUzOC00MzU3IiAgID5UaGUgQXN0cm9waHlzaWNhbCBKb3VybmFsIExldHRlcnMgKDE5OTUgLSAyMDA5KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyMDQxLTgyMDUiICAgPlRoZSBBc3Ryb3BoeXNpY2FsIEpvdXJuYWwgTGV0dGVycyAoMjAxMCAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjAwNjctMDA0OSIgICA+VGhlIEFzdHJvcGh5c2ljYWwgSm91cm5hbCBTdXBwbGVtZW50IFNlcmllcyAoMTk5NiAtIHByZXNlbnQpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjI2MzItMzMzOCIgICA+VGhlIFBsYW5ldGFyeSBTY2llbmNlIEpvdXJuYWwgKDIwMjAgLSBwcmVzZW50KTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIyMTU2LTczOTUiICAgPlRyYW5zLiBBbS4gRWxlY3Ryb2NoZW0uIFNvYy4gKDE5MzAgLSAxOTMwKTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxOTQ1LTY4NTkiICAgPlRyYW5zLiBFbGVjdHJvY2hlbS4gU29jLiAoMTkzMSAtIDE5NDgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjE0NzUtNDg3OCIgICA+VHJhbnMuIE9wdC4gU29jLiAoMTg5OSAtIDE5MzIpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjIwNTMtMTYxMyIgICA+VHJhbnNsLiBNYXRlci4gUmVzLiAoMjAxNCAtIDIwMTgpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjA5NTktNzE3NCIgICA+V2F2ZXMgUmFuZG9tIE1lZGlhICgxOTkxIC0gMjAwNCk8L29wdGlvbj4KPC9zZWxlY3Q+CjxsYWJlbCBmb3I9IkNGX1ZPTFVNRSIgY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlZvbHVtZSBudW1iZXI6PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IkNGX1ZPTFVNRSIgaWQ9IkNGX1ZPTFVNRSIgY2xhc3M9ImFydC1sb29rdXBfX2NvbnRlbnQtZmluZGVyLWZpZWxkIiBwbGFjZWhvbGRlcj0iVm9sdW1lIiB4LXdlYmtpdC1zcGVlY2g9IiI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9IkNGX0lTU1VFIiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+SXNzdWUgbnVtYmVyIChpZiBrbm93bik6PC9sYWJlbD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IkNGX0lTU1VFIiBpZD0iQ0ZfSVNTVUUiIGNsYXNzPSJhcnQtbG9va3VwX19jb250ZW50LWZpbmRlci1maWVsZCIgcGxhY2Vob2xkZXI9Iklzc3VlIiB4LXdlYmtpdC1zcGVlY2g9IiI+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9IkNGX1BBR0UiIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5BcnRpY2xlIG9yIHBhZ2UgbnVtYmVyOjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJDRl9QQUdFIiBpZD0iQ0ZfUEFHRSIgY2xhc3M9ImFydC1sb29rdXBfX2NvbnRlbnQtZmluZGVyLWZpZWxkIGFydC1sb29rdXBfX2NvbnRlbnQtZmluZGVyLWZpZWxkLS1sYXN0IiBwbGFjZWhvbGRlcj0iQXJ0aWNsZSBvciBwYWdlIiB4LXdlYmtpdC1zcGVlY2g9IiI+CgogICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGFydC1sb29rdXBfX3N1Ym1pdCIgdmFsdWU9Ikxvb2t1cCIgbmFtZT0ic3VibWl0Ij4KICAgICAgICA8L2Rpdj4KICAgIDwvZmllbGRzZXQ+CjwvZm9ybT48L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj48L2hlYWRlcj4KPCEtLSBIZWFkZXIgdGlsZSBlbmRzIC0tPgo8ZGl2IGNsYXNzPSJwYWdlLWJvZHkiID4KICAgICAgICA8YSBuYW1lPSIiIGlkPSJza2lwLXRvLWNvbnRlbnQtbGluay10YXJnZXQiIHRhYmluZGV4PSItMSI+PC9hPgogICAgICAgIDwhLS0gU3RhcnQgdHdvIGNvbHVtbiBsYXlvdXQgLS0+CjwhLS0gU3RhcnQgdHdvIGNvbHVtbiBsYXlvdXQgLS0+CjxkaXYgY2xhc3M9IndyYXBwZXIgZ3JpZC0yLWNvbCBkYi1zaG93Z3JpZCB0Yi1zaG93Z3JpZCBjZiI+CiAgICAgICAgICAgIDxtYWluIHJvbGU9Im1haW4iPgogICAgICAgICAgICAgICAgPCEtLSBTZWNvbmRhcnkgaGVhZGVyIHN0YXJ0cyAtLT4KPGRpdiBjbGFzcz0ic2Vjb25kYXJ5LWhlYWRlciBjZiIgaWQ9IndkLXNlY29uZGFyeS1oZWFkZXIiPgogICAgPCEtLSBCcmFuZGVkIGpvdXJuYWwgaGVhZGVyIHN0YXJ0cyAtLT4KPGRpdiBjbGFzcz0iYnJhbmRlZCI+CgogICAgPGRpdiBjbGFzcz0icHVibGljYXRpb24tbmFtZSIgaWQ9IndkLXB1Yi1uYW1lIj4KCTxoMSBjbGFzcz0icHVibGljYXRpb24tdGl0bGUiIGl0ZW1wcm9wPSJuYW1lIiBpdGVtaWQ9InBlcmlvZGljYWwiPgoJCQkJPGEgaHJlZj0iL2pvdXJuYWwvMDAyNi0xMzk0IiBpdGVtcHJvcD0idXJsIiA+TWV0cm9sb2dpYTwvYT4KCTwvaDE+CgkJIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icGFydG5lci1sb2dvcyBtLWhpZGUiIGlkPSJ3ZC1wYXJ0bmVyLWxvZ29zIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFydG5lci1sb2dvLWFsaWdubWVudCI+CiAgICAgICAgICAgICAgICA8IS0tIFBhcnRuZXIgbG9nbyB0aWxlIHN0YXJ0cyAtLT4KPGJ1dHRvbiBjbGFzcz0ib3ZlcmxheS1sYXVuY2ggcGFydG5lci1sb2dvIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICA8aW1nIGJvcmRlcj0iMCIgc3JjPSJodHRwczovL2Ntcy5pb3BzY2llbmNlLm9yZy81ZjZhNTk3Yi1hMjUwLTExZGItOTFkMS00M2NiYzAyNDExNGEvYmlwbS5naWY/Z3Vlc3Q9dHJ1ZSIgYWx0PSJJbnRlcm5hdGlvbmFsIEJ1cmVhdSBvZiBXZWlnaHRzIGFuZCBNZWFzdXJlcyAoQklQTSksIGZpbmQgb3V0IG1vcmUiPgo8L2J1dHRvbj4KPHNwYW4gY2xhc3M9Im92ZXJsYXktc2V0Ij4KICAgIDxkaXYgY2xhc3M9InRpbnQtc2NyZWVuIj48L2Rpdj4KICAgIDxkaXYgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsPSJJbnRlcm5hdGlvbmFsIEJ1cmVhdSBvZiBXZWlnaHRzIGFuZCBNZWFzdXJlcyAoQklQTSksIGZpbmQgb3V0IG1vcmUiIGFyaWEtbW9kYWw9InRydWUiIGNsYXNzPSJvdmVybGF5LXBhbmVsIj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJjbG9zZS1pY29uIGNsb3NlLW92ZXJsYXkiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbiBjbGFzcz0iaWNvbi1jbG9zZSI+PC9zcGFuPjwvYnV0dG9uPgogICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXktaW1nIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5iaXBtLm9yZy8iPgogICAgICAgICAgICAgICAgPGltZyBib3JkZXI9IjAiIHNyYz0iaHR0cHM6Ly9jbXMuaW9wc2NpZW5jZS5vcmcvNWY2YTU5N2ItYTI1MC0xMWRiLTkxZDEtNDNjYmMwMjQxMTRhL2JpcG0uZ2lmP2d1ZXN0PXRydWUiIGFsdD0iSW50ZXJuYXRpb25hbCBCdXJlYXUgb2YgV2VpZ2h0cyBhbmQgTWVhc3VyZXMgKEJJUE0pLCBmaW5kIG91dCBtb3JlIj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXktdGV4dCI+CiAgICAgICAgICAgIDxwPlRoZSBJbnRlcm5hdGlvbmFsIEJ1cmVhdSBvZiBXZWlnaHRzIGFuZCBNZWFzdXJlcyAoQklQTSkgd2FzIHNldCB1cCBieSB0aGUgTWV0cmUgQ29udmVudGlvbiBhbmQgaGFzIGl0cyBoZWFkcXVhcnRlcnMgbmVhciBQYXJpcywgRnJhbmNlLiBJdCBpcyBmaW5hbmNlZCBqb2ludGx5IGJ5IGl0cyBNZW1iZXIgU3RhdGVzIGFuZCBvcGVyYXRlcyB1bmRlciB0aGUgZXhjbHVzaXZlIHN1cGVydmlzaW9uIG9mIHRoZSBDSVBNLjwvcD4gPHA+SXRzIG1hbmRhdGUgaXMgdG8gcHJvdmlkZSB0aGUgYmFzaXMgZm9yIGEgc2luZ2xlLCBjb2hlcmVudCBzeXN0ZW0gb2YgbWVhc3VyZW1lbnRzIHRocm91Z2hvdXQgdGhlIHdvcmxkLCB0cmFjZWFibGUgdG8gdGhlIEludGVybmF0aW9uYWwgU3lzdGVtIG9mIFVuaXRzIChTSSkuIFRoaXMgdGFzayB0YWtlcyBtYW55IGZvcm1zLCBmcm9tIGRpcmVjdCBkaXNzZW1pbmF0aW9uIG9mIHVuaXRzIChhcyBpbiB0aGUgY2FzZSBvZiBtYXNzIGFuZCB0aW1lKSB0byBjb29yZGluYXRpb24gdGhyb3VnaCBpbnRlcm5hdGlvbmFsIGNvbXBhcmlzb25zIG9mIG5hdGlvbmFsIG1lYXN1cmVtZW50IHN0YW5kYXJkcyAoYXMgaW4gZWxlY3RyaWNpdHkgYW5kIGlvbml6aW5nIHJhZGlhdGlvbikuPC9wPiA8cD5UaGUgQklQTSBoYXMgYW4gaW50ZXJuYXRpb25hbCBzdGFmZiBvZiBvdmVyIDcwIGFuZCBpdHMgc3RhdHVzIHZpcy0mYWdyYXZlOy12aXMgdGhlIEZyZW5jaCBHb3Zlcm5tZW50IGlzIHNpbWlsYXIgdG8gdGhhdCBvZiBvdGhlciBpbnRlcmdvdmVybm1lbnRhbCBvcmdhbml6YXRpb25zIGJhc2VkIGluIFBhcmlzLjwvcD48L2Rpdj4KICAgICAgICA8cCBjbGFzcz0idGEtYyBtdC0xIG1iLTIiPjxhIGhyZWY9Imh0dHA6Ly93d3cuYmlwbS5vcmcvIj5odHRwOi8vd3d3LmJpcG0ub3JnLzwvYT48L3A+CiAgICA8L2Rpdj4KPC9zcGFuPgo8IS0tIFBhcnRuZXIgbG9nbyB0aWxlIGVuZHMgLS0+Cgo8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8IS0tIEJyYW5kZWQgam91cm5hbCBoZWFkZXIgZW5kcyAtLT4KPC9kaXY+IDwhLS0gZW5kIHNlY29uZGFyeS1oZWFkZXIgLS0+CjwhLS0gU2Vjb25kYXJ5IGhlYWRlciBlbmRzIC0tPjxkaXYgY2xhc3M9ImRiMSB0YjEiPgogICAgICAgICAgICAgICAgICAgIDwhLS0gU3RhcnQgSm91cm5hbCBDb250ZW50IC0tPgo8ZGl2IGNsYXNzPSdnZW90YXJnZXRseWdlb2NvbnRlbnQxNjMwNTg1Njc2NzQyJz48L2Rpdj48ZGl2IGNsYXNzPSJmbGV4LWNvbnRhaW5lciI+CiAgICA8IS0tIFN0YXJ0IEpvdXJuYWwgaW50cm9kdWN0aW9uIC0tPgogICAgPGRpdiBjbGFzcz0ibWItMiIgaWQ9IndkLWpubC1obS1pbnRybyI+CiAgICA8ZGl2IGNsYXNzPSJwdWxsLWxlZnQiPgogICAgICAgICAgICA8aW1nIGFsdD0iIiB3aWR0aD0iMTI1IiBzcmM9Imh0dHBzOi8vY21zLmlvcHNjaWVuY2Uub3JnL2ZiZGNlNTU4LWVjMWUtMTFlNS1iMGI2LTc1OWY4NmEyMDA4ZS9qb3VybmFsX2NvdmVyP2d1ZXN0PXRydWUiIGJvcmRlcj0iMCIvPgogICAgICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICAgICAgICAgPHA+VGhlIGxlYWRpbmcgaW50ZXJuYXRpb25hbCBqb3VybmFsIGluIHB1cmUgYW5kIGFwcGxpZWQgbWV0cm9sb2d5LCBwdWJsaXNoZWQgYnkgSU9QIFB1Ymxpc2hpbmcmbmJzcDtvbiBiZWhhbGYgb2YmbmJzcDs8YSBocmVmPSJodHRwOi8vd3d3LmJpcG0ub3JnIj5CdXJlYXUgSW50ZXJuYXRpb25hbCBkZXMgUG9pZHMgZXQgTWVzdXJlcyAoQklQTSk8L2E+LjwvcD48ZGl2IGNsYXNzPSJidG4tbXVsdGktYmxvY2siPgogICAgICAgICAgICA8YSBpZD0iamhwLXN1Ym1pdCIgaHJlZj0iaHR0cHM6Ly9tYzA0Lm1hbnVzY3JpcHRjZW50cmFsLmNvbS9tZXQtYmlwbSIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIHJlbD0ibm9vcGVuZXIiPlN1Ym1pdAogICAgICAgICAgICAgICAgICAgIGFuIGFydGljbGUKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+b3BlbnMgaW4gbmV3IHRhYjwvc3Bhbj48L2E+CiAgICAgICAgICAgIDxhIGlkPSJqaHAtdHJhY2siIGhyZWY9Imh0dHBzOi8vcHVibGlzaGluZ3N1cHBvcnQuaW9wc2NpZW5jZS5pb3Aub3JnL3RyYWNrLW15LWFydGljbGUvIiB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJlbD0ibm9vcGVuZXIiPgogICAgICAgICAgICAgICAgICAgIFRyYWNrIG15IGFydGljbGUgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPm9wZW5zIGluIG5ldyB0YWI8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImpubC1ub3RpZmljYXRpb25zIHByaW50LWhpZGUiPgoKICAgICAgICAgICAgICAgICAgICA8IS0tIFN0YXJ0IEpvdXJuYWwgUlNTIGZlZWQgLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iam5sLW5vdGlmaWNhdGlvbnMtd3JhcHBlciBqbmwtbm90aWZpY2F0aW9ucy13cmFwcGVyLS1yc3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0id2Qtam5sLXJzcyIgaHJlZj0iL2pvdXJuYWwvcnNzLzAwMjYtMTM5NCI+PHNwYW4gY2xhc3M9Imljb24tZmVlZCBpY29uLWZlZWQtLWpocCI+PC9zcGFuPlJTUzwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8IS0tIEVuZCBKb3VybmFsIFJTUyBmZWVkIC0tPgoKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTdGFydCBFbWFpbCBBbGVydCAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJqbmwtbm90aWZpY2F0aW9ucy13cmFwcGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9IndkLWpubC1lbWFpbC1hbGVydCBsb2dpblJlcXVpcmVkIgogICAgICAgICAgICAgICBocmVmPSJodHRwczovL215aW9wc2NpZW5jZS5pb3Aub3JnL3NpZ25pbj9vcmlnaW49YTAmcmV0dXJuPWh0dHBzJTNBJTJGJTJGaW9wc2NpZW5jZS5pb3Aub3JnJTJGbXlpb3BzY2llbmNlJTJGYWxlcnRzJTJGc3Vic2NyaWJlJTNGam91cm5hbCUzRDAwMjYtMTM5NCIKICAgICAgICAgICAgICAgaWQ9Im5vSWQiIHRpdGxlPSJDcmVhdGUgam91cm5hbCBlbWFpbCBhbGVydCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1hbGFybSBpY29uLWFsYXJtLS1qaHAiPjwvc3Bhbj5TaWduIHVwIGZvciBuZXcgaXNzdWUgbm90aWZpY2F0aW9ucwogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CgogICAgPCEtLSBFbmQgRW1haWwgQWxlcnQgLS0+CjwhLS0gRW5kIEVtYWlsIEFsZXJ0IC0tPgo8IS0tIEVuZCBFbWFpbCBBbGVydCAtLT48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgPC9kaXY+CjwvZGl2PgoKPCEtLSBFbmQgSm91cm5hbCBpbnRybyAtLT4KICAgIDwhLS0gU3RhcnQgSm91cm5hbCBob21lIHZvbHVtZSBsaXN0aW5ncyAtLT4KICAgIDxkaXYgaWQ9IndkLWpubC1obS12b2wtZm9ybXMiIGNsYXNzPSJtYi0yIG1pZC10YWJsZS1tYi0yNSI+CgkJPGRpdiBjbGFzcz0iY2YiPgoJCQk8ZGl2IGNsYXNzPSJtaWQtdGFibGV0LWhhbGYtbGVmdCI+CgkJCQkJPGZvcm0gaWQ9ImN1cnJlbnRWb2x1bWVJc3N1ZXNGb3JtIgoJCQkJCQljbGFzcz0ic2VsZWN0LXctYnRuIG1iLTEgY2YiIG5hbWU9ImN1cnJlbnRWb2x1bWVJc3N1ZXNGb3JtIgoJCQkJCQlhY3Rpb249Ii9pc3N1ZSIgbWV0aG9kPSJnZXQiIG9uc3VibWl0PSJyZXR1cm4gZmFsc2UiCgkJCQkJCWFjY2VwdC1jaGFyc2V0PSJ1dGYtOCxpc28tODg1OS0xIiA+CgkJCQkJCTxsYWJlbCBmb3I9ImxhdGVzdFZvbHVtZUlzc3Vlc1NlbGVjdG9yIiBjbGFzcz0iY2YiPkN1cnJlbnQgdm9sdW1lPC9sYWJlbD4KCQkJCQkJPHNlbGVjdCBuYW1lPSJsYXRlc3RWb2x1bWVJc3N1ZXNTZWxlY3QiCiAgICAgICAgaWQ9ImxhdGVzdFZvbHVtZUlzc3Vlc1NlbGVjdG9yIiA+CiAgICA8b3B0aW9uIHZhbHVlPSIvaXNzdWUvMDAyNi0xMzk0LzU5LzYiICAgPk51bWJlciA2LCBEZWNlbWJlciAyMDIyPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii9pc3N1ZS8wMDI2LTEzOTQvNTkvNSIgICA+TnVtYmVyIDUsIE9jdG9iZXIgMjAyMjwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvaXNzdWUvMDAyNi0xMzk0LzU5LzQiICAgPk51bWJlciA0LCBBdWd1c3QgMjAyMjwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvaXNzdWUvMDAyNi0xMzk0LzU5LzMiICAgPk51bWJlciAzLCBKdW5lIDIwMjI8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL2lzc3VlLzAwMjYtMTM5NC81OS8yIiAgID5OdW1iZXIgMiwgQXByaWwgMjAyMjwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvaXNzdWUvMDAyNi0xMzk0LzU5LzEiICAgPk51bWJlciAxLCBGZWJydWFyeSAyMDIyPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii9pc3N1ZS8wMDI2LTEzOTQvNTkvMUEiICAgPk51bWJlciAxQSwgSmFudWFyeSAyMDIyPC9vcHRpb24+Cjwvc2VsZWN0Pgo8aW5wdXQgdHlwZT0ic3VibWl0IiBpZD0ibGF0ZXN0Vm9sdW1lSXNzdWVzIiB0aXRsZT0iR28gdG8gaXNzdWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJHbyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeS0yIi8+CgkJCQkJCQk8L2Zvcm0+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0ibWlkLXRhYmxldC1oYWxmLXJpZ2h0Ij4KCQkJCQk8Zm9ybSBpZD0iYWxsVm9sdW1lc0Zvcm0iCgkJCQkJCW5hbWU9ImFsbFZvbHVtZXNGb3JtIiBjbGFzcz0ic2VsZWN0LXctYnRuIG1iLTEgY2YiCgkJCQkJCWFjdGlvbj0iL3ZvbHVtZSIgbWV0aG9kPSJnZXQiIG9uc3VibWl0PSJyZXR1cm4gZmFsc2UiCgkJCQkJCWFjY2VwdC1jaGFyc2V0PSJ1dGYtOCxpc28tODg1OS0xIiA+CgkJCQkJCTxsYWJlbCBmb3I9ImFsbFZvbHVtZXNTZWxlY3RvciIgY2xhc3M9ImNmIj5Kb3VybmFsIGFyY2hpdmU8L2xhYmVsPgoJCQkJCQk8c2VsZWN0IG5hbWU9ImFsbFZvbHVtZXNTZWxlY3QiCiAgICAgICAgaWQ9ImFsbFZvbHVtZXNTZWxlY3RvciIgPgogICAgPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvNTkiICAgPlZvbCA1OSwgMjAyMjwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC81OCIgICA+Vm9sIDU4LCAyMDIxPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzU3IiAgID5Wb2wgNTcsIDIwMjA8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvNTYiICAgPlZvbCA1NiwgMjAxOTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC81NSIgICA+Vm9sIDU1LCAyMDE4PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzU0IiAgID5Wb2wgNTQsIDIwMTc8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvNTMiICAgPlZvbCA1MywgMjAxNjwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC81MiIgICA+Vm9sIDUyLCAyMDE1PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzUxIiAgID5Wb2wgNTEsIDIwMTQ8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvNTAiICAgPlZvbCA1MCwgMjAxMzwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC80OSIgICA+Vm9sIDQ5LCAyMDEyPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzQ4IiAgID5Wb2wgNDgsIDIwMTE8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvNDciICAgPlZvbCA0NywgMjAxMDwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC80NiIgICA+Vm9sIDQ2LCAyMDA5PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzQ1IiAgID5Wb2wgNDUsIDIwMDg8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvNDQiICAgPlZvbCA0NCwgMjAwNzwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC80MyIgICA+Vm9sIDQzLCAyMDA2PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzQyIiAgID5Wb2wgNDIsIDIwMDU8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvNDEiICAgPlZvbCA0MSwgMjAwNDwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC80MCIgICA+Vm9sIDQwLCAyMDAzPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzM5IiAgID5Wb2wgMzksIDIwMDI8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMzgiICAgPlZvbCAzOCwgMjAwMTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8zNyIgICA+Vm9sIDM3LCAyMDAwPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzM2IiAgID5Wb2wgMzYsIDE5OTk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMzUiICAgPlZvbCAzNSwgMTk5ODwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8zNCIgICA+Vm9sIDM0LCAxOTk3PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzMzIiAgID5Wb2wgMzMsIDE5OTY8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMzIiICAgPlZvbCAzMiwgMTk5NTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8zMSIgICA+Vm9sIDMxLCAxOTk0PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzMwIiAgID5Wb2wgMzAsIDE5OTM8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMjkiICAgPlZvbCAyOSwgMTk5Mjwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8yOCIgICA+Vm9sIDI4LCAxOTkxPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzI3IiAgID5Wb2wgMjcsIDE5OTA8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMjYiICAgPlZvbCAyNiwgMTk4OTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8yNSIgICA+Vm9sIDI1LCAxOTg4PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzI0IiAgID5Wb2wgMjQsIDE5ODc8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMjMiICAgPlZvbCAyMywgMTk4Njwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8yMiIgICA+Vm9sIDIyLCAxOTg2PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzIxIiAgID5Wb2wgMjEsIDE5ODU8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMjAiICAgPlZvbCAyMCwgMTk4NDwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8xOSIgICA+Vm9sIDE5LCAxOTgzPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzE4IiAgID5Wb2wgMTgsIDE5ODI8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMTciICAgPlZvbCAxNywgMTk4MTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8xNiIgICA+Vm9sIDE2LCAxOTgwPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzE1IiAgID5Wb2wgMTUsIDE5Nzk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMTQiICAgPlZvbCAxNCwgMTk3ODwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8xMyIgICA+Vm9sIDEzLCAxOTc3PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzEyIiAgID5Wb2wgMTIsIDE5NzY8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL3ZvbHVtZS8wMDI2LTEzOTQvMTEiICAgPlZvbCAxMSwgMTk3NTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvdm9sdW1lLzAwMjYtMTM5NC8xMCIgICA+Vm9sIDEwLCAxOTc0PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzkiICAgPlZvbCA5LCAxOTczPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzgiICAgPlZvbCA4LCAxOTcyPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzciICAgPlZvbCA3LCAxOTcxPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzYiICAgPlZvbCA2LCAxOTcwPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzUiICAgPlZvbCA1LCAxOTY5PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzQiICAgPlZvbCA0LCAxOTY4PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzMiICAgPlZvbCAzLCAxOTY3PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzIiICAgPlZvbCAyLCAxOTY2PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii92b2x1bWUvMDAyNi0xMzk0LzEiICAgPlZvbCAxLCAxOTY1PC9vcHRpb24+Cjwvc2VsZWN0Pgo8aW5wdXQgdHlwZT0ic3VibWl0IiBpZD0iYWxsVm9sdW1lcyIgdmFsdWU9IkdvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iR28gdG8gdm9sdW1lIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5LTIiLz4KCQkJCQkJCTwvZm9ybT4KCQkJCTwvZGl2PgoJCQk8IS0tIFN0YXJ0IEZvY3VzIGlzc3VlcyAtLT4KCQkJPGRpdiBjbGFzcz0ibWlkLXRhYmxldC1oYWxmLWxlZnQiPgoJCQkJCTxmb3JtIGlkPSJhbGxUb3BpY3NGb3JtIiBuYW1lPSJhbGxWb2x1bWVzRm9ybSIgY2xhc3M9InNlbGVjdC13LWJ0biBtYi0xIGNmIgoJCQkJCQkgIGFjdGlvbj0iL2pvdXJuYWwiIG1ldGhvZD0iZ2V0IiBvbnN1Ym1pdD0icmV0dXJuIGZhbHNlIiBhY2NlcHQtY2hhcnNldD0idXRmLTgsaXNvLTg4NTktMSI+CgkJCQkJCTxsYWJlbCBmb3I9ImFsbEZvY3VzSXNzdWVzU2VsZWN0b3IiIGNsYXNzPSJjZiI+Rm9jdXMgaXNzdWVzPC9sYWJlbD4KCQkJCQkJPHNlbGVjdCBuYW1lPSJhbGxGb2N1c0lzc3Vlc1NlbGVjdCIKICAgICAgICBpZD0iYWxsRm9jdXNJc3N1ZXNTZWxlY3RvciIgPgogICAgPG9wdGlvbiB2YWx1ZT0iL2NvbGxlY3Rpb25zLzAwMjYtMTM5NF9mb2N1c19pc3N1ZV9Gb2N1c19vbl9tZWFzdXJlbWVudHNfb2ZfdGhlX25ld3Rvbmlhbl9jb25zdGFudF9vZl9ncmF2aXRhdGlvbiIgICA+Rm9jdXMgb24gTWVhc3VyZW1lbnRzIG9mIHRoZSBOZXd0b25pYW4gQ29uc3RhbnQgb2YgR3Jhdml0YXRpb248L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL2NvbGxlY3Rpb25zLzAwMjYtMTM5NF9mb2N1c19pc3N1ZV9Gb2N1c19vbl9UZW1wZXJhdHVyZV9hbmRfVGhlcm1hbF9NZWFzdXJlbWVudF9URU1QTUVLT18yMDE5IiAgID5Gb2N1cyBvbiBURU1QTUVLTyAyMDE5PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii9jb2xsZWN0aW9ucy8wMDI2LTEzOTRfZm9jdXNfaXNzdWVfZm9jdXMtb24tbWF0aGVtYXRpY3MtYW5kLXN0YXRpc3RpY3MtZm9yLW1ldHJvbG9neS0yMDE5IiAgID5NQVRITUVUIDIwMTk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL2NvbGxlY3Rpb25zLzAwMjYtMTM5NF9mb2N1c19pc3N1ZV9mb2N1cy1pc3N1ZS1vbi1sZW5ndGgtbWV0cm9sb2d5IiAgID5Gb2N1cyBvbiBMZW5ndGggTWV0cm9sb2d5PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii9jb2xsZWN0aW9ucy8wMDI2LTEzOTRfZm9jdXNfaXNzdWVfRm9jdXNfb25fdGhlX1JldmlzaW9uX29mX3RoZV9TSSIgICA+Rm9jdXMgb24gdGhlIFJldmlzaW9uIG9mIHRoZSBTSTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvY29sbGVjdGlvbnMvMDAyNi0xMzk0X2ZvY3VzX2lzc3VlX0ZvY3VzX29uX2FkdmFuY2VzX2luX21ldHJvbG9neV9pbl9jaGVtaXN0cnlfYW5kX2Jpb2xvZ3kiICAgPkZvY3VzIG9uIEFkdmFuY2VzIGluIE1ldHJvbG9neSBpbiBDaGVtaXN0cnkgYW5kIEJpb2xvZ3k8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL2NvbGxlY3Rpb25zLzAwMjYtMTM5NF9mb2N1c19pc3N1ZV9Gb2N1c19vbl90aGVfcXVhbnR1bV9yZXZvbHV0aW9uX2luX21ldHJvbG9neSIgICA+Rm9jdXMgb24gUXVhbnR1bSBNZXRyb2xvZ3k8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL2NvbGxlY3Rpb25zLzAwMjYtMTM5NF9mb2N1c19pc3N1ZV9Gb2N1cy1vbi1PcHRpY2FsLVJhZGlvbWV0cnktTkVXUkFELTIwMTciICAgPkZvY3VzIG9uIE9wdGljYWwgUmFkaW9tZXRyeSAoTkVXUkFEIDIwMTcpPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii9jb2xsZWN0aW9ucy8wMDI2LTEzOTRfZm9jdXNfaXNzdWVfRm9jdXNfaXNzdWVfb25fcHJlc3N1cmVfYW5kX3ZhY3V1bV9tZXRyb2xvZ3kiICAgPkZvY3VzIG9uIFByZXNzdXJlIGFuZCBWYWN1dW0gTWV0cm9sb2d5PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii9jb2xsZWN0aW9ucy8wMDI2LTEzOTRfZm9jdXNfaXNzdWVfRm9jdXNfb25fTWF0aGVtYXRpY3NfYW5kX1N0YXRpc3RpY3NfZm9yX01ldHJvbG9neSIgICA+Rm9jdXMgb24gTWF0aGVtYXRpY3MgYW5kIFN0YXRpc3RpY3MgZm9yIE1ldHJvbG9neTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvY29sbGVjdGlvbnMvMDAyNi0xMzk0X2ZvY3VzX2lzc3VlX0ZvY3VzX29uX01ldHJvbG9neV9mb3JfTWV0ZW9yb2xvZ3lfYW5kX0NsaW1hdGUiICAgPkZvY3VzIG9uIE1ldHJvbG9neSBmb3IgTWV0ZW9yb2xvZ3kgYW5kIENsaW1hdGU8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL2NvbGxlY3Rpb25zLzAwMjYtMTM5NF9mb2N1c19pc3N1ZV9Gb2N1c19vbl9FbGVjdHJpY2FsX01ldHJvbG9neSIgICA+Rm9jdXMgb24gTWV0cm9sb2d5IGluIEVsZWN0cmljaXR5IGFuZCBNYWduZXRpc208L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL2NvbGxlY3Rpb25zLzAwMjYtMTM5NF9mb2N1c19pc3N1ZV9Gb2N1c19vbl9SZWFsaXphdGlvbl9NYWludGVuYW5jZV9hbmRfRGlzc2VtaW5hdGlvbl9vZl90aGVfS2lsb2dyYW0iICAgPkZvY3VzIG9uIFJlYWxpemF0aW9uLCBNYWludGVuYW5jZSBhbmQgRGlzc2VtaW5hdGlvbiBvZiB0aGUgTmV3IEtpbG9ncmFtPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii9jb2xsZWN0aW9ucy8wMDI2LTEzOTRfZm9jdXNfaXNzdWVfRm9jdXNfb25fTWV0cm9sb2d5X2Zvcl9EeW5hbWljX01lYXN1cmVtZW50cyIgICA+Rm9jdXMgb24gTWV0cm9sb2d5IGZvciBEeW5hbWljIE1lYXN1cmVtZW50czwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIvY29sbGVjdGlvbnMvMDAyNi0xMzk0X2ZvY3VzX2lzc3VlX0ZvY3VzX29uX3RpbWVfc2NhbGVfYWxnb3JpdGhtcyIgICA+Rm9jdXMgb24gVGltZSBTY2FsZSBBbGdvcml0aG1zPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9Ii9jb2xsZWN0aW9ucy8wMDI2LTEzOTRfZm9jdXNfaXNzdWVfRm9jdXNfb25fbWVhc3VyZW1lbnRfdW5jZXJ0YWludHkiICAgPkJJUE0gV29ya3Nob3Agb24gTWVhc3VyZW1lbnQgVW5jZXJ0YWludHk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iL2NvbGxlY3Rpb25zLzAwMjYtMTM5NF9mb2N1c19pc3N1ZV9Gb2N1c19vbl90aGVfQm9sdHptYW5uX0NvbnN0YW50IiAgID5Gb2N1cyBvbiB0aGUgQm9sdHptYW5uIENvbnN0YW50PC9vcHRpb24+Cjwvc2VsZWN0Pgo8aW5wdXQgdHlwZT0ic3VibWl0IiBpZD0iYWxsRm9jdXNJc3N1ZXMiIHZhbHVlPSJHbyIgdGl0bGU9IkdvIHRvIHZvbHVtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnktMiIvPgoJCQkJCTwvZm9ybT4KCQkJCTwvZGl2PgoJCQk8IS0tIEVuZCBGb2N1cyBpc3N1ZXMgLS0+CgkJPC9kaXY+CgoJPC9kaXY+CjwhLS0gRW5kIEpvdXJuYWwgaG9tZSB2b2x1bWUgbGlzdGluZ3MgLS0+CjwvZGl2PgoKPCEtLSBTdGFydCBKb3VybmFsIE1ldHJpY3MgLS0+CiAgICA8ZGl2IGlkPSJ3ZC1qb3VybmFsLW1ldHJpY3MiIGNsYXNzPSJtZXRyaWNzIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtZXRyaWNzX19ncmlkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0cmljc19fbWV0cmljIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWV0cmljc19fZGVzY3JpcHRpb24iPk1lZGlhbiBzdWJtaXNzaW9uIHRvIGZpcnN0IGRlY2lzaW9uIGJlZm9yZSBwZWVyIHJldmlldzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWV0cmljc19fc2NvcmUiPjUgZGF5czwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRyaWNzX19tZXRyaWMiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZXRyaWNzX19kZXNjcmlwdGlvbiI+TWVkaWFuIHN1Ym1pc3Npb24gdG8gZmlyc3QgZGVjaXNpb24gYWZ0ZXIgcGVlciByZXZpZXc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1ldHJpY3NfX3Njb3JlIj40MSBkYXlzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1ldHJpY3NfX21ldHJpYyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1ldHJpY3NfX2Rlc2NyaXB0aW9uIj5JbXBhY3QgZmFjdG9yPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZXRyaWNzX19zY29yZSI+Mi43NDg8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWV0cmljc19fbWV0cmljIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWV0cmljc19fZGVzY3JpcHRpb24iPkNpdGVzY29yZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWV0cmljc19fc2NvcmUiPjMuNTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPC9kaXY+CiAgICA8IS0tIEVuZCBKb3VybmFsIE1ldHJpY3MgLS0+CjxkaXYgY2xhc3M9ImNmIG1iLTEiPgogICAgPCEtLSBTdGFydCBvZiBFZGl0b3JpYWwgbmV3cyBzZWN0aW9uIC0tPgogICAgPCEtLSBFbmQgb2YgRWRpdG9yaWFsIG5ld3Mgc2VjdGlvbiAtLT4KCiAgICA8IS0tIFN0YXJ0IEFydGljbGUgbGlzdGluZyB0YWJzIC0tPgogICAgPGRpdiBjbGFzcz0idGFicyBjZiBtYi0yIG10LTEiIGlkPSJ3ZC1qbmwtaG0tYXJ0LWxpc3QiPgogICAgCTwhLS0gU3RhcnQgVGFicyBsaXN0IC0tPgogICAgCTxkaXYgcm9sZT0idGFibGlzdCI+CgkgICAgCTxidXR0b24gcm9sZT0idGFiIgoJICAgICAgICAgICAgCQlhcmlhLXNlbGVjdGVkPSJmYWxzZSIKCSAgICAgICAgICAgIAkJYXJpYS1jb250cm9scz0ibW9zdC1yZWFkLXRhYiIKCSAgICAgICAgICAgIAkJaWQ9Im1vc3QtcmVhZCIKCQkJCQkJY2xhc3M9ImV2ZW50X3RhYnMiCgkgICAgICAgICAgICAJCXRhYmluZGV4PSItMSI+CgkgICAgICAgIAlNb3N0IHJlYWQKCSAgICAgIAkJPC9idXR0b24+CgkJCSAgIDxidXR0b24gcm9sZT0idGFiIgoJICAgICAgICAgICAgCQlhcmlhLXNlbGVjdGVkPSJ0cnVlIgoJICAgICAgICAgICAgCQlhcmlhLWNvbnRyb2xzPSJsYXRlc3QtYXJ0aWNsZXMtdGFiIgoJICAgICAgICAgICAgCQlpZD0ibGF0ZXN0LWFydGljbGVzIgoJCQkJCQljbGFzcz0iZXZlbnRfdGFicyI+CgkgICAgICAgIAlMYXRlc3QgYXJ0aWNsZXMKCSAgICAgIAkJPC9idXR0b24+CgkJCSAgIDxidXR0b24gcm9sZT0idGFiIgoJCSAgICAgICAgICAgIAlhcmlhLXNlbGVjdGVkPSJmYWxzZSIKCQkgICAgICAgICAgICAJYXJpYS1jb250cm9scz0icmV2aWV3LWFydGljbGVzLXRhYiIKCQkgICAgICAgICAgICAJaWQ9InJldmlldy1hcnRpY2xlcyIKCQkJCQkJY2xhc3M9ImV2ZW50X3RhYnMiCgkJICAgICAgICAgICAgCXRhYmluZGV4PSItMSI+CgkJICAgICAgICBSZXZpZXcgYXJ0aWNsZXMKCQkgICAgICAJPC9idXR0b24+CgkJCSAgIDxidXR0b24gcm9sZT0idGFiIgoJCQkJCQkJCWFyaWEtc2VsZWN0ZWQ9ImZhbHNlIgoJCQkJCQkJCWFyaWEtY29udHJvbHM9ImFjY2VwdGVkLW1hbnVzY3JpcHRzLXRhYiIKCQkJCQkJCQlpZD0iYWNjZXB0ZWQtbWFudXNjcmlwdHMiCgkJCQkJCQkJY2xhc3M9ImV2ZW50X3RhYnMiCgkJCQkJCQkJdGFiaW5kZXg9Ii0xIj4KCQkJCQkJCUFjY2VwdGVkIG1hbnVzY3JpcHRzCgkJCQkJCTwvYnV0dG9uPgoJCQkJCTxidXR0b24gcm9sZT0idGFiIgoJCQkJCQkJCWFyaWEtc2VsZWN0ZWQ9ImZhbHNlIgoJCQkJCQkJCWFyaWEtY29udHJvbHM9Im9wZW4tYWNjZXNzLWFydGljbGVzLXRhYiIKCQkJCQkJCQlpZD0ib3Blbi1hY2Nlc3MtYXJ0aWNsZXMiCgkJCQkJCQkJY2xhc3M9ImV2ZW50X3RhYnMiCgkJCQkJCQkJdGFiaW5kZXg9Ii0xIj4KCQkJCQkJCU9wZW4gQWNjZXNzCgkJCQkJCTwvYnV0dG9uPgoJCQkJCTwvZGl2PgogICAgCTwhLS0gRW5kIFRhYnMgbGlzdCAtLT4KICAgICAgICA8IS0tIFN0YXJ0IE1vc3QgcmVhZCB0YWJwYW5lbCAtLT4KCQk8ZGl2IHRhYmluZGV4PSIwIgogICAgICAgCQkJcm9sZT0idGFicGFuZWwiCiAgICAgICAJCQlpZD0ibW9zdC1yZWFkLXRhYiIKICAgICAgIAkJCWFyaWEtbGFiZWxsZWRieT0ibW9zdC1yZWFkIgogICAgICAgCQkJaGlkZGVuPSIiPgoJCQkgICA8ZGl2CiAgY2xhc3M9IgogICAgcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtcGx1cy1pY29uIHJldmVhbC1jbG9zZWQgcmV2ZWFsLWVuYWJsZWQKICAgIHJldmVhbC1jb250YWluZXItLWpubC10YWIKICAiCj4KICA8aDIgY2xhc3M9InRhYnBhbmVsX190aXRsZSI+CiAgICA8YQogICAgICBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgZXZlbnRfdGFicy1hY2NvcmRpb24iCiAgICAgIHRhYmluZGV4PSIwIgogICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgcm9sZT0iYnV0dG9uIgogICAgICA+TW9zdCByZWFkPC9hCiAgICA+CiAgPC9oMj4KICA8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCB0YWJwYW5lbF9fY29udGVudCIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPgogICAgPHA+CiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9IiIKICAgICAgICAgIGRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWxsIGFic3RyYWN0cyIKICAgICAgICAgIGNsYXNzPSJyZXZlYWwtYWxsLXRyaWdnZXIgbXItMiBzbWFsbCIKICAgICAgICAgIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWxsIGFic3RyYWN0cyIKICAgICAgICAgIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iaW4gdGhpcyB0YWIiCiAgICAgICAgICBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iaW4gdGhpcyB0YWIiCiAgICAgICAgPgogICAgICAgICAgT3BlbiBhbGwgYWJzdHJhY3RzPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iCiAgICAgICAgICAgID4sJm5ic3A7aW4gdGhpcyB0YWI8L3NwYW4KICAgICAgICAgID4KICAgICAgICA8L2E+CiAgICAgIDwvcD4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMDAyNi0xMzk0LzUyLzMvUzUxIiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgVGhlIHVuY2VydGFpbnR5IG9mIHRoZSBoYWxmLWxpZmU8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJUyBQb21tw6kgMjAxNSA8ZW0+TWV0cm9sb2dpYTwvZW0+IDxiPjUyPC9iPiBTNTE8L3A+CgkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItdXBwZXIiPgoJCQkJPGEgaHJlZj0iIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9IlRoZSB1bmNlcnRhaW50eSBvZiB0aGUgaGFsZi1saWZlIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iVGhlIHVuY2VydGFpbnR5IG9mIHRoZSBoYWxmLWxpZmUiCWRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWJzdHJhY3QiIGNsYXNzPSJyZXZlYWwtdHJpZ2dlciBtci0yIG5vd3JhcCIgZGF0YS1yZXZlYWwtdGV4dD0iT3BlbiBhYnN0cmFjdCI+T3BlbiBhYnN0cmFjdDwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMDAyNi0xMzk0LzUyLzMvUzUxL21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtUaGUgdW5jZXJ0YWludHkgb2YgdGhlIGhhbGYtbGlmZSZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzAwMjYtMTM5NC81Mi8zL1M1MS9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtUaGUgdW5jZXJ0YWludHkgb2YgdGhlIGhhbGYtbGlmZTwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+SGFsZi1saWZlIG1lYXN1cmVtZW50cyBvZiByYWRpb251Y2xpZGVzIGFyZSB1bmRlc2VydmVkbHkgcGVyY2VpdmVkIGFzICdlYXN5JyBhbmQgdGhlIGV4cGVyaW1lbnRhbCB1bmNlcnRhaW50aWVzIGFyZSBjb21tb25seSB1bmRlcmVzdGltYXRlZC4gRGF0YSBldmFsdWF0b3JzLCBzY2FubmluZyB0aGUgbGl0ZXJhdHVyZSwgYXJlIGZhY2VkIHdpdGggYmFkIGRvY3VtZW50YXRpb24sIGxhY2sgb2YgdHJhY2VhYmlsaXR5LCBpbmNvbXBsZXRlIHVuY2VydGFpbnR5IGJ1ZGdldHMgYW5kIGRpc2NyZXBhbnQgcmVzdWx0cy4gUG9vciBjb250cm9sIG9mIHVuY2VydGFpbnRpZXMgaGFzIGl0cyBpbXBsaWNhdGlvbnMgZm9yIHRoZSBlbmQtdXNlciBjb21tdW5pdHksIHZhcnlpbmcgZnJvbSBsaW1pdGF0aW9ucyB0byB0aGUgYWNjdXJhY3kgYW5kIHJlbGlhYmlsaXR5IG9mIG51Y2xlYXItYmFzZWQgYW5hbHl0aWNhbCB0ZWNobmlxdWVzIHRvIHRoZSBmdW5kYW1lbnRhbCBxdWVzdGlvbiB3aGV0aGVyIGhhbGYtbGl2ZXMgYXJlIGludmFyaWFibGUgb3Igbm90LiBUaGlzIHBhcGVyIGFkZHJlc3NlcyBzb21lIGlzc3VlcyBmcm9tIHRoZSB2aWV3cG9pbnRzIG9mIHRoZSB1c2VyIGNvbW11bml0eSBhbmQgb2YgdGhlIGRlY2F5IGRhdGEgcHJvdmlkZXIuIEl0IGFkZHJlc3NlcyB0aGUgcHJvcGFnYXRpb24gb2YgdGhlIHVuY2VydGFpbnR5IG9mIHRoZSBoYWxmLWxpZmUgaW4gYWN0aXZpdHkgbWVhc3VyZW1lbnRzIGFuZCBkaXNjdXNzZXMgZGlmZmVyZW50IHR5cGVzIG9mIGhhbGYtbGlmZSBtZWFzdXJlbWVudHMsIHR5cGljYWwgcGFyYW1ldGVycyBpbmZsdWVuY2luZyB0aGVpciB1bmNlcnRhaW50eSwgYSB0b29sIHRvIHByb3BhZ2F0ZSB0aGUgdW5jZXJ0YWludGllcyBhbmQgc3VnZ2VzdGlvbnMgZm9yIGEgbW9yZSBjb21wbGV0ZSByZXBvcnRpbmcgc3R5bGUuIFByb2JsZW1zIGFuZCBzb2x1dGlvbnMgYXJlIGlsbHVzdHJhdGVkIHdpdGggc3RyaWtpbmcgZXhhbXBsZXMgZnJvbSBsaXRlcmF0dXJlLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMDAyNi0xMzk0LzUyLzMvUzUxIj5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8wMDI2LTEzOTQvNTIvMy9TNTE8L2E+CjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0gcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtY2xvc2VkIHJldmVhbC1wbHVzLWljb24iPgogICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS1ib2R5Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0iZXllYnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlRoZSBmb2xsb3dpbmcgYXJ0aWNsZSBpcyA8L3NwYW4+PHNwYW4gY2xhc3M9InJlZCI+T3BlbiBhY2Nlc3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8wMDI2LTEzOTQvNTIvMS80MCIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIERpbWVuc2lvbmxlc3MgdW5pdHMgaW4gdGhlIFNJPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCVBldGVyIEogTW9ociBhbmQgV2lsbGlhbSBEIFBoaWxsaXBzIDIwMTUgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41MjwvYj4gNDA8L3A+CgkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItdXBwZXIiPgoJCQkJPGEgaHJlZj0iIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9IkRpbWVuc2lvbmxlc3MgdW5pdHMgaW4gdGhlIFNJIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iRGltZW5zaW9ubGVzcyB1bml0cyBpbiB0aGUgU0kiCWRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWJzdHJhY3QiIGNsYXNzPSJyZXZlYWwtdHJpZ2dlciBtci0yIG5vd3JhcCIgZGF0YS1yZXZlYWwtdGV4dD0iT3BlbiBhYnN0cmFjdCI+T3BlbiBhYnN0cmFjdDwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMDAyNi0xMzk0LzUyLzEvNDAvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFydGljbGU8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO0RpbWVuc2lvbmxlc3MgdW5pdHMgaW4gdGhlIFNJJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMDAyNi0xMzk0LzUyLzEvNDAvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7RGltZW5zaW9ubGVzcyB1bml0cyBpbiB0aGUgU0k8L3NwYW4+PC9hPgoJCQkJPC9kaXY+CgkJCTxkaXYgY2xhc3M9InJldmVhbC1jb250ZW50Ij4KCQkJCTxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB2aWV3LXRleHQtc21hbGwiPjxwPjxpPlRoZSBJbnRlcm5hdGlvbmFsIFN5c3RlbSBvZiBVbml0czwvaT4gKFNJKSBpcyBzdXBwb3NlZCB0byBiZSBjb2hlcmVudC4gVGhhdCBpcywgd2hlbiBhIGNvbWJpbmF0aW9uIG9mIHVuaXRzIGlzIHJlcGxhY2VkIGJ5IGFuIGVxdWl2YWxlbnQgdW5pdCwgdGhlcmUgaXMgbm8gYWRkaXRpb25hbCBudW1lcmljYWwgZmFjdG9yLiBIZXJlIHdlIGNvbnNpZGVyIGRpbWVuc2lvbmxlc3MgdW5pdHMgYXMgZGVmaW5lZCBpbiB0aGUgU0ksIGUuZy4gYW5ndWxhciB1bml0cyBsaWtlIHJhZGlhbnMgb3Igc3RlcmFkaWFucyBhbmQgY291bnRpbmcgdW5pdHMgbGlrZSByYWRpb2FjdGl2ZSBkZWNheXMgb3IgbW9sZWN1bGVzLiBXZSBzaG93IHRoYXQgYW4gaW5jb2hlcmVuY2UgbWF5IGFyaXNlIHdoZW4gZGlmZmVyZW50IHVuaXRzIG9mIHRoaXMgdHlwZSBhcmUgcmVwbGFjZWQgYnkgYSBzaW5nbGUgZGltZW5zaW9ubGVzcyB1bml0LCB0aGUgdW5pdCAnb25lJywgYW5kIHN1Z2dlc3QgaG93IHRvIHByb3Blcmx5IGluY2x1ZGUgc3VjaCB1bml0cyBpbnRvIHRoZSBTSSBpbiBvcmRlciB0byByZW1vdmUgdGhlIGluY29oZXJlbmNlLiBJbiBwYXJ0aWN1bGFyLCB3ZSBhcmd1ZSB0aGF0IHRoZSByYWRpYW4gaXMgdGhlIGFwcHJvcHJpYXRlIGNvaGVyZW50IHVuaXQgZm9yIGFuZ2xlcyBhbmQgdGhhdCBoZXJ0eiBpcyBub3QgYSBjb2hlcmVudCB1bml0IGluIHRoZSBTSS4gV2UgYWxzbyBkaXNjdXNzIGhvdyBpbmNsdWRpbmcgYW5ndWxhciBhbmQgY291bnRpbmcgdW5pdHMgYWZmZWN0cyB0aGUgZnVuZGFtZW50YWwgY29uc3RhbnRzLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMDAyNi0xMzk0LzUyLzEvNDAiPmh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzAwMjYtMTM5NC81Mi8xLzQwPC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FiMWZhZSIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIEFtb3VudCBvZiBzdWJzdGFuY2UgYW5kIHRoZSBtb2xlIGluIHRoZSBTSTwvYT4KICAgICAgICAgICAgPHAgY2xhc3M9InNtYWxsIGFydC1saXN0LWl0ZW0tbWV0YSI+CgkJCQlCZXJuZCBHw7x0dGxlciA8ZW0+ZXQgYWw8L2VtPiAyMDE5IDxlbT5NZXRyb2xvZ2lhPC9lbT4gPGI+NTY8L2I+IDA0NDAwMjwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iQW1vdW50IG9mIHN1YnN0YW5jZSBhbmQgdGhlIG1vbGUgaW4gdGhlIFNJIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iQW1vdW50IG9mIHN1YnN0YW5jZSBhbmQgdGhlIG1vbGUgaW4gdGhlIFNJIglkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFic3RyYWN0IiBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgbXItMiBub3dyYXAiIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWJzdHJhY3QiPk9wZW4gYWJzdHJhY3Q8L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYjFmYWUvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFydGljbGU8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO0Ftb3VudCBvZiBzdWJzdGFuY2UgYW5kIHRoZSBtb2xlIGluIHRoZSBTSSZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYjFmYWUvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7QW1vdW50IG9mIHN1YnN0YW5jZSBhbmQgdGhlIG1vbGUgaW4gdGhlIFNJPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5Gb2xsb3dpbmcgdGhlIHJldmlzaW9uIG9mIHRoZSBJbnRlcm5hdGlvbmFsIFN5c3RlbSBvZiBVbml0cyAoU0kpLCB0aGF0IHRha2VzIGVmZmVjdCBvbiAyMCBNYXkgMjAxOSwgdGhlIHVuaXQgbW9sZSBpcyBkZWZpbmVkIGJ5IHVzaW5nIGEgZml4ZWQgbnVtYmVyIG9mIGVsZW1lbnRhcnkgZW50aXRpZXMuIFRoaXMgbnVtYmVyIGlzIHRoZSBmaXhlZCBudW1lcmljYWwgdmFsdWUgb2YgdGhlIEF2b2dhZHJvIGNvbnN0YW50LCB3aGljaCBpcyB0aGUgZGVmaW5pbmcgY29uc3RhbnQgb2YgdGhlIHVuaXQgbW9sZS4gVGhpcyBkZWZpbml0aW9uIHdhcyBtYWRlIHBvc3NpYmxlIGJlY2F1c2UgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIEF2b2dhZHJvIGNvbnN0YW50IGhhZCByZWFjaGVkIGEgbGV2ZWwgb2YgcmVsYXRpdmUgdW5jZXJ0YWludHkgdGhhdCBhbGxvd2VkIGl0cyB2YWx1ZSB0byBiZSBmaXhlZCBhbmQsIGF0IHRoZSBzYW1lIHRpbWUsIHNhZmVndWFyZCBjb250aW51aXR5IG9mIG1lYXN1cmVtZW50IHJlc3VsdHMgYmVmb3JlIGFuZCBhZnRlciB0aGUgZGVmaW5pdGlvbi4gVGhlIG1vdGl2YXRpb24gZm9yIHRoZSByZXZpc2lvbiBvZiB0aGUgU0kgYW5kIHRoZSBtb2xlIGluIHBhcnRpY3VsYXIgd2lsbCBiZSBleHBsYWluZWQgYW5kIHRoZSBleHBlcmltZW50YWwgd29yayB0aGF0IGFsbG93ZWQgaXQgaXMgc3VtbWFyaXplZC48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYjFmYWUiPmh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYjFmYWU8L2E+CjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0gcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtY2xvc2VkIHJldmVhbC1wbHVzLWljb24iPgogICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS1ib2R5Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0iZXllYnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlRoZSBmb2xsb3dpbmcgYXJ0aWNsZSBpcyA8L3NwYW4+PHNwYW4gY2xhc3M9InJlZCI+T3BlbiBhY2Nlc3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWE5NTBhIiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgVGhlIENPREFUQSAyMDE3IHZhbHVlcyBvZiA8aT5oPC9pPiwgPGk+ZTwvaT4sIDxpPms8L2k+LCBhbmQgPGk+TjwvaT48c3ViPkE8L3N1Yj4gZm9yIHRoZSByZXZpc2lvbiBvZiB0aGUgU0k8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJRCBCIE5ld2VsbCA8ZW0+ZXQgYWw8L2VtPiAyMDE4IDxlbT5NZXRyb2xvZ2lhPC9lbT4gPGI+NTU8L2I+IEwxMzwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iVGhlIENPREFUQSAyMDE3IHZhbHVlcyBvZiBoLCBlLCBrLCBhbmQgTkEgZm9yIHRoZSByZXZpc2lvbiBvZiB0aGUgU0kiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZC1vcGVuPSJUaGUgQ09EQVRBIDIwMTcgdmFsdWVzIG9mIGgsIGUsIGssIGFuZCBOQSBmb3IgdGhlIHJldmlzaW9uIG9mIHRoZSBTSSIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWE5NTBhL21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtUaGUgQ09EQVRBIDIwMTcgdmFsdWVzIG9mIGgsIGUsIGssIGFuZCBOQSBmb3IgdGhlIHJldmlzaW9uIG9mIHRoZSBTSSZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYTk1MGEvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7VGhlIENPREFUQSAyMDE3IHZhbHVlcyBvZiBoLCBlLCBrLCBhbmQgTkEgZm9yIHRoZSByZXZpc2lvbiBvZiB0aGUgU0k8L3NwYW4+PC9hPgoJCQkJPC9kaXY+CgkJCTxkaXYgY2xhc3M9InJldmVhbC1jb250ZW50Ij4KCQkJCTxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB2aWV3LXRleHQtc21hbGwiPjxwPlN1ZmZpY2llbnQgcHJvZ3Jlc3MgdG93YXJkcyByZWRlZmluaW5nIHRoZSBJbnRlcm5hdGlvbmFsIFN5c3RlbSBvZiBVbml0cyAoU0kpIGluIHRlcm1zIG9mIGV4YWN0IHZhbHVlcyBvZiBmdW5kYW1lbnRhbCBjb25zdGFudHMgaGFzIGJlZW4gYWNoaWV2ZWQuIEV4YWN0IHZhbHVlcyBvZiB0aGUgUGxhbmNrIGNvbnN0YW50IDxpPmg8L2k+LCBlbGVtZW50YXJ5IGNoYXJnZSA8aT5lPC9pPiwgQm9sdHptYW5uIGNvbnN0YW50IDxpPms8L2k+LCBhbmQgQXZvZ2Fkcm8gY29uc3RhbnQgPGk+TjwvaT48c3ViPkE8L3N1Yj4gZnJvbSB0aGUgQ09EQVRBIDIwMTcgU3BlY2lhbCBBZGp1c3RtZW50IG9mIHRoZSBGdW5kYW1lbnRhbCBDb25zdGFudHMgYXJlIHByZXNlbnRlZCBoZXJlLiBUaGVzZSB2YWx1ZXMgYXJlIHJlY29tbWVuZGVkIHRvIHRoZSAyNnRoIEdlbmVyYWwgQ29uZmVyZW5jZSBvbiBXZWlnaHRzIGFuZCBNZWFzdXJlcyB0byBmb3JtIHRoZSBmb3VuZGF0aW9uIG9mIHRoZSByZXZpc2VkIFNJLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FhOTUwYSI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FhOTUwYTwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzAwMjYtMTM5NC81Mi8zL1MzIiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgVW5jZXJ0YWludHkgb2YgbnVjbGVhciBjb3VudGluZzwvYT4KICAgICAgICAgICAgPHAgY2xhc3M9InNtYWxsIGFydC1saXN0LWl0ZW0tbWV0YSI+CgkJCQlTIFBvbW3DqSA8ZW0+ZXQgYWw8L2VtPiAyMDE1IDxlbT5NZXRyb2xvZ2lhPC9lbT4gPGI+NTI8L2I+IFMzPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJVbmNlcnRhaW50eSBvZiBudWNsZWFyIGNvdW50aW5nIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iVW5jZXJ0YWludHkgb2YgbnVjbGVhciBjb3VudGluZyIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8wMDI2LTEzOTQvNTIvMy9TMy9tZXRhIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iVmlldyBhcnRpY2xlIj4gPHNwYW4gY2xhc3M9Imljb24tYXJ0aWNsZSI+PC9zcGFuPlZpZXcgYXJ0aWNsZTxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7VW5jZXJ0YWludHkgb2YgbnVjbGVhciBjb3VudGluZyZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzAwMjYtMTM5NC81Mi8zL1MzL3BkZiIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlBERiI+PHNwYW4JY2xhc3M9Imljb24tZmlsZS1wZGYiPjwvc3Bhbj5QREY8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1VuY2VydGFpbnR5IG9mIG51Y2xlYXIgY291bnRpbmc8L3NwYW4+PC9hPgoJCQkJPC9kaXY+CgkJCTxkaXYgY2xhc3M9InJldmVhbC1jb250ZW50Ij4KCQkJCTxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB2aWV3LXRleHQtc21hbGwiPjxwPk51Y2xlYXIgY291bnRpbmcgaXMgYWZmZWN0ZWQgYnkgcHVsc2UgcGlsZXVwIGFuZCBzeXN0ZW0gZGVhZCB0aW1lLCB3aGljaCBpbmR1Y2UgcmF0ZS1yZWxhdGVkIGNvdW50IGxvc3MgYW5kIGFsdGVyIHRoZSBzdGF0aXN0aWNhbCBwcm9wZXJ0aWVzIG9mIHRoZSBjb3VudGluZyBwcm9jZXNzLiBGdW5kYW1lbnRhbCBlcXVhdGlvbnPCoGFyZSBwcmVzZW50ZWQgdG8gcHJlZGljdCBkZXZpYXRpb25zIGZyb20gUG9pc3NvbiBzdGF0aXN0aWNzIGR1ZSB0byBub24tcmFuZG9tIGNvdW50IGxvc3MgaW4gbnVjbGVhciBjb3VudGVycyBhbmQgc3BlY3Ryb21ldGVycy4gVGhyb3VnaHB1dCBhbmQgZGlzcGVyc2lvbiBvZiBjb3VudHMgYXJlIHN0dWRpZWQgZm9yIHN5c3RlbXMgd2l0aCBwaWxldXAsIGV4dGVuZGluZyBhbmQgbm9uLWV4dGVuZGluZyBkZWFkIHRpbWUsIGJlZm9yZSBhbmQgYWxzbyBhZnRlciBjb21wZW5zYXRpb24gZm9yIGNvdW50IGxvc3MuIEVxdWF0aW9uc8KgYXJlIHByb3ZpZGVkIGZvciByYW5kb20gZnJhY3Rpb25zIG9mIHRoZSBvdXRwdXQgZXZlbnRzLCBhcHBsaWNhYmxlIHRvIHNwZWN0cm9tZXRyeSBhcHBsaWNhdGlvbnMuIE1ldGhvZHMgZm9yIGxvc3MgY29tcGVuc2F0aW9uIGFyZSBkaXNjdXNzZWQsIGluY2x1ZGluZyBpbnZlcnNpb24gb2YgdGhlIHRocm91Z2hwdXQgZXF1YXRpb24sIGxpdmUtdGltZSBjb3VudGluZyBhbmQgbG9zcy1mcmVlIGNvdW50aW5nLiBTZWNvbmRhcnkgZWZmZWN0cyBpbiBsaXZlLXRpbWUgY291bnRpbmcgYXJlIGFkZHJlc3NlZDogcmVzaWR1YWwgaW50ZXJmZXJlbmNlIGZyb20gcGlsZXVwIGluIHN5c3RlbXMgd2l0aCBpbXBvc2VkIGRlYWQgdGltZXMgYW5kIGVycm9ycyBkdWUgdG8gdmFyeWluZyBjb3VudCByYXRlIHdoZW4gbWVhc3VyaW5nIHNob3J0LWxpdmVkIHJhZGlvbnVjbGlkZXMuPC9wPjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8wMDI2LTEzOTQvNTIvMy9TMyI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMDAyNi0xMzk0LzUyLzMvUzM8L2E+CjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0gcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtY2xvc2VkIHJldmVhbC1wbHVzLWljb24iPgogICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS1ib2R5Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0iZXllYnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlRoZSBmb2xsb3dpbmcgYXJ0aWNsZSBpcyA8L3NwYW4+PHNwYW4gY2xhc3M9InJlZCI+T3BlbiBhY2Nlc3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWIxZTY4IiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgVGhlIENvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lIChVVEMpPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCUcgUGFuZmlsbyBhbmQgRiBBcmlhcyAyMDE5IDxlbT5NZXRyb2xvZ2lhPC9lbT4gPGI+NTY8L2I+IDA0MjAwMTwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iVGhlIENvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lIChVVEMpIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iVGhlIENvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lIChVVEMpIglkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFic3RyYWN0IiBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgbXItMiBub3dyYXAiIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWJzdHJhY3QiPk9wZW4gYWJzdHJhY3Q8L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYjFlNjgvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFydGljbGU8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1RoZSBDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSAoVVRDKSZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYjFlNjgvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7VGhlIENvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lIChVVEMpPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5Db29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSAoVVRDKSBoYXMgY29uc2lkZXJhYmx5IGNoYW5nZWQgaW4gcmVjZW50IHllYXJzLiBUaGUgZXZvbHV0aW9uIG9mIFVUQyBmb2xsb3dzIHRoZSBzY2llbnRpZmljIGFuZCBpbmR1c3RyaWFsIHByb2dyZXNzIGJ5IGRldmVsb3BpbmcgYXBwcm9wcmlhdGUgbW9kZWxzLCBtb3JlIGFkYXB0ZWQgY2FsY3VsYXRpb24gYWxnb3JpdGhtcywgbW9yZSBlZmZpY2llbnQgYW5kIHJhcGlkIGRpc3NlbWluYXRpb24gcHJvY2Vzc2VzIGFuZCBhIHdlbGwgZGVmaW5lZCB0cmFjZWFiaWxpdHkgY2hhaW4uIFRoZSBlbm9ybW91cyB0ZWNobmljYWwgcHJvZ3Jlc3Mgd29ybGR3aWRlIGhhcyByZXN1bHRlZCBpbiBhbiBpbXByZXNzaXZlIG51bWJlciBvZiBhdG9taWMgY2xvY2tzIG5vdyBhdmFpbGFibGUgZm9yIFVUQyBjYWxjdWxhdGlvbi4gVGhlIHJlZmluZWQgdGltZSBhbmQgZnJlcXVlbmN5IHRyYW5zZmVyIHRlY2huaXF1ZXMgYXJlIGFwcHJvYWNoaW5nIHRoZSBhY2N1cmFjeSByZXF1ZXN0ZWQgZm9yIHRoZSBuZXcgZGVmaW5pdGlvbiBvZiB0aGUgU0kgc2Vjb25kLiBUaGUgbW9yZSByZWd1bGFyIG9wZXJhdGlvbiBvZiBwcmltYXJ5IGZyZXF1ZW5jeSBzdGFuZGFyZHMgKFBGUykgaW5jcmVhc2VzIHRoZSBhY2N1cmFjeSBvZiBVVEMgYW5kIG9wZW5zIGEgcG9zc2libGUgbmV3IGRldmVsb3BtZW50IGZvciB0aW1lIHNjYWxlIGFsZ29yaXRobXMuIEZyb20gdGhlIG1ldHJvbG9naWNhbCBwb2ludCBvZiB2aWV3IGFsbCB0aGUgaW5ncmVkaWVudHMgYXJlIGF2YWlsYWJsZSBmb3IgbWFqb3IgaW1wcm92ZW1lbnRzIHRvIFVUQy4gRGlzc2VtaW5hdGlvbiBvZiBVVEMgaXMgZG9uZSBieSB0aGUgbW9udGhseSBwdWJsaWNhdGlvbiBvZiByZXN1bHRzIGluIEJJUE0gPGk+Q2lyY3VsYXIgVDwvaT4uIFRoaXMgZG9jdW1lbnQgbWFrZXMgYSBxdWFsaXR5IGV2YWx1YXRpb24gb2YgbG9jYWwgcmVwcmVzZW50YXRpb25zIG9mIFVUQywgbmFtZWQgVVRDKDxpPms8L2k+KSwgaW4gbmF0aW9uYWwgaW5zdGl0dXRlcywgYW5kIG90aGVyIG9yZ2FuaXphdGlvbnMsIGJ5IGdpdmluZyB0aGUgZXZvbHV0aW9uIG9mIHRoZWlyIG9mZnNldHMgcmVsYXRpdmUgdG8gVVRDIGFuZCB0aGVpciByZXNwZWN0aXZlIHVuY2VydGFpbnRpZXMuIFRoZSBjbG9jayBtb2RlbHMgYWRvcHRlZCBhbmQgdGhlIHRpbWUgdHJhbnNmZXIgdGVjaG5pcXVlcyBoYXZlIHByb2dyZXNzaXZlbHkgaW1wcm92ZWQgb3ZlciB0aGUgeWVhcnMsIGFzc3VyaW5nIHRoZSBsb25nLXRlcm0gc3RhYmlsaXR5IG9mIFVUQy4gRWFjaCBjb21wdXRhdGlvbiBvZiBVVEMgcHJvY2Vzc2VzIGRhdGEgb3ZlciBvbmUgbW9udGggd2l0aCBmaXZlLWRheSBzYW1wbGluZyBhbmQgcHVibGljYXRpb24uIEEgcmFwaWQgc29sdXRpb24gb2YgVVRDIChVVENyKSBoYXMgZXhpc3RlZCBzaW5jZSAyMDEzLCBhbmQgY29uc2lzdHMgb2YgdGhlIHByb2Nlc3Npbmcgb2YgZGFpbHkgc2FtcGxlZCBkYXRhIG92ZXIgZm91ciBjb25zZWN1dGl2ZSB3ZWVrcywgY29tcHV0ZWQgYW5kIHB1Ymxpc2hlZCB3ZWVrbHkuIEl0IGdpdmVzIHF1aWNrIGFjY2VzcyB0byBVVEMsIGFuZCBhbGxvd3MgcGFydGljaXBhdGluZyBsYWJvcmF0b3JpZXMgdG8gYmV0dGVyIG1vbml0b3IgdGhlIG9mZnNldHMgb2YgdGhlaXIgcmVhbGl6YXRpb25zIHRvIHRoZSByZWZlcmVuY2UgVVRDLiBUaGUgdHJhZGl0aW9uYWwgbW9udGhseSBwdWJsaWNhdGlvbiwgY29udGFpbmluZyByZXN1bHRzIG9mIGFsbCB0aGUgbGFib3JhdG9yaWVzIGNvbnRyaWJ1dGluZyBkYXRhIHRvIHRoZSBCSVBNIGZvciB0aGUgY29tcHV0YXRpb24gb2YgVVRDIHdhcyBjb21wbGVtZW50ZWQgYWZ0ZXIgdGhlIGVzdGFibGlzaG1lbnQgb2YgdGhlIE11dHVhbCBSZWNvZ25pdGlvbiBBcnJhbmdlbWVudCBvZiB0aGUgSW50ZXJuYXRpb25hbCBDb21taXR0ZWUgb24gV2VpZ2h0cyBhbmQgTWVhc3VyZXMgKENJUE0gTVJBKS4gVGhpcyB0aW1lIGNvbXBhcmlzb24sIHdoaWNoIGhhcyBiZWVuIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgQklQTSBzaW5jZSAxOTg4LCBhZGRlZCBhcyBhIGNvbXBsZW1lbnQgdGhlIGtleSBjb21wYXJpc29uIG9uIHRpbWUgZGVmaW5lZCBieSB0aGUgQ29uc3VsdGF0aXZlIENvbW1pdHRlZSBmb3IgVGltZSBhbmQgRnJlcXVlbmN5IChDQ1RGKSBpbiAyMDA2IGFzIENDVEYtSzAwMS5VVEMsIHdoZXJlIHRoZSByZXN1bHRzIHB1Ymxpc2hlZCBhcmUgdGhvc2Ugb2YgbmF0aW9uYWwgbWV0cm9sb2d5IGluc3RpdHV0ZXMgKE5NSXMpIHNpZ25hdG9yaWVzIG9mIHRoZSBDSVBNIE1SQSwgb3IgZGVzaWduYXRlZCBpbnN0aXR1dGVzIChESXMpLiBUaGUgdHJhY2VhYmlsaXR5IGlzc3VlcyBhcmUgZm9ybWFsaXplZCBpbiB0aGUgZnJhbWV3b3JrIG9mIHRoZSBDSVBNIE1SQS4gVGhlIGRldmVsb3BtZW50IG9mIHRpbWUgbWV0cm9sb2d5IGFjdGl2aXRpZXMgaW4gdGhlIGRpZmZlcmVudCBtZXRyb2xvZ3kgcmVnaW9ucywgc3VwcG9ydHMgdGhlIGFjdGlvbnMgb2YgdGhlIEJJUE0gdGltZSBkZXBhcnRtZW50IHRvIGltcHJvdmUgdGhlIGFjY3VyYWN5IG9mIFtVVEPigJNVVEMoPGk+azwvaT4pXSwgd2hlcmUgdGhlIGNvb3JkaW5hdGlvbiB3aXRoIHRoZSBSZWdpb25hbCBNZXRyb2xvZ3kgT3JnYW5pemF0aW9ucyAoUk1PcykgaGFzIGEga2V5IHJvbGUuIFRoaXMgcGFwZXIgcHJlc2VudHMgYW4gb3ZlcnZpZXcgb2YgVVRDLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FiMWU2OCI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FiMWU2ODwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzdiYzIiIGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRpdGxlIGV2ZW50X21haW4tbGluayI+CiAgICAgICAgICAgICAgICBPbiB0aGUgZGltZW5zaW9uIG9mIGFuZ2xlcyBhbmQgdGhlaXIgdW5pdHM8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJUGV0ZXIgSiBNb2hyIDxlbT5ldCBhbDwvZW0+IDIwMjIgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41OTwvYj4gMDUzMDAxPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJPbiB0aGUgZGltZW5zaW9uIG9mIGFuZ2xlcyBhbmQgdGhlaXIgdW5pdHMiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZC1vcGVuPSJPbiB0aGUgZGltZW5zaW9uIG9mIGFuZ2xlcyBhbmQgdGhlaXIgdW5pdHMiCWRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWJzdHJhY3QiIGNsYXNzPSJyZXZlYWwtdHJpZ2dlciBtci0yIG5vd3JhcCIgZGF0YS1yZXZlYWwtdGV4dD0iT3BlbiBhYnN0cmFjdCI+T3BlbiBhYnN0cmFjdDwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjN2JjMi9tZXRhIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iVmlldyBhcnRpY2xlIj4gPHNwYW4gY2xhc3M9Imljb24tYXJ0aWNsZSI+PC9zcGFuPlZpZXcgYXJ0aWNsZTxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7T24gdGhlIGRpbWVuc2lvbiBvZiBhbmdsZXMgYW5kIHRoZWlyIHVuaXRzJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjN2JjMi9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtPbiB0aGUgZGltZW5zaW9uIG9mIGFuZ2xlcyBhbmQgdGhlaXIgdW5pdHM8L3NwYW4+PC9hPgoJCQkJPC9kaXY+CgkJCTxkaXYgY2xhc3M9InJldmVhbC1jb250ZW50Ij4KCQkJCTxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB2aWV3LXRleHQtc21hbGwiPjxwPldlIHNob3cgdGhlIGltcGxpY2F0aW9ucyBvZiBhbmdsZXMgaGF2aW5nIHRoZWlyIG93biBkaW1lbnNpb24sIHdoaWNoIGZhY2lsaXRhdGVzIGEgY29uc2lzdGVudCB1c2Ugb2YgdW5pdHMgYXMgaXMgZG9uZSBmb3IgbGVuZ3RocywgbWFzc2VzLCBhbmQgb3RoZXIgcGh5c2ljYWwgcXVhbnRpdGllcy4gV2UgZG8gdGhpcyBieSBleGFtaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgY29tcGxldGUgdHJpZ29ub21ldHJpYyBhbmQgZXhwb25lbnRpYWwgZnVuY3Rpb25zIHRoYXQgYXJlIGdlbmVyYWxpemF0aW9ucyBvZiB0aGUgY29ycmVzcG9uZGluZyBmdW5jdGlvbnMgdGhhdCBoYXZlIGRpbWVuc2lvbmxlc3MgbnVtYmVycyBmb3IgYXJndW1lbnRzLiBUaGVzZSBnZW5lcmFsaXphdGlvbnMgcHJvdmlkZSBmdW5jdGlvbnMgb2YgYW5nbGVzIHdpdGggdGhlIGRpbWVuc2lvbiBvZiBhbmdsZSBhcyBhcmd1bWVudHMsIGJ1dCB3aXRoIG5vIHJlZmVyZW5jZSB0byB1bml0cy4gVGhpcyBwYXJhbGxlbHMgbW9zdCBlcXVhdGlvbnMgaW4gcGh5c2ljcyB3aGljaCBhcmUgdmFsaWQgZm9yIGFueSB1bml0cy4gVGhpcyBwcm9wZXJ0eSBhbHNvIHByb3ZpZGVzIGEgY29uc2lzdGVudCBmcmFtZXdvcmsgZm9yIGluY2x1ZGluZyBxdWFudGl0aWVzIGludm9sdmluZyBhbmdsZXMgaW4gY29tcHV0ZXIgYWxnZWJyYSBwcm9ncmFtcyB3aXRob3V0IGFtYmlndWl0eSB0aGF0IG1heSBvdGhlcndpc2Ugb2NjdXIuIFRoaXMgaXMgaW4gY29udHJhc3QgdG8gdGhlIGNvbnZlbnRpb25hbCBwcmFjdGljZSBpbiBzY2llbnRpZmljIGFwcGxpY2F0aW9ucyBpbnZvbHZpbmcgdHJpZ29ub21ldHJpYyBvciBleHBvbmVudGlhbCBmdW5jdGlvbnMgb2YgYW5nbGVzIHdoZXJlIGl0IGlzIGFzc3VtZWQgdGhhdCB0aGUgYXJndW1lbnQgaXMgdGhlIG51bWVyaWNhbCBwYXJ0IG9mIHRoZSBhbmdsZSB3aGVuIGV4cHJlc3NlZCBpbiB1bml0cyBvZiByYWRpYW5zLiBUaGF0IHByYWN0aWNlIGFsc28gYXNzdW1lcyB0aGF0IHRoZSBmdW5jdGlvbnMgYXJlIHRoZSBjb3JyZXNwb25kaW5nIHJhZGlhbi1iYXNlZCB2ZXJzaW9ucy4gVGhlc2UgYXNzdW1wdGlvbnMgYWxsb3cgYW5nbGVzIHRvIGJlIHRyZWF0ZWQgYXMgaWYgdGhleSBoYWQgbm8gZGltZW5zaW9uIGFuZCBubyB1bml0cywgYW4gYXBwcm9hY2ggdGhhdCBjYW4gbGVhZCB0byBpbXBvcnRhbnQgZGlmZmljdWx0aWVzIHN1Y2ggYXMgaW5jb3JyZWN0IGZhY3RvcnMgb2YgMjxpPs+APC9pPiwgd2hpY2ggY2FuIGJlIGF2b2lkZWQgYnkgYXNzaWduaW5nIGFuIGluZGVwZW5kZW50IGRpbWVuc2lvbiB0byBhbmdsZXMuPC9wPjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM3YmMyIj5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM3YmMyPC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMDAyNi0xMzk0LzUzLzUvQTQ2IiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgVGhlIHdhdHQgb3IgS2liYmxlIGJhbGFuY2U6IGEgdGVjaG5pcXVlIGZvciBpbXBsZW1lbnRpbmcgdGhlIG5ldyBTSSBkZWZpbml0aW9uIG9mIHRoZSB1bml0IG9mIG1hc3M8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJSWFuIEEgUm9iaW5zb24gYW5kIFN0ZXBoYW4gU2NobGFtbWluZ2VyIDIwMTYgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41MzwvYj4gQTQ2PC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJUaGUgd2F0dCBvciBLaWJibGUgYmFsYW5jZTogYSB0ZWNobmlxdWUgZm9yIGltcGxlbWVudGluZyB0aGUgbmV3IFNJIGRlZmluaXRpb24gb2YgdGhlIHVuaXQgb2YgbWFzcyIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IlRoZSB3YXR0IG9yIEtpYmJsZSBiYWxhbmNlOiBhIHRlY2huaXF1ZSBmb3IgaW1wbGVtZW50aW5nIHRoZSBuZXcgU0kgZGVmaW5pdGlvbiBvZiB0aGUgdW5pdCBvZiBtYXNzIglkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFic3RyYWN0IiBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgbXItMiBub3dyYXAiIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWJzdHJhY3QiPk9wZW4gYWJzdHJhY3Q8L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzAwMjYtMTM5NC81My81L0E0Ni9tZXRhIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iVmlldyBhcnRpY2xlIj4gPHNwYW4gY2xhc3M9Imljb24tYXJ0aWNsZSI+PC9zcGFuPlZpZXcgYXJ0aWNsZTxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7VGhlIHdhdHQgb3IgS2liYmxlIGJhbGFuY2U6IGEgdGVjaG5pcXVlIGZvciBpbXBsZW1lbnRpbmcgdGhlIG5ldyBTSSBkZWZpbml0aW9uIG9mIHRoZSB1bml0IG9mIG1hc3MmbmJzcDs8L3NwYW4+PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8wMDI2LTEzOTQvNTMvNS9BNDYvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7VGhlIHdhdHQgb3IgS2liYmxlIGJhbGFuY2U6IGEgdGVjaG5pcXVlIGZvciBpbXBsZW1lbnRpbmcgdGhlIG5ldyBTSSBkZWZpbml0aW9uIG9mIHRoZSB1bml0IG9mIG1hc3M8L3NwYW4+PC9hPgoJCQkJPC9kaXY+CgkJCTxkaXYgY2xhc3M9InJldmVhbC1jb250ZW50Ij4KCQkJCTxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB2aWV3LXRleHQtc21hbGwiPjxwPlRoZSByZWRlZmluaXRpb24gb2YgdGhlIFNJIHVuaXQgb2YgbWFzcyBpbiB0ZXJtcyBvZiBhIGZpeGVkIHZhbHVlIG9mIHRoZSBQbGFuY2sgY29uc3RhbnQgaGFzIGJlZW4gbWFkZSBwb3NzaWJsZSBieSB0aGUgS2liYmxlIGJhbGFuY2UsIHByZXZpb3VzbHkga25vd24gYXMgdGhlIHdhdHQgYmFsYW5jZS4gT25jZSB0aGUgbmV3IGRlZmluaXRpb24gaGFzIGJlZW4gYWRvcHRlZCwgdGhlIEtpYmJsZSBiYWxhbmNlIHRlY2huaXF1ZSB3aWxsIHBlcm1pdCB0aGUgcmVhbGlzYXRpb24gb2YgdGhlIG1hc3MgdW5pdCBvdmVyIGEgcmFuZ2UgZnJvbSBtaWxsaWdyYW1zIHRvIGtpbG9ncmFtcy4gV2UgZGVzY3JpYmUgdGhlIHRoZW9yeSB1bmRlcmx5aW5nIHRoZSBLaWJibGUgYmFsYW5jZSBhbmQgcHJhY3RpY2FsIHRlY2huaXF1ZXMgcmVxdWlyZWQgdG8gY29uc3RydWN0IHN1Y2ggYW4gaW5zdHJ1bWVudCB0byByZWxhdGUgYSBtYWNyb3Njb3BpYyBwaHlzaWNhbCBtYXNzIHRvIHRoZSBQbGFuY2sgY29uc3RhbnQgd2l0aCBhbiB1bmNlcnRhaW50eSwgd2hpY2ggaXMgYWNoaWV2YWJsZSBhdCBwcmVzZW50LCBpbiB0aGUgcmVnaW9uIG9mIDIgcGFydHMgaW4gMTA8c3VwPjg8L3N1cD4uIEEgbnVtYmVyIG9mIEtpYmJsZSBiYWxhbmNlcyBoYXZlIGVpdGhlciBiZWVuIGJ1aWx0IG9yIGFyZSB1bmRlciBjb25zdHJ1Y3Rpb24gYW5kIHdlIGNvbXBhcmUgdGhlIHByaW5jaXBhbCBmZWF0dXJlcyBvZiB0aGVzZSBiYWxhbmNlcy48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzAwMjYtMTM5NC81My81L0E0NiI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMDAyNi0xMzk0LzUzLzUvQTQ2PC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FhYTMwMiIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIFRoZSBDSVBNIGxpc3Qgb2YgcmVjb21tZW5kZWQgZnJlcXVlbmN5IHN0YW5kYXJkIHZhbHVlczogZ3VpZGVsaW5lcyBhbmQgcHJvY2VkdXJlczwvYT4KICAgICAgICAgICAgPHAgY2xhc3M9InNtYWxsIGFydC1saXN0LWl0ZW0tbWV0YSI+CgkJCQlGcml0eiBSaWVobGUgPGVtPmV0IGFsPC9lbT4gMjAxOCA8ZW0+TWV0cm9sb2dpYTwvZW0+IDxiPjU1PC9iPiAxODg8L3A+CgkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItdXBwZXIiPgoJCQkJPGEgaHJlZj0iIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9IlRoZSBDSVBNIGxpc3Qgb2YgcmVjb21tZW5kZWQgZnJlcXVlbmN5IHN0YW5kYXJkIHZhbHVlczogZ3VpZGVsaW5lcyBhbmQgcHJvY2VkdXJlcyIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IlRoZSBDSVBNIGxpc3Qgb2YgcmVjb21tZW5kZWQgZnJlcXVlbmN5IHN0YW5kYXJkIHZhbHVlczogZ3VpZGVsaW5lcyBhbmQgcHJvY2VkdXJlcyIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWFhMzAyL21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtUaGUgQ0lQTSBsaXN0IG9mIHJlY29tbWVuZGVkIGZyZXF1ZW5jeSBzdGFuZGFyZCB2YWx1ZXM6IGd1aWRlbGluZXMgYW5kIHByb2NlZHVyZXMmbmJzcDs8L3NwYW4+PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWFhMzAyL3BkZiIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlBERiI+PHNwYW4JY2xhc3M9Imljb24tZmlsZS1wZGYiPjwvc3Bhbj5QREY8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1RoZSBDSVBNIGxpc3Qgb2YgcmVjb21tZW5kZWQgZnJlcXVlbmN5IHN0YW5kYXJkIHZhbHVlczogZ3VpZGVsaW5lcyBhbmQgcHJvY2VkdXJlczwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+QSA8aT5sPC9pPmlzdCA8aT5vPC9pPmYgc3RhbmRhcmQgcmVmZXJlbmNlIDxpPmY8L2k+cmVxdWVuY3kgdmFsdWVzIChMb0YpIG9mIHF1YW50dW0gdHJhbnNpdGlvbnMgZnJvbSB0aGUgbWljcm93YXZlIHRvIHRoZSBvcHRpY2FsIHJlZ2ltZSBoYXMgYmVlbiByZWNvbW1lbmRlZCBieSB0aGUgSW50ZXJuYXRpb25hbCBDb21taXR0ZWUgZm9yIFdlaWdodHMgYW5kIE1lYXN1cmVzIChDb21pdMOpIGludGVybmF0aW9uYWwgZGVzIHBvaWRzIGV0IG1lc3VyZXMsIENJUE0pIGZvciB1c2UgaW4gYmFzaWMgcmVzZWFyY2gsIHRlY2hub2xvZ3ksIGFuZCBmb3IgdGhlIG1ldHJvbG9neSBvZiB0aW1lLCBmcmVxdWVuY3kgYW5kIGxlbmd0aC4gVGhlIENJUE0gTG9GIGNvbnRhaW5zIGVudHJpZXMgdGhhdCBhcmUgcmVjb21tZW5kZWQgYXMgc2Vjb25kYXJ5IHJlcHJlc2VudGF0aW9ucyBvZiB0aGUgc2Vjb25kIGluIHRoZSBJbnRlcm5hdGlvbmFsIFN5c3RlbSBvZiBVbml0cywgYW5kIGVudHJpZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBzZXJ2ZSBhcyByZWFsaXphdGlvbnMgb2YgdGhlIGRlZmluaXRpb24gb2YgdGhlIG1ldHJlLiBUaGUgaGlzdG9yaWNhbCBwZXJzcGVjdGl2ZSB0aGF0IGxlZCB0byB0aGUgQ0lQTSBMb0YgaXMgb3V0bGluZWQuIFByb2NlZHVyZXMgaGF2ZSBiZWVuIGRldmVsb3BlZCBmb3IgdXBkYXRpbmcgZXhpc3RpbmcsIGFuZCB2YWxpZGF0aW5nIG5ldywgZW50cmllcyBpbnRvIHRoZSBDSVBNIExvRi4gVGhlIENJUE0gTG9GIG1pZ2h0IHNlcnZlIGFzIGFuIGVudHJ5IGZvciBhIGZ1dHVyZSByZWRlZmluaXRpb24gb2YgdGhlIHNlY29uZCBieSBhbiBvcHRpY2FsIHRyYW5zaXRpb24uPC9wPjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWFhMzAyIj5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWFhMzAyPC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FiMmE4ZCIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIEFzeW1tZXRyaWNhbCB1bmNlcnRhaW50aWVzPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCUFudG9uaW8gUG9zc29sbyA8ZW0+ZXQgYWw8L2VtPiAyMDE5IDxlbT5NZXRyb2xvZ2lhPC9lbT4gPGI+NTY8L2I+IDA0NTAwOTwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iQXN5bW1ldHJpY2FsIHVuY2VydGFpbnRpZXMiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZC1vcGVuPSJBc3ltbWV0cmljYWwgdW5jZXJ0YWludGllcyIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWIyYThkL21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtBc3ltbWV0cmljYWwgdW5jZXJ0YWludGllcyZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYjJhOGQvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7QXN5bW1ldHJpY2FsIHVuY2VydGFpbnRpZXM8L3NwYW4+PC9hPgoJCQkJPC9kaXY+CgkJCTxkaXYgY2xhc3M9InJldmVhbC1jb250ZW50Ij4KCQkJCTxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB2aWV3LXRleHQtc21hbGwiPjxwPkluIHNldmVyYWwgZGlzY2lwbGluZXMsIG1lYXN1cmVtZW50IHJlc3VsdHMgb2NjYXNpb25hbGx5IGFyZSBleHByZXNzZWQgdXNpbmcgY292ZXJhZ2UgaW50ZXJ2YWxzIHRoYXQgYXJlIGFzeW1tZXRyaWMgcmVsYXRpdmUgdG8gdGhlIG1lYXN1cmVkIHZhbHVlLiBUaGUgY29udmVudGlvbmFsIHRyZWF0bWVudCBvZiBzdWNoIHJlc3VsdHMsIHdoZW4gdGhlcmUgaXMgdGhlIG5lZWQgdG8gcHJvcGFnYXRlIHRoZWlyIHVuY2VydGFpbnRpZXMgdG8gZGVyaXZhdGl2ZSBxdWFudGl0aWVzLCBpcyB0byByZXBsYWNlIHRoZSBhc3ltbWV0cmljIHVuY2VydGFpbnRpZXMgYnkgJ3N5bW1ldHJpemVkJyB2ZXJzaW9ucyB0aGVyZW9mLiBXZSBzaG93IHRoYXQgc3VjaCBzaW1wbGlmaWNhdGlvbiBpcyB1bm5lY2Vzc2FyeSwgaWxsdXN0cmF0ZSBob3cgYXN5bW1ldHJ5IG1heSBiZSBtb2RlbGVkIGFuZCByZWNvZ25pemVkIGV4cGxpY2l0bHksIGFuZCBwcm9wYWdhdGVkIHVzaW5nIHN0YW5kYXJkIE1vbnRlIENhcmxvIG1ldGhvZHMuIFdlIHByZXNlbnQgdGhyZWUgZGlzdHJpYnV0aW9ucyAoRmVjaG5lciwgc2tldy1ub3JtYWwsIGFuZCBnZW5lcmFsaXplZCBleHRyZW1lIHZhbHVlKSwgYW1vbmcgbWFueSBhdmFpbGFibGUgYWx0ZXJuYXRpdmVzLCB0aGF0IGNhbiBiZSB1c2VkIGFzIG1vZGVscyBmb3IgYXN5bW1ldHJpYyB1bmNlcnRhaW50aWVzIGFzc29jaWF0ZWQgd2l0aCBzY2FsYXIgaW5wdXQgcXVhbnRpdGllcywgaW4gdGhlIGNvbnRleHQgb2YgdGhlIG1lYXN1cmVtZW50IG1vZGVsIGNvbnNpZGVyZWQgaW4gdGhlIEdVTS4gV2UgcHJvdmlkZSBhbiBleGFtcGxlIHdoZXJlIHN1Y2ggdW5jZXJ0YWludGllcyBhcmUgcHJvcGFnYXRlZCB0byB0aGUgdW5jZXJ0YWludHkgb2YgYSByYXRpbyBvZiBtYXNzIGZyYWN0aW9ucy4gV2UgYWxzbyBzaG93IGhvdyBhIHNpbWlsYXIsIG1vZGVsLWJhc2VkIGFwcHJvYWNoIGNhbiBiZSB1c2VkIGluIHRoZSBjb250ZXh0IG9mIGRhdGEgcmVkdWN0aW9ucyBmcm9tIGludGVybGFib3JhdG9yeSBzdHVkaWVzIGFuZCBvdGhlciBjb25zZW5zdXMgYnVpbGRpbmcgZXhlcmNpc2VzIHdoZXJlIHRoZSByZXBvcnRlZCB1bmNlcnRhaW50aWVzIGFyZSBleHByZXNzZWQgYXN5bW1ldHJpY2FsbHksIGlsbHVzdHJhdGluZyB0aGUgYXBwcm9hY2ggdG8gb2J0YWluIGNvbnNlbnN1cyBlc3RpbWF0ZXMgb2YgdGhlIGFic29ycHRpb24gY3Jvc3Mtc2VjdGlvbiBvZiBvem9uZSwgYW5kIG9mIHRoZSBkaXN0YW5jZSB0byBnYWxheHkgTTgzIGluIHRoZSBWaXJnbyBjbHVzdGVyLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FiMmE4ZCI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FiMmE4ZDwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj4KPC9kaXY+CgkJPCEtLSBFbmQgTW9zdCByZWFkIHRhYnBhbmVsIC0tPgoKICAgICAgICA8IS0tIFN0YXJ0IExhdGVzdCB0YWJwYW5lbCAtLT4KCQk8ZGl2IHRhYmluZGV4PSIwIgoJICAgICAgIAkJcm9sZT0idGFicGFuZWwiCgkgICAgICAgCQlpZD0ibGF0ZXN0LWFydGljbGVzLXRhYiIKCSAgICAgICAJCWFyaWEtbGFiZWxsZWRieT0ibGF0ZXN0LWFydGljbGVzIj4KCQkJICAgPGRpdgogIGNsYXNzPSIKICAgIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLXBsdXMtaWNvbiByZXZlYWwtY2xvc2VkIHJldmVhbC1lbmFibGVkCiAgICByZXZlYWwtY29udGFpbmVyLS1qbmwtdGFiCiAgIgo+CiAgPGgyIGNsYXNzPSJ0YWJwYW5lbF9fdGl0bGUiPgogICAgPGEKICAgICAgY2xhc3M9InJldmVhbC10cmlnZ2VyIGV2ZW50X3RhYnMtYWNjb3JkaW9uIgogICAgICB0YWJpbmRleD0iMCIKICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgIHJvbGU9ImJ1dHRvbiIKICAgICAgPkxhdGVzdCBhcnRpY2xlczwvYQogICAgPgogIDwvaDI+CiAgPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQgdGFicGFuZWxfX2NvbnRlbnQiIHN0eWxlPSJkaXNwbGF5OiBub25lIj4KICAgIDxwPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSIiCiAgICAgICAgICBkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFsbCBhYnN0cmFjdHMiCiAgICAgICAgICBjbGFzcz0icmV2ZWFsLWFsbC10cmlnZ2VyIG1yLTIgc21hbGwiCiAgICAgICAgICBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFsbCBhYnN0cmFjdHMiCiAgICAgICAgICBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9ImluIHRoaXMgdGFiIgogICAgICAgICAgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49ImluIHRoaXMgdGFiIgogICAgICAgID4KICAgICAgICAgIE9wZW4gYWxsIGFic3RyYWN0czxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIgogICAgICAgICAgICA+LCZuYnNwO2luIHRoaXMgdGFiPC9zcGFuCiAgICAgICAgICA+CiAgICAgICAgPC9hPgogICAgICA8L3A+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdCI+CiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzkxZDUiIGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRpdGxlIGV2ZW50X21haW4tbGluayI+CiAgICAgICAgICAgICAgICBDYWxjdWxhdGlvbiBvZiBtYWduZXRpYyBmb3JjZXMgYW5kIHRvcnF1ZXMgb24gdGhlIEtpYmJsZSBjb2lsPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCVN0ZXBoYW4gU2NobGFtbWluZ2VyIDxlbT5ldCBhbDwvZW0+IDIwMjIgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41OTwvYj4gMDY1MDAyPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJDYWxjdWxhdGlvbiBvZiBtYWduZXRpYyBmb3JjZXMgYW5kIHRvcnF1ZXMgb24gdGhlIEtpYmJsZSBjb2lsIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iQ2FsY3VsYXRpb24gb2YgbWFnbmV0aWMgZm9yY2VzIGFuZCB0b3JxdWVzIG9uIHRoZSBLaWJibGUgY29pbCIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MWQ1L21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtDYWxjdWxhdGlvbiBvZiBtYWduZXRpYyBmb3JjZXMgYW5kIHRvcnF1ZXMgb24gdGhlIEtpYmJsZSBjb2lsJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTFkNS9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtDYWxjdWxhdGlvbiBvZiBtYWduZXRpYyBmb3JjZXMgYW5kIHRvcnF1ZXMgb24gdGhlIEtpYmJsZSBjb2lsPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5BbmFseXRpY2FsbHkgdGhlIGZvcmNlIGFjdGluZyBvbiBhIGN1cnJlbnQtY2FycnlpbmcgY29pbCBpbiBhIG1hZ25ldGljIGZpZWxkIGNhbiBiZSBjYWxjdWxhdGVkIGluIHR3byB3YXlzLiBGaXJzdCwgYSBsaW5lIGludGVncmFsIGNhbiBiZSBjb25kdWN0ZWQgYWxvbmcgdGhlIGNvaWwncyB3aXJlLCBzdW1taW5nIHVwIHRoZSBkaWZmZXJlbnRpYWwgZm9yY2UgY29udHJpYnV0aW9ucy4gRWFjaCBjb250cmlidXRpb24gcmVzdWx0cyBmcm9tIGEgY3Jvc3MtcHJvZHVjdCBvZiB0aGUgY29ycmVzcG9uZGluZyBkaWZmZXJlbnRpYWwgbGluZSBzZWdtZW50IHdpdGggdGhlIG1hZ25ldGljIGZsdXggZGVuc2l0eSBhdCB0aGF0IGxvY2F0aW9uLiBBbHRlcm5hdGl2ZWx5LCB0aGUgY29pbCdzIGVuZXJneSBpbiB0aGUgZmllbGQgaXMgZ2l2ZW4gYXMgYSBwcm9kdWN0IG9mIHRocmVlIGZhY3RvcnMsIHRoZSBudW1iZXIgb2YgdHVybnMsIHRoZSBjdXJyZW50LCBhbmQgdGhlIGZsdXggdGhyZWFkaW5nIHRoZSBjb2lsLiBUaGUgZW5lcmd5IGNhbiB0aGVuIGJlIG9idGFpbmVkIGJ5IGV4ZWN1dGluZyBhIHN1cmZhY2UgaW50ZWdyYWwgb3ZlciB0aGUgY29pbCdzIG9wZW4gc3VyZmFjZSB1c2luZyB0aGUgc2NhbGFyIHByb2R1Y3Qgb2YgdGhlIGRpZmZlcmVudGlhbCBzdXJmYWNlIGVsZW1lbnQgd2l0aCB0aGUgbWFnbmV0aWMgZmx1eCBkZW5zaXR5IGFzIGl0cyBpbnRlZ3JhbmQuIFRoZSBmb3JjZSBvbiB0aGUgY29pbCBpcyB0aGUgbmVnYXRpdmUgZGVyaXZhdGl2ZSBvZiB0aGUgZW5lcmd5IHdpdGggcmVzcGVjdCB0byB0aGUgYXBwcm9wcmlhdGUgY29vcmRpbmF0ZS4gRm9yIHlva2UtYmFzZWQgS2liYmxlIGJhbGFuY2VzLCB0aGUgbGF0dGVyIG1ldGhvZCBpcyBtdWNoIHNpbXBsZXIgc2luY2UgbW9zdCBvZiB0aGUgZmx1eCBpcyBjb250YWluZWQgaW4gdGhlIGlubmVyIHlva2Ugb2YgdGhlIG1hZ25ldCBhbmQgY2FuIGJlIHdyaXR0ZW4gYXMgYSBzaW1wbGUgZXF1YXRpb24uIEhlcmUsIHdlIHVzZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIHNpbXBsZSBlcXVhdGlvbnMgYW5kIHRoZWlyIHJlc3VsdHMgZm9yIGZpbmRpbmcgdGhlIHRvcnF1ZXMgYW5kIGZvcmNlcyB0aGF0IGFjdCBvbiBhIGNvaWwgaW4gYSB5b2tlLWJhc2VkIG1hZ25ldCBzeXN0ZW0uIFdlIGZ1cnRoZXIgaW50cm9kdWNlIGEgc3RyYWlnaHRmb3J3YXJkIG1ldGhvZCB0aGF0IGFsbG93cyB0aGUgY2FsY3VsYXRpb24gb2YgdGhlIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbiBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGNvaWwgYW5kIHRoZSBtYWduZXQgZnJvbSB0aHJlZSBtZWFzdXJlbWVudHMuPC9wPjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MWQ1Ij5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MWQ1PC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMDAyNi0xMzk0LzU5LzFBLzA3MDE4IiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgRmluYWwgcmVwb3J0IGNvbXBhcmlzb24gb2YgdGhlIGNhbGlicmF0aW9ucyBvZiBoeWRyb21ldGVycyBmb3IgbGlxdWlkIGRlbnNpdHkgZGV0ZXJtaW5hdGlvbiBhbW9uZyBTSU0gbGFib3JhdG9yaWVzLCBTSU0uTS5ELVM2PC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCUwgTyBCZWNlcnJhIGFuZCBMIE0gUGXDsWEgMjAyMiA8ZW0+TWV0cm9sb2dpYTwvZW0+IDxiPjU5PC9iPiAwNzAxODwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iRmluYWwgcmVwb3J0IGNvbXBhcmlzb24gb2YgdGhlIGNhbGlicmF0aW9ucyBvZiBoeWRyb21ldGVycyBmb3IgbGlxdWlkIGRlbnNpdHkgZGV0ZXJtaW5hdGlvbiBhbW9uZyBTSU0gbGFib3JhdG9yaWVzLCBTSU0uTS5ELVM2IiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iRmluYWwgcmVwb3J0IGNvbXBhcmlzb24gb2YgdGhlIGNhbGlicmF0aW9ucyBvZiBoeWRyb21ldGVycyBmb3IgbGlxdWlkIGRlbnNpdHkgZGV0ZXJtaW5hdGlvbiBhbW9uZyBTSU0gbGFib3JhdG9yaWVzLCBTSU0uTS5ELVM2IglkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFic3RyYWN0IiBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgbXItMiBub3dyYXAiIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWJzdHJhY3QiPk9wZW4gYWJzdHJhY3Q8L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzAwMjYtMTM5NC81OS8xQS8wNzAxOC9tZXRhIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iVmlldyBhcnRpY2xlIj4gPHNwYW4gY2xhc3M9Imljb24tYXJ0aWNsZSI+PC9zcGFuPlZpZXcgYXJ0aWNsZTxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7RmluYWwgcmVwb3J0IGNvbXBhcmlzb24gb2YgdGhlIGNhbGlicmF0aW9ucyBvZiBoeWRyb21ldGVycyBmb3IgbGlxdWlkIGRlbnNpdHkgZGV0ZXJtaW5hdGlvbiBhbW9uZyBTSU0gbGFib3JhdG9yaWVzLCBTSU0uTS5ELVM2Jm5ic3A7PC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5UaGUgaGlnaCBhY2N1cmFjeSBoeWRyb21ldGVyIGNvbXBhcmlzb24gaXMgaW50ZW5kZWQgdG8gYmUgYSByZWdpb25hbCBzdXBwbGVtZW50YXJ5IGNvbXBhcmlzb24gYWNjb3JkaW5nIHRvIHRoZSBNdXR1YWwgUmVjb2duaXRpb24gQXJyYW5nZW1lbnRzIGFuZCBiZSBhIHN1cHBvcnQgdG8gZW50cmllcyBmb3IgdGhlIENNQyB0YWJsZXMgaW4gdGhpcyBzdWItZmllbGQgZm9yIHBhcnRpY2lwYW50IGxhYm9yYXRvcmllcy48L3A+PHA+VG8gcmVhY2ggdGhlIG1haW4gdGV4dCBvZiB0aGlzIHBhcGVyLCBjbGljayBvbiA8YSBocmVmPSJodHRwczovL3d3dy5iaXBtLm9yZy9kb2N1bWVudHMvMjAxMjYvNzU2NDcxNDYvU0lNLk0uRC1TNi5wZGYvNTdkNTY0MmEtOTVkZC0wZmJhLWRhYmYtNTE4YTAyMmZjN2JjIj5GaW5hbCBSZXBvcnQ8L2E+LiBOb3RlIHRoYXQgdGhpcyB0ZXh0IGlzIHRoYXQgd2hpY2ggYXBwZWFycyBpbiBBcHBlbmRpeCBCIG9mIHRoZSBCSVBNIGtleSBjb21wYXJpc29uIGRhdGFiYXNlIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJpcG0ub3JnL2tjZGIvIj5odHRwczovL3d3dy5iaXBtLm9yZy9rY2RiLzwvYT4uPC9wPjxwPlRoZSBmaW5hbCByZXBvcnQgaGFzIGJlZW4gcGVlci1yZXZpZXdlZCBhbmQgYXBwcm92ZWQgZm9yIHB1YmxpY2F0aW9uIGJ5IHRoZSBDQ00sIGFjY29yZGluZyB0byB0aGUgcHJvdmlzaW9ucyBvZiB0aGUgQ0lQTSBNdXR1YWwgUmVjb2duaXRpb24gQXJyYW5nZW1lbnQgKENJUE0gTVJBKS48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzAwMjYtMTM5NC81OS8xQS8wNzAxOCI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMDAyNi0xMzk0LzU5LzFBLzA3MDE4PC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTE4NyIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIFBUQuKAk0lOUklNIGNvbXBhcmlzb24gb2Ygbm92ZWwgZGlnaXRhbCBpbXBlZGFuY2UgYnJpZGdlcyB3aXRoIGdyYXBoZW5lIGltcGVkYW5jZSBxdWFudHVtIHN0YW5kYXJkczwvYT4KICAgICAgICAgICAgPHAgY2xhc3M9InNtYWxsIGFydC1saXN0LWl0ZW0tbWV0YSI+CgkJCQlNYXJ0aW5hIE1hcnphbm8gPGVtPmV0IGFsPC9lbT4gMjAyMiA8ZW0+TWV0cm9sb2dpYTwvZW0+IDxiPjU5PC9iPiAwNjUwMDE8L3A+CgkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItdXBwZXIiPgoJCQkJPGEgaHJlZj0iIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9IlBUQuKAk0lOUklNIGNvbXBhcmlzb24gb2Ygbm92ZWwgZGlnaXRhbCBpbXBlZGFuY2UgYnJpZGdlcyB3aXRoIGdyYXBoZW5lIGltcGVkYW5jZSBxdWFudHVtIHN0YW5kYXJkcyIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IlBUQuKAk0lOUklNIGNvbXBhcmlzb24gb2Ygbm92ZWwgZGlnaXRhbCBpbXBlZGFuY2UgYnJpZGdlcyB3aXRoIGdyYXBoZW5lIGltcGVkYW5jZSBxdWFudHVtIHN0YW5kYXJkcyIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MTg3L21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtQVELigJNJTlJJTSBjb21wYXJpc29uIG9mIG5vdmVsIGRpZ2l0YWwgaW1wZWRhbmNlIGJyaWRnZXMgd2l0aCBncmFwaGVuZSBpbXBlZGFuY2UgcXVhbnR1bSBzdGFuZGFyZHMmbmJzcDs8L3NwYW4+PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MTg3L3BkZiIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlBERiI+PHNwYW4JY2xhc3M9Imljb24tZmlsZS1wZGYiPjwvc3Bhbj5QREY8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1BUQuKAk0lOUklNIGNvbXBhcmlzb24gb2Ygbm92ZWwgZGlnaXRhbCBpbXBlZGFuY2UgYnJpZGdlcyB3aXRoIGdyYXBoZW5lIGltcGVkYW5jZSBxdWFudHVtIHN0YW5kYXJkczwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+VGhpcyBwYXBlciBkZXNjcmliZXMgYW4gb25zaXRlIGNvbXBhcmlzb24gb2YgdHdvIGRpZmZlcmVudCBkaWdpdGFsIGltcGVkYW5jZSBicmlkZ2VzIHdoZW4gcGVyZm9ybWluZyBtZWFzdXJlbWVudHMgb24gYSBxdWFudHVtIEhhbGwgcmVzaXN0YW5jZSBzdGFuZGFyZCB3aXRoIHRoZSBwdXJwb3NlIG9mIHJlYWxpemluZyB0aGUgU0kgdW5pdCBvZiBjYXBhY2l0YW5jZSwgdGhlIGZhcmFkLiBJbiB0aGUgRU1QSVIgSm9pbnQgUmVzZWFyY2ggUHJvamVjdCAxOFNJQjA3IEdJUVMsIDxpPmdyYXBoZW5lIGltcGVkYW5jZSBxdWFudHVtIHN0YW5kYXJkczwvaT4sIHRoZSBQaHlzaWthbGlzY2gtVGVjaG5pc2NoZSBCdW5kZXNhbnN0YWx0IChQVEIpLCBHZXJtYW55LCBkZXZlbG9wZWQgYSBKb3NlcGhzb24gaW1wZWRhbmNlIGJyaWRnZSwgYW5kIHRoZSBJc3RpdHV0byBOYXppb25hbGUgZGkgUmljZXJjYSBNZXRyb2xvZ2ljYSAoSU5SSU0pIGFuZCB0aGUgUG9saXRlY25pY28gZGkgVG9yaW5vIChQT0xJVE8pLCBJdGFseSwgZGV2ZWxvcGVkIGFuIGVsZWN0cm9uaWMgZGlnaXRhbCBpbXBlZGFuY2UgYnJpZGdlLiBUaGUgZm9ybWVyIGlzIGJhc2VkIG9uIEpvc2VwaHNvbiB3YXZlZm9ybSBnZW5lcmF0b3JzIGFuZCB0aGUgbGF0dGVyIG9uIGFuIGVsZWN0cm9uaWMgd2F2ZWZvcm0gc3ludGhlc2l6ZXIuIFRoZSBJTlJJTeKAk1BPTElUTyBpbXBlZGFuY2UgYnJpZGdlIHdhcyBtb3ZlZCB0byBQVEIgYW5kIHRoZSB0d28gYnJpZGdlcyB3ZXJlIGNvbXBhcmVkIGJ5IG1lYXN1cmluZyBib3RoIHRlbXBlcmF0dXJlLWNvbnRyb2xsZWQgc3RhbmRhcmRzIGFuZCBhIGdyYXBoZW5lIEFDIHF1YW50aXplZCBIYWxsIHJlc2lzdGFuY2UgKFFIUikgc3RhbmRhcmQuIFRoZSB1bmNlcnRhaW50aWVzIGZvciB0aGUgY2FsaWJyYXRpb24gb2YgMTAgbkYgY2FwYWNpdGFuY2Ugc3RhbmRhcmRzIGF0IDEyMzPCoEh6IGFyZSB3aXRoaW4gMSA8Yj4mI3gwMGQ3OzwvYj4gMTA8c3VwPuKIkjg8L3N1cD4gZm9yIHRoZSBQVEIncyBicmlkZ2UgYW5kIGFyb3VuZCAxIDxiPiYjeDAwZDc7PC9iPiAxMDxzdXA+4oiSNzwvc3VwPiBmb3IgdGhlIElOUklN4oCTUE9MSVRPJ3MgYnJpZGdlLiBUaGUgY29tcGFyaXNvbiBtdXR1YWxseSB2YWxpZGF0ZXMgdGhlIHR3byBicmlkZ2VzIHdpdGhpbiB0aGUgY29tYmluZWQgdW5jZXJ0YWludHkuIFRoZSByZXN1bHQgY29uZmlybXMgdGhhdCBkaWdpdGFsIGltcGVkYW5jZSBicmlkZ2VzIGFsbG93IHRoZSByZWFsaXphdGlvbiBvZiB0aGUgU0kgZmFyYWQgZnJvbSB0aGUgUUhSIHdpdGggdW5jZXJ0YWludGllcyBjb21wYXJhYmxlIHdpdGggdGhlIGJlc3QgY2FsaWJyYXRpb24gY2FwYWJpbGl0aWVzIG9mIHRoZSBCSVBNIGFuZCB0aGUgbWFqb3IgTmF0aW9uYWwgTWV0cm9sb2d5IEluc3RpdHV0ZXMuPC9wPjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MTg3Ij5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MTg3PC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMDAyNi0xMzk0LzU5LzFBLzAxMDA4IiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgU3VwcGxlbWVudGFyeSBjb21wYXJpc29uIGZvciB0aGUgdHJhY2VhYmlsaXR5IG9mIEFDIGhpZ2ggdm9sdGFnZSByZWZlcmVuY2UgbWVhc3VyaW5nIHN5c3RlbXMgdXAgdG8gMjAwIGtWIChFVVJBTUVULkVNLVMzMyk8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJUCBTaW3Ds24gPGVtPmV0IGFsPC9lbT4gMjAyMiA8ZW0+TWV0cm9sb2dpYTwvZW0+IDxiPjU5PC9iPiAwMTAwODwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iU3VwcGxlbWVudGFyeSBjb21wYXJpc29uIGZvciB0aGUgdHJhY2VhYmlsaXR5IG9mIEFDIGhpZ2ggdm9sdGFnZSByZWZlcmVuY2UgbWVhc3VyaW5nIHN5c3RlbXMgdXAgdG8gMjAwIGtWIChFVVJBTUVULkVNLVMzMykiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZC1vcGVuPSJTdXBwbGVtZW50YXJ5IGNvbXBhcmlzb24gZm9yIHRoZSB0cmFjZWFiaWxpdHkgb2YgQUMgaGlnaCB2b2x0YWdlIHJlZmVyZW5jZSBtZWFzdXJpbmcgc3lzdGVtcyB1cCB0byAyMDAga1YgKEVVUkFNRVQuRU0tUzMzKSIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8wMDI2LTEzOTQvNTkvMUEvMDEwMDgvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFydGljbGU8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1N1cHBsZW1lbnRhcnkgY29tcGFyaXNvbiBmb3IgdGhlIHRyYWNlYWJpbGl0eSBvZiBBQyBoaWdoIHZvbHRhZ2UgcmVmZXJlbmNlIG1lYXN1cmluZyBzeXN0ZW1zIHVwIHRvIDIwMCBrViAoRVVSQU1FVC5FTS1TMzMpJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5UaGUgaW50ZXJjb21wYXJpc29uIGNvbnNpc3RlZCBvZiBjYWxpYnJhdGluZyBhIEhpZ2ggVm9sdGFnZSBUcmF2ZWxsaW5nIFJlZmVyZW5jZSBNZWFzdXJpbmcgU3lzdGVtLCBUUk1TLCB1c2luZyBwZWFrIGFuZCBybXMgdm9sdGFnZSB2YWx1ZXMsIGF0IHRoZSBmcmVxdWVuY3kgb2YgNTAgSHogYW5kIHdpdGggdm9sdGFnZXMgb2YgNzUwIFYsIDEga1YsIDQwIGtWLCA4MCBrViwgMTIwIGtWLCAxNjAga1YgYW5kIDIwMCBrVi48L3A+PHA+VGhlIFRSTVMgY29uc2lzdGVkIG9mIGEgY2FwYWNpdGl2ZSBkaXZpZGVyIHdpdGggZml4ZWQgaW5wdXQgYW5kIGdyb3VuZGluZyBsZWFkcywgYSBjb2F4aWFsIGNhYmxlLCBhIEhQIDM0NThBIGRpZ2l0YWwgbXVsdGltZXRlciBhbmQgYSBjb21wdXRlciB3aXRoIGEgcHJpbnRlci4gVGhlIFRSTVMgaGFkIHR3byByYW5nZXMsIDIwIGtWIGFuZCAyMDAga1YsIGRlcGVuZGluZyBvbiB0aGUgbG93IHZvbHRhZ2UgYXJtIGNvbm5lY3RlZCB0byB0aGUgaGlnaCB2b2x0YWdlIGNhcGFjaXRvci4gVGhlIFRSTVMgaW5jbHVkZWQgdGhlIGxvdyB2b2x0YWdlIGRpZ2l0YWwgbXVsdGltZXRlciwgaW4gc3VjaCBhIHdheSB0aGF0IHRoZSBtZWFzdXJpbmcgZXJyb3Igb2YgaGlnaCB2b2x0YWdlIFRSTVMgc2hvdWxkIGJlIG1lYXN1cmVkIHRvIGRldGVybWluZSB0aGUgc2NhbGUgZmFjdG9yIG9mIHRoZSBoaWdoIHZvbHRhZ2UgZGl2aWRlci4gSW50ZXJjb21wYXJpc29uIHJlc3VsdHMgYXJlIGV4cHJlc3NlZCBhcyB0aGUgc2NhbGUgZmFjdG9yIG9mIHRoZSB0cmF2ZWxsaW5nIGhpZ2ggdm9sdGFnZSBjYXBhY2l0aXZlIGRpdmlkZXIsIHRoZSBzY2FsZSBmYWN0b3IgaXMgZGltZW5zaW9ubGVzcy48L3A+PHA+Q29tcGxlbWVudGFyeSBsb3cgdm9sdGFnZSBtZWFzdXJlbWVudHMgd2VyZSBhbHNvIHBlcmZvcm1lZCB0byBjaGVjayBob3cgdGhlIHBlYWsgdm9sdGFnZSBpcyBldmFsdWF0ZWQgd2hlbiBoYXJtb25pY3Mgb3IgZGlzdG9ydGlvbiBhcmUgc3VwZXJpbXBvc2VkIHRvIHNpbnVzb2lkYWwgd2F2ZWZvcm1zLiBUbyBldmFsdWF0ZSB0aGlzIHBlcmZvcm1hbmNlIGFuIGFyYml0cmFyeSB3YXZlZm9ybSBnZW5lcmF0b3Igd2FzIGluY2x1ZGVkIGFtb25nIHRoZSB0cmF2ZWxsaW5nIGRldmljZXMgaW4gc3VjaCBhIHdheSB0aGF0IGl0IHdhcyBwb3NzaWJsZSB0byBjb21wYXJlIHRoZSBwZWFrIHZvbHRhZ2UgbWVhc3VyZWQgYnkgdGhlIFRSTVMgdXNpbmcgdGhlIHByb3ZpZGVkIGRpZ2l0YWwgbXVsdGltZXRlciBhbmQgdGhlIHNwZWNpZmljIGludGVyY29tcGFyaXNvbiBzb2Z0d2FyZSBhbmQgdGhlIHBlYWsgdm9sdGFnZSBtZWFzdXJlZCBieSBlYWNoIHBhcnRpY2lwYW50LjwvcD48cD5UaGUgY29vcmRpbmF0aW5nIGxhYm9yYXRvcnkgd2FzIExDT0UgKFNwYWluKSBhbmQgdGhlIHBhcnRpY2lwYXRpbmcgaW5zdGl0dXRlcyB3ZXJlIExORSAoRnJhbmNlKSwgVlRUIE1JS0VTIChGaW5sYW5kKSwgUklTRSAoU3dlZGVuKSwgVMOcQklUQUsgVU1FIChUw7xya2l5ZSksIFBUQiAoR2VybWFueSksIEJJTSAoQnVsZ2FyaWEpLCBJTlJpTSAoSXRhbHkpLCBWU0wgKE5ldGhlcmxhbmRzKSwgVk5JTVMgKFJ1c3NpYSkgYW5kIExDT0UgKFNwYWluKS48L3A+PHA+UmVzdWx0cyBvZiB0aGUgY29tcGFyaXNvbiBwcm92ZWQgdGhlIGNhbGlicmF0aW9uIGFuZCBtZWFzdXJlbWVudCBjYXBhYmlsaXRpZXMsIENNQ3MsIG9mIHRoZSBwYXJ0aWNpcGFudHMgaW4gdGhlIGZpZWxkIG9mIGhpZ2ggdm9sdGFnZSBBQyBtZWFzdXJlbWVudCwgZXNwZWNpYWxseSB3aGVuIHBlcmZvcm1pbmcgcGVhayBodiBtZWFzdXJlbWVudHMgdXAgdG8gMjAwIGtWIHdpdGggZXhwYW5kZWQgdW5jZXJ0YWludGllcyBpbiB0aGUgcmFuZ2Ugb2YgNDAgbVYvViB0byA4MCBtVi9WLjwvcD48cD5UaGUgZGlzY3JlcGFuY3kgYmV0d2VlbiB0aGUgcmVzdWx0cyBvZiB0aGUgdHdvIGxhYnMgY2xhaW1pbmcgdGhlIGxvd2VzdCB1bmNlcnRhaW50aWVzLCBQVEIgYW5kIFZUVCwgd2FzIG9uIHNvbWUgbWVhc3VyZW1lbnRzIHNpZ25pZmljYW50bHkgbGFyZ2VyIHRoYW4gdGhlIHJlc3BlY3RpdmUgdW5jZXJ0YWludGllcy4gT25lIG9mIHRoZXNlIGxhYnMgcmVkZXNpZ25lZCBpdHMgbWVhc3VyaW5nIHN5c3RlbSBhbmQgYSBzdWJzZXF1ZW50IGJpbGF0ZXJhbCBjb21wYXJpc29uIGFycmFuZ2VkIGJldHdlZW4gUFRCIGFuZCBWVFQgc29sdmVkIHRoZSBkaXNjcmVwYW5jeS48L3A+PHA+VW5kZXJ0YWtpbmcgdGhlIHdvcmsgY29sbGFib3JhdGl2ZWx5IHRocm91Z2ggRVVSQU1FVCBwcm92ZWQgdG8gYmUgYW4gZXhjZWxsZW50IHRvb2wgdG8gY29tcGFyZSBjYWxpYnJhdGlvbiBhbmQgbWVhc3VyZW1lbnQgY2FwYWJpbGl0aWVzIG9mIE5NSSBhbmQgREksIGFzIHdlbGwgYXMgYW4gb3Bwb3J0dW5pdHkgZm9yIHNldmVyYWwgaW5zdGl0dXRlcyB0byBpbXByb3ZlIHRoZWlyIENNQ3MuPC9wPjxwPlRvIHJlYWNoIHRoZSBtYWluIHRleHQgb2YgdGhpcyBwYXBlciwgY2xpY2sgb24gPGEgaHJlZj0iaHR0cHM6Ly93d3cuYmlwbS5vcmcvZG9jdW1lbnRzLzIwMTI2LzQ4ODU4OTQ0L0VVUkFNRVQuRU0tUzMzLnBkZi8xZmI2ZjEyYS1lZDU5LWY5YmItNWJjOC1iNjFlNTVlM2ZiNGYiPkZpbmFsIFJlcG9ydDwvYT4uIE5vdGUgdGhhdCB0aGlzIHRleHQgaXMgdGhhdCB3aGljaCBhcHBlYXJzIGluIEFwcGVuZGl4IEIgb2YgdGhlIEJJUE0ga2V5IGNvbXBhcmlzb24gZGF0YWJhc2UgPGEgaHJlZj0iaHR0cHM6Ly93d3cuYmlwbS5vcmcva2NkYi8iPmh0dHBzOi8vd3d3LmJpcG0ub3JnL2tjZGIvPC9hPi48L3A+PHA+VGhlIGZpbmFsIHJlcG9ydCBoYXMgYmVlbiBwZWVyLXJldmlld2VkIGFuZCBhcHByb3ZlZCBmb3IgcHVibGljYXRpb24gYnkgdGhlIENDRU0sIGFjY29yZGluZyB0byB0aGUgcHJvdmlzaW9ucyBvZiB0aGUgQ0lQTSBNdXR1YWwgUmVjb2duaXRpb24gQXJyYW5nZW1lbnQgKENJUE0gTVJBKS48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzAwMjYtMTM5NC81OS8xQS8wMTAwOCI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMDAyNi0xMzk0LzU5LzFBLzAxMDA4PC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMDAyNi0xMzk0LzU5LzFBLzAxMDA5IiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgU3VwcGxlbWVudGFyeSBjb21wYXJpc29uIGZvciB0aGUgdHJhY2VhYmlsaXR5IGluIGhpZ2ggdm9sdGFnZSBjYXBhY2l0YW5jZSBhbmQgZGlzc2lwYXRpb24gZmFjdG9yIG1lYXN1cmVtZW50cyAoRVVSQU1FVC5FTS1TMzQpPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCVAgU2ltw7NuIDxlbT5ldCBhbDwvZW0+IDIwMjIgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41OTwvYj4gMDEwMDk8L3A+CgkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItdXBwZXIiPgoJCQkJPGEgaHJlZj0iIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9IlN1cHBsZW1lbnRhcnkgY29tcGFyaXNvbiBmb3IgdGhlIHRyYWNlYWJpbGl0eSBpbiBoaWdoIHZvbHRhZ2UgY2FwYWNpdGFuY2UgYW5kIGRpc3NpcGF0aW9uIGZhY3RvciBtZWFzdXJlbWVudHMgKEVVUkFNRVQuRU0tUzM0KSIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IlN1cHBsZW1lbnRhcnkgY29tcGFyaXNvbiBmb3IgdGhlIHRyYWNlYWJpbGl0eSBpbiBoaWdoIHZvbHRhZ2UgY2FwYWNpdGFuY2UgYW5kIGRpc3NpcGF0aW9uIGZhY3RvciBtZWFzdXJlbWVudHMgKEVVUkFNRVQuRU0tUzM0KSIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8wMDI2LTEzOTQvNTkvMUEvMDEwMDkvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFydGljbGU8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1N1cHBsZW1lbnRhcnkgY29tcGFyaXNvbiBmb3IgdGhlIHRyYWNlYWJpbGl0eSBpbiBoaWdoIHZvbHRhZ2UgY2FwYWNpdGFuY2UgYW5kIGRpc3NpcGF0aW9uIGZhY3RvciBtZWFzdXJlbWVudHMgKEVVUkFNRVQuRU0tUzM0KSZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+VGhlIGludGVyY29tcGFyaXNvbiBjb25zaXN0ZWQgb2YgY2FsaWJyYXRpbmcgdGhlIGNhcGFjaXRhbmNlIGFuZCBsb3NzIGZhY3RvciAodGFuIM60KSBvZiBhIHNldCBvZiByZWZlcmVuY2UgY2FwYWNpdG9ycyBhdCBkaWZmZXJlbnQgdm9sdGFnZSBsZXZlbHMsIGluY2x1ZGluZyBoaWdoIHZvbHRhZ2UgdXAgdG8gMjAwIGtWLCBmb3IgZnJlcXVlbmNpZXMgYmV0d2VlbiA1MCBIeiBhbmQgMWtIeiBpbiBsb3cgdm9sdGFnZSBtZWFzdXJlbWVudHMgYW5kIDUwIEh6IGluIGhpZ2ggdm9sdGFnZSBtZWFzdXJlbWVudHMuPC9wPjxwPlRoZSB0cmF2ZWxsaW5nIHN0YW5kYXJkcyBjb25zaXN0ZWQgb2YgYSBzZXQgb2YgZm91ciByZWZlcmVuY2UgY2FwYWNpdG9ycyAoVFJDKSB3aXRoIGZpeGVkIGlucHV0IGFuZCBncm91bmRpbmcgbGVhZHMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNvbm5lY3Rpb24gY2FibGVzIG9mIHRoZSBmb2xsb3dpbmcgcmF0ZWQgY2hhcmFjdGVyaXN0aWNzOjwvcD48cD4qIFN5c3RlbSAxOiAxMDAgcEYgYW5kIHJhdGVkIHZvbHRhZ2Ugb2YgMjAwIGtWLjwvcD48cD4qIFN5c3RlbSAyOiAxMDAgcEYgYW5kIHJhdGVkIHZvbHRhZ2Ugb2YgNzAwIFYuPC9wPjxwPiogU3lzdGVtIDM6IDUwMCBuRiBhbmQgcmF0ZWQgdm9sdGFnZSBvZiAxMCBWLjwvcD48cD4qIFN5c3RlbSA0OiA1MDAwIG5GIGFuZCByYXRlZCB2b2x0YWdlIG9mIDEwIFYuPC9wPjxwPlRoZSBjb29yZGluYXRpbmcgbGFib3JhdG9yeSB3YXMgTENPRSAoU3BhaW4pIGFuZCB0aGUgcGFydGljaXBhdGluZyBpbnN0aXR1dGVzIHdlcmUgTE5FIChGcmFuY2UpLCBWVFQgTUlLRVMgKEZpbmxhbmQpLCBSSVNFIChTd2VkZW4pLCBUw5xCSVRBSyBVTUUgKFTDvHJraXllKSwgUFRCIChHZXJtYW55KSBhbmQgTENPRSAoU3BhaW4pLiBQYXJ0aWNpcGFudHMgdXNlZCB0aGVpciBiZXN0IG1lYXN1cmVtZW50IHByb2NlZHVyZXMgYW5kIHNldHVwcyBpbiBvcmRlciB0byBhY2hpZXZlIHRoZWlyIGJlc3QgY2FsaWJyYXRpb24gY2FwYWJpbGl0aWVzLjwvcD48cD5Tb21lIG9mIHRoZSBpbnN0aXR1dGVzIGRpZCBub3QgcGVyZm9ybSBhbGwgdGhlIG1lYXN1cmVtZW50cywgdGhlcmVmb3JlIGNvbXBhcmlzb24gcmVmZXJlbmNlIHZhbHVlcyBhcmUgYmFzZWQgc29tZXRpbWVzIGluIHRoZSByZXN1bHRzIG9mIG9ubHkgNCBpbnN0aXR1dGVzLjwvcD48cD5Ob3QgYWxsIHRoZSBsYWJvcmF0b3JpZXMgbWVhc3VyZWQgYXQgdGhlIHNhbWUgYW1iaWVudCB0ZW1wZXJhdHVyZTsgdG8gcHJldmVudCB0aGlzIGluY29udmVuaWVuY2UgYW5kIHRvIGJlIGFibGUgdG8gY29tcGFyZSByZXN1bHRzLCBhbGwgY2FwYWNpdGFuY2UgdmFsdWVzIHdlcmUgY29ycmVjdGVkIGF0IDIzIMKwQy4gVGhlIGxvbmcgZHJpZnQgb2YgdGhlIGhpZ2ggdm9sdGFnZSBjYXBhY2l0b3Igb2Ygc3lzdGVtIDEsIHByb2JhYmx5IGR1ZSB0byBzb21lIHNtYWxsIFNGNiBsZWFrYWdlLCB3YXMgYWxzbyBjb25zaWRlcmVkIHRvIGNhbGN1bGF0ZSB0aGUgQ1JWIG9mIGVhY2ggaW5zdGl0dXRlLiBWZXJ5IGdvb2QgYWdyZWVtZW50IGJldHdlZW4gaW5zdGl0dXRlcyBpcyBvYnRhaW5lZCBmb3IgaGlnaCB2b2x0YWdlIGNhcGFjaXRhbmNlIG1lYXN1cmVtZW50cyAoaGlnaCB2b2x0YWdlIGNhcGFjaXRhbmNlIGNvZWZmaWNpZW50IGRldGVybWluYXRpb24pIGFuZCBmb3IgbG93IG9yIGhpZ2ggdm9sdGFnZSBkaXNzaXBhdGlvbiBmYWN0b3IgbWVhc3VyZW1lbnRzLiBPbmx5IGEgZmV3IGxvdyB2b2x0YWdlIG1lYXN1cmVtZW50cyBvZiBjYXBhY2l0YW5jZSBhcmUgY29uc2lkZXJlZCBub3QgY29tcGF0aWJsZS48L3A+PHA+VW5kZXJ0YWtpbmcgdGhlIHdvcmsgY29sbGFib3JhdGl2ZWx5IHRocm91Z2ggRVVSQU1FVCBwcm92ZWQgdG8gYmUgYW4gZXhjZWxsZW50IHRvb2wgdG8gY29tcGFyZSBjYWxpYnJhdGlvbiBhbmQgbWVhc3VyZW1lbnQgY2FwYWJpbGl0aWVzIG9mIE5NSSBhbmQgREksIGFzIHdlbGwgYXMgYW4gb3Bwb3J0dW5pdHkgZm9yIHNldmVyYWwgaW5zdGl0dXRlcyB0byBpbXByb3ZlIHRoZWlyIENNQ3MuPC9wPjxwPlRvIHJlYWNoIHRoZSBtYWluIHRleHQgb2YgdGhpcyBwYXBlciwgY2xpY2sgb24gPGEgaHJlZj0iaHR0cHM6Ly93d3cuYmlwbS5vcmcvZG9jdW1lbnRzLzIwMTI2LzQ4ODU4OTQ3L0VVUkFNRVQuRU0tUzM0LnBkZi82YTY5MjEwZS1kOTBhLTI2NTEtZGU3Zi04MjRhNWU5NTE1MTIiPkZpbmFsIFJlcG9ydDwvYT4uIE5vdGUgdGhhdCB0aGlzIHRleHQgaXMgdGhhdCB3aGljaCBhcHBlYXJzIGluIEFwcGVuZGl4IEIgb2YgdGhlIEJJUE0ga2V5IGNvbXBhcmlzb24gZGF0YWJhc2UgPGEgaHJlZj0iaHR0cHM6Ly93d3cuYmlwbS5vcmcva2NkYi8iPmh0dHBzOi8vd3d3LmJpcG0ub3JnL2tjZGIvPC9hPi48L3A+PHA+VGhlIGZpbmFsIHJlcG9ydCBoYXMgYmVlbiBwZWVyLXJldmlld2VkIGFuZCBhcHByb3ZlZCBmb3IgcHVibGljYXRpb24gYnkgdGhlIENDRU0sIGFjY29yZGluZyB0byB0aGUgcHJvdmlzaW9ucyBvZiB0aGUgQ0lQTSBNdXR1YWwgUmVjb2duaXRpb24gQXJyYW5nZW1lbnQgKENJUE0gTVJBKS48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzAwMjYtMTM5NC81OS8xQS8wMTAwOSI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMDAyNi0xMzk0LzU5LzFBLzAxMDA5PC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8L2Rpdj4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj4KCQk8IS0tIEVuZCBMYXRlc3QgdGFicGFuZWwgLS0+CgoJCQkJCSAgPCEtLSBFeHByZXNzIExldHRlcnMgdGFicGFuZWwgLS0+CgkJCQkJICA8IS0tIEV4cHJlc3MgTGV0dGVycyB0YWJwYW5lbCAtLT4KCgkJCQkJCQkgIDwhLS0gU3RhcnQgUmV2aWV3IHRhYnBhbmVsIC0tPgoJCQkJCQkJICA8ZGl2IHRhYmluZGV4PSIwIgoJCQkJCQkJCQkgICByb2xlPSJ0YWJwYW5lbCIKCQkJCQkJCQkJICAgaWQ9InJldmlldy1hcnRpY2xlcy10YWIiCgkJCQkJCQkJCSAgIGFyaWEtbGFiZWxsZWRieT0icmV2aWV3LWFydGljbGVzIgoJCQkJCQkJCQkgICBoaWRkZW49IiI+CgkJCQkJCQkJCSAgPGRpdgogIGNsYXNzPSIKICAgIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLXBsdXMtaWNvbiByZXZlYWwtY2xvc2VkIHJldmVhbC1lbmFibGVkCiAgICByZXZlYWwtY29udGFpbmVyLS1qbmwtdGFiCiAgIgo+CiAgPGgyIGNsYXNzPSJ0YWJwYW5lbF9fdGl0bGUiPgogICAgPGEKICAgICAgY2xhc3M9InJldmVhbC10cmlnZ2VyIGV2ZW50X3RhYnMtYWNjb3JkaW9uIgogICAgICB0YWJpbmRleD0iMCIKICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgIHJvbGU9ImJ1dHRvbiIKICAgICAgPlJldmlldyBhcnRpY2xlczwvYQogICAgPgogIDwvaDI+CiAgPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQgdGFicGFuZWxfX2NvbnRlbnQiIHN0eWxlPSJkaXNwbGF5OiBub25lIj4KICAgIDxwPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSIiCiAgICAgICAgICBkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFsbCBhYnN0cmFjdHMiCiAgICAgICAgICBjbGFzcz0icmV2ZWFsLWFsbC10cmlnZ2VyIG1yLTIgc21hbGwiCiAgICAgICAgICBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFsbCBhYnN0cmFjdHMiCiAgICAgICAgICBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9ImluIHRoaXMgdGFiIgogICAgICAgICAgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49ImluIHRoaXMgdGFiIgogICAgICAgID4KICAgICAgICAgIE9wZW4gYWxsIGFic3RyYWN0czxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIgogICAgICAgICAgICA+LCZuYnNwO2luIHRoaXMgdGFiPC9zcGFuCiAgICAgICAgICA+CiAgICAgICAgPC9hPgogICAgICA8L3A+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdCI+CiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzQ2NGEiIGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRpdGxlIGV2ZW50X21haW4tbGluayI+CiAgICAgICAgICAgICAgICBUaGUgaXJvbnkgb2YgdGhlIG1hZ25ldCBzeXN0ZW0gZm9yIEtpYmJsZSBiYWxhbmNlc+KAlGEgcmV2aWV3PC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCVNoaXNvbmcgTGkgYW5kIFN0ZXBoYW4gU2NobGFtbWluZ2VyIDIwMjIgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41OTwvYj4gMDIyMDAxPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJUaGUgaXJvbnkgb2YgdGhlIG1hZ25ldCBzeXN0ZW0gZm9yIEtpYmJsZSBiYWxhbmNlc+KAlGEgcmV2aWV3IiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iVGhlIGlyb255IG9mIHRoZSBtYWduZXQgc3lzdGVtIGZvciBLaWJibGUgYmFsYW5jZXPigJRhIHJldmlldyIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM0NjRhL21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtUaGUgaXJvbnkgb2YgdGhlIG1hZ25ldCBzeXN0ZW0gZm9yIEtpYmJsZSBiYWxhbmNlc+KAlGEgcmV2aWV3Jm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjNDY0YS9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtUaGUgaXJvbnkgb2YgdGhlIG1hZ25ldCBzeXN0ZW0gZm9yIEtpYmJsZSBiYWxhbmNlc+KAlGEgcmV2aWV3PC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5UaGUgbWFnbmV0IHN5c3RlbSBpcyBhbiBlc3NlbnRpYWwgY29tcG9uZW50IG9mIHRoZSBLaWJibGUgYmFsYW5jZSwgYSBkZXZpY2UgdGhhdCBpcyB1c2VkIHRvIHJlYWxpemUgdGhlIHVuaXQgb2YgbWFzcy4gSXQgaXMgdGhlIHNvdXJjZSBvZiB0aGUgbWFnbmV0aWMgZmx1eCwgYW5kIGl0cyBpbXBvcnRhbmNlIGlzIGNhcHR1cmVkIGluIHRoZSBnZW9tZXRyaWMgZmFjdG9yIDxpPkJsPC9pPi4gSXJvbmljYWxseSwgdGhlIDxpPkJsPC9pPiBmYWN0b3IgY2FuY2VscyBvdXQgYW5kIGRvZXMgbm90IGFwcGVhciBpbiB0aGUgZmluYWwgS2liYmxlIGVxdWF0aW9uLiBOZXZlcnRoZWxlc3MsIGNhcmUgbXVzdCBiZSB0YWtlbiB0byBkZXNpZ24gYW5kIGJ1aWxkIHRoZSBtYWduZXQgc3lzdGVtIGJlY2F1c2UgdGhlIGNhbmNlbGxhdGlvbiBpcyBwZXJmZWN0IG9ubHkgaWYgdGhlIDxpPkJsPC9pPiBpcyB0aGUgc2FtZSBpbiBib3RoIG1vZGVzOiB0aGUgd2VpZ2hpbmcgYW5kIHZlbG9jaXR5IG1vZGUuIFRoaXMgcmV2aWV3IHByb3ZpZGVzIHRoZSBrbm93bGVkZ2UgbmVjZXNzYXJ5IHRvIGJ1aWxkIGEgbWFnbmV0aWMgY2lyY3VpdCBmb3IgdGhlIEtpYmJsZSBiYWxhbmNlLiBJbiBhZGRpdGlvbiwgdGhpcyBhcnRpY2xlIGRpc2N1c3NlcyB0aGUgZGVzaWduIGNvbnNpZGVyYXRpb25zLCBwYXJhbWV0ZXIgb3B0aW1pemF0aW9ucywgcHJhY3RpY2FsIGFkanVzdG1lbnRzIHRvIHRoZSBmaW5pc2hlZCBwcm9kdWN0LCBhbmQgYW4gYXNzZXNzbWVudCBvZiBzeXN0ZW1hdGljIHVuY2VydGFpbnRpZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBtYWduZXQgc3lzdGVtLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjNDY0YSI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjNDY0YTwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzE0NTYiIGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRpdGxlIGV2ZW50X21haW4tbGluayI+CiAgICAgICAgICAgICAgICBUaGUgbmV3IDxpPm1pc2UgZW4gcHJhdGlxdWU8L2k+IGZvciB0aGUgbWV0cmXigJRhIHJldmlldyBvZiBhcHByb2FjaGVzIGZvciB0aGUgcHJhY3RpY2FsIHJlYWxpemF0aW9uIG9mIHRyYWNlYWJsZSBsZW5ndGggbWV0cm9sb2d5IGZyb20gMTA8c3VwPuKIkjExPC9zdXA+wqBtIHRvIDEwPHN1cD4xMzwvc3VwPiBtPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCVJlbsOpIFNjaMO2ZGVsIDxlbT5ldCBhbDwvZW0+IDIwMjEgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41ODwvYj4gMDUyMDAyPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJUaGUgbmV3IG1pc2UgZW4gcHJhdGlxdWUgZm9yIHRoZSBtZXRyZeKAlGEgcmV2aWV3IG9mIGFwcHJvYWNoZXMgZm9yIHRoZSBwcmFjdGljYWwgcmVhbGl6YXRpb24gb2YgdHJhY2VhYmxlIGxlbmd0aCBtZXRyb2xvZ3kgZnJvbSAxMOKIkjExwqBtIHRvIDEwMTMgbSIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IlRoZSBuZXcgbWlzZSBlbiBwcmF0aXF1ZSBmb3IgdGhlIG1ldHJl4oCUYSByZXZpZXcgb2YgYXBwcm9hY2hlcyBmb3IgdGhlIHByYWN0aWNhbCByZWFsaXphdGlvbiBvZiB0cmFjZWFibGUgbGVuZ3RoIG1ldHJvbG9neSBmcm9tIDEw4oiSMTHCoG0gdG8gMTAxMyBtIglkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFic3RyYWN0IiBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgbXItMiBub3dyYXAiIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWJzdHJhY3QiPk9wZW4gYWJzdHJhY3Q8L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzE0NTYvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFydGljbGU8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1RoZSBuZXcgbWlzZSBlbiBwcmF0aXF1ZSBmb3IgdGhlIG1ldHJl4oCUYSByZXZpZXcgb2YgYXBwcm9hY2hlcyBmb3IgdGhlIHByYWN0aWNhbCByZWFsaXphdGlvbiBvZiB0cmFjZWFibGUgbGVuZ3RoIG1ldHJvbG9neSBmcm9tIDEw4oiSMTHCoG0gdG8gMTAxMyBtJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjMTQ1Ni9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtUaGUgbmV3IG1pc2UgZW4gcHJhdGlxdWUgZm9yIHRoZSBtZXRyZeKAlGEgcmV2aWV3IG9mIGFwcHJvYWNoZXMgZm9yIHRoZSBwcmFjdGljYWwgcmVhbGl6YXRpb24gb2YgdHJhY2VhYmxlIGxlbmd0aCBtZXRyb2xvZ3kgZnJvbSAxMOKIkjExwqBtIHRvIDEwMTMgbTwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+VGhlIHJldmlzZWQgSW50ZXJuYXRpb25hbCBTeXN0ZW0gb2YgVW5pdHMgKFNJKSBjYW1lIGludG8gZm9yY2Ugb24gTWF5IDIwLCAyMDE5LiBTaW11bHRhbmVvdXNseSwgdXBkYXRlZCB2ZXJzaW9ucyBvZiBzdXBwb3J0aW5nIGRvY3VtZW50cyBmb3IgdGhlIHByYWN0aWNhbCByZWFsaXphdGlvbiBvZiB0aGUgU0kgYmFzZSB1bml0cyAoPGk+bWlzZXMgZW4gcHJhdGlxdWU8L2k+KSB3ZXJlIHB1Ymxpc2hlZC4gVGhpcyByZXZpZXcgcGFwZXIgcHJvdmlkZXMgYW4gb3ZlcnZpZXcgb2YgdGhlIHVwZGF0ZWQgPGk+bWlzZSBlbiBwcmF0aXF1ZTwvaT4gZm9yIHRoZSBTSSBiYXNlIHVuaXQgb2YgbGVuZ3RoLCB0aGUgbWV0cmUsIHRoYXQgbm93IGdpdmVzIHByYWN0aWNhbCBndWlkYW5jZSBvbiByZWFsaXNhdGlvbiBvZiB0cmFjZWFibGUgbGVuZ3RoIG1ldHJvbG9neSBzcGFubmluZyAyNCBvcmRlcnMgb2YgbWFnbml0dWRlLiBUaGUgcmV2aWV3IGJlZ2lucyBieSBzaG93aW5nIGhvdyB0aGUgbWV0cmUgbWF5IGJlIHByaW1hcmlseSByZWFsaXplZCB0aHJvdWdoIHRpbWUgb2YgZmxpZ2h0IGFuZCBpbnRlcmZlcm9tZXRyaWMgdGVjaG5pcXVlcyB1c2luZyBhIHZhcmlldHkgb2YgdHlwZXMgb2YgaW50ZXJmZXJvbWV0ZXIuIEV4YW1wbGVzIG9mIHRlY2huaXF1ZXMgZm9yIG1lYXN1cmluZyB0aGUgaW50ZXJmZXJvbWV0cmljIHBoYXNlIGFuZCBjb3Bpbmcgd2hlbiB0aGUgaW50ZWdlciBpbnRlcmZlcmVuY2Ugb3JkZXIgaXMgdW5rbm93biBhcmUgdGhlbiBkZXNjcmliZWQsIHRvZ2V0aGVyIHdpdGggZXhhbXBsZXMgb2YgdHlwaWNhbCB1bmNlcnRhaW50eSBjb250cmlidXRpb25zIHRoYXQgbWF5IGJlIGVuY291bnRlcmVkLiBUaGUgcmVxdWlyZW1lbnRzIGZvciB0cmFjZWFibGUgbmFub3NjYWxlIG1ldHJvbG9neSBhbmQgdGhlIG5lZWQgZm9yIGFuIGFsdGVybmF0aXZlIHNlY29uZGFyeSBtZXRyZSBhcyBpZGVudGlmaWVkIGJ5IHRoZSBDb25zdWx0YXRpdmUgQ29tbWl0dGVlIGZvciBMZW5ndGgncyBXb3JraW5nIEdyb3VwIG9uIE5hbm9tZXRyb2xvZ3kgYXJlIG91dGxpbmVkLiBUaGVzZSBsZWQgdG8gdGhlIGluY2x1c2lvbiBpbiB0aGUgPGk+bWlzZSBlbiBwcmF0aXF1ZTwvaT4gb2Ygc2Vjb25kYXJ5IHJlYWxpc2F0aW9ucyBvZiB0aGUgbGVuZ3RoIHVuaXQgYXQgdGhlIG5hbm9tZXRyZSBhbmQgc3ViIG5hbm9tZXRyZSBzY2FsZSwgYmFzZWQgb24gdGhlIGxhdHRpY2Ugc3BhY2luZyBvZiBzaWxpY29uLiBUaHJlZSBtZWFzdXJlbWVudCB0ZWNobmlxdWVzIHVzaW5nIHRoaXMgc2Vjb25kYXJ5IHJlYWxpc2F0aW9uIGFyZSB0aGVuIGRlc2NyaWJlZCBpbiBkZXRhaWwuIFRoZSBwYXBlciBjb25jbHVkZXMgYnkgZW1waGFzaXNpbmcgdGhhdCBtZWFzdXJlbWVudHMgbWFkZSB0b2RheSBvdmVyIDI0IG9yZGVyIG9mIG1hZ25pdHVkZSBhcmUgc3RpbGwgY29tcGF0aWJsZSB3aXRoIG1lYXN1cmVtZW50cyBtYWRlIHVzaW5nIHRoZSBtZXRyZSBhcyBhZG9wdGVkIG92ZXIgMjAwIHllYXJzIGFnby48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzE0NTYiPmh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzE0NTY8L2E+CjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0gcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtY2xvc2VkIHJldmVhbC1wbHVzLWljb24iPgogICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS1ib2R5Ij4KCiAgICAgICAgPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWJlMGZjIiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgUHJvcG9zYWwgZm9yIHRoZSBkaW1lbnNpb25hbGx5IGNvbnNpc3RlbnQgdHJlYXRtZW50IG9mIGFuZ2xlIGFuZCBzb2xpZCBhbmdsZSBieSB0aGUgSW50ZXJuYXRpb25hbCBTeXN0ZW0gb2YgVW5pdHMgKFNJKTwvYT4KICAgICAgICAgICAgPHAgY2xhc3M9InNtYWxsIGFydC1saXN0LWl0ZW0tbWV0YSI+CgkJCQlCIFAgTGVvbmFyZCAyMDIxIDxlbT5NZXRyb2xvZ2lhPC9lbT4gPGI+NTg8L2I+IDA1MjAwMTwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iUHJvcG9zYWwgZm9yIHRoZSBkaW1lbnNpb25hbGx5IGNvbnNpc3RlbnQgdHJlYXRtZW50IG9mIGFuZ2xlIGFuZCBzb2xpZCBhbmdsZSBieSB0aGUgSW50ZXJuYXRpb25hbCBTeXN0ZW0gb2YgVW5pdHMgKFNJKSIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IlByb3Bvc2FsIGZvciB0aGUgZGltZW5zaW9uYWxseSBjb25zaXN0ZW50IHRyZWF0bWVudCBvZiBhbmdsZSBhbmQgc29saWQgYW5nbGUgYnkgdGhlIEludGVybmF0aW9uYWwgU3lzdGVtIG9mIFVuaXRzIChTSSkiCWRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWJzdHJhY3QiIGNsYXNzPSJyZXZlYWwtdHJpZ2dlciBtci0yIG5vd3JhcCIgZGF0YS1yZXZlYWwtdGV4dD0iT3BlbiBhYnN0cmFjdCI+T3BlbiBhYnN0cmFjdDwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FiZTBmYy9tZXRhIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iVmlldyBhcnRpY2xlIj4gPHNwYW4gY2xhc3M9Imljb24tYXJ0aWNsZSI+PC9zcGFuPlZpZXcgYXJ0aWNsZTxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7UHJvcG9zYWwgZm9yIHRoZSBkaW1lbnNpb25hbGx5IGNvbnNpc3RlbnQgdHJlYXRtZW50IG9mIGFuZ2xlIGFuZCBzb2xpZCBhbmdsZSBieSB0aGUgSW50ZXJuYXRpb25hbCBTeXN0ZW0gb2YgVW5pdHMgKFNJKSZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYmUwZmMvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7UHJvcG9zYWwgZm9yIHRoZSBkaW1lbnNpb25hbGx5IGNvbnNpc3RlbnQgdHJlYXRtZW50IG9mIGFuZ2xlIGFuZCBzb2xpZCBhbmdsZSBieSB0aGUgSW50ZXJuYXRpb25hbCBTeXN0ZW0gb2YgVW5pdHMgKFNJKTwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+QmVjYXVzZSBvZiBjb250aW51ZWQgY29uZnVzaW9uIGNhdXNlZCBieSB0aGUgU0kncyBpbnRlcnByZXRhdGlvbiBvZiBhbmdsZSBhbmQgc29saWQgYW5nbGUgYXMgZGltZW5zaW9ubGVzcyBxdWFudGl0aWVzIChhbmQgdGhlIHJhZGlhbiBhbmQgc3RlcmFkaWFuIGFzIGRpbWVuc2lvbmxlc3MgZGVyaXZlZCB1bml0cyksIGl0IGlzIHRpbWUgZm9yIHRoZSBTSSB0byB0cmVhdCB0aGVzZSBkaW1lbnNpb25hbCBwaHlzaWNhbCBxdWFudGl0aWVzIGNvcnJlY3RseS4gQnVpbGRpbmcgb24gcHJldmlvdXMgYXV0aG9ycycgZm91bmRhdGlvbnMsIHN0YXJ0aW5nIGZyb20gRXVjbGlkJ3MgPGk+RWxlbWVudHM8L2k+LCBJIGFyZ3VlIHRoYXQgYW5nbGUgc2hvdWxkIGJlIHJlY29nbml6ZWQgYXMgYSBiYXNlIHF1YW50aXR5IHdpdGggYW4gaW5kZXBlbmRlbnQgZGltZW5zaW9uOiBhbmdsZSwgQS4gQSBkaW1lbnNpb25hbGx5IGNvbnNpc3RlbnQgYW5hbHlzaXMgb2Ygcm90YXRpb25hbCBnZW9tZXRyeSBhbmQgbWVjaGFuaWNzIHJlc3VsdHMgaW4gdGhlIGFwcGVhcmFuY2Ugb2YgYSBjb25zdGFudCBvZiBOYXR1cmUgZXF1YWwgdG8gdGhlIGNlbnRyYWwgYW5nbGUgb2YgYSBwbGFuZSBjaXJjdWxhciBzZWN0b3Igd2hvc2UgYXJjIGxlbmd0aCBpcyBlcXVhbCB0byB0aGF0IG9mIGl0cyByYWRpdXMuIFRoaXMgaXMgdGhlIGNvbW1vbiAoYnV0IG5vdCBjdXJyZW50IFNJKSBjb25jZXB0IG9mIHRoZSByYWRpYW4sIHJhZCwgYXBwcm9wcmlhdGVseSBjaG9zZW4gYXMgdGhlIGJhc2UgdW5pdCBmb3IgYW5nbGUuIFdoYXQgdGhlIFNJIGNhbGxzICdhbmdsZScgaXMgYWN0dWFsbHkgYSBub25kaW1lbnNpb25hbGl6ZWQgYW5nbGU6IHRoZSBwaHlzaWNhbCBhbmdsZSAoZGltZW5zaW9uIEEpIGRpdmlkZWQgYnkgb25lIHJhZGlhbi4gVXNpbmcgYSBjb29yZGluYXRlLXN5c3RlbS1pbmRlcGVuZGVudCBkZWZpbml0aW9uIG9mIHNvbGlkIGFuZ2xlLCBJIHNob3cgdGhhdCB0aGlzIGlzIGEgZGVyaXZlZCBxdWFudGl0eSB3aXRoIGRpbWVuc2lvbiBBPHN1cD4yPC9zdXA+IGFuZCBhcHByb3ByaWF0ZSB1bml0IHJhZGlhbi1zcXVhcmVkLiBUaGUgc3RlcmFkaWFuIGlzIHJldGFpbmVkIGFzIGEgY29oZXJlbnQgZGVyaXZlZCB1bml0OiBzciA9IHJhZDxzdXA+Mjwvc3VwPi4gQ2xhcmlmaWNhdGlvbiBvZiB0ZXJtaW5vbG9neSBpcyBuZWVkZWQgaW4gZGlzdGluZ3Vpc2hpbmcgYmV0d2VlbiAnZ2VvbWV0cmljYWwnIGFuZCAnbWF0aGVtYXRpY2FsJyB0cmlnb25vbWV0cmljIGZ1bmN0aW9ucyBhbmQgaW4gcmVsYXRlZCB0b3BpY3MsIGluY2x1ZGluZyB0aGUgZGlzdGluY3Rpb24gYmV0d2VlbiBmcmVxdWVuY3kgYW5kIGFuZ3VsYXIgdmVsb2NpdHksIGFuZCBiZXR3ZWVuIHBoYXNlIGFuZCBwaGFzZSBhbmdsZSwgYW1vbmcgb3RoZXIgdGhpbmdzLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FiZTBmYyI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FiZTBmYzwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYmUwMmUiIGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRpdGxlIGV2ZW50X21haW4tbGluayI+CiAgICAgICAgICAgICAgICBSZXZpZXcgb2YgZmllbGQgY2hhcmFjdGVyaXphdGlvbiB0ZWNobmlxdWVzIGZvciBoaWdoIGludGVuc2l0eSB0aGVyYXBldXRpYyB1bHRyYXNvdW5kPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCUd1YW5nemhlbiBYaW5nIDxlbT5ldCBhbDwvZW0+IDIwMjEgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41ODwvYj4gMDIyMDAxPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJSZXZpZXcgb2YgZmllbGQgY2hhcmFjdGVyaXphdGlvbiB0ZWNobmlxdWVzIGZvciBoaWdoIGludGVuc2l0eSB0aGVyYXBldXRpYyB1bHRyYXNvdW5kIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iUmV2aWV3IG9mIGZpZWxkIGNoYXJhY3Rlcml6YXRpb24gdGVjaG5pcXVlcyBmb3IgaGlnaCBpbnRlbnNpdHkgdGhlcmFwZXV0aWMgdWx0cmFzb3VuZCIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWJlMDJlL21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtSZXZpZXcgb2YgZmllbGQgY2hhcmFjdGVyaXphdGlvbiB0ZWNobmlxdWVzIGZvciBoaWdoIGludGVuc2l0eSB0aGVyYXBldXRpYyB1bHRyYXNvdW5kJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FiZTAyZS9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtSZXZpZXcgb2YgZmllbGQgY2hhcmFjdGVyaXphdGlvbiB0ZWNobmlxdWVzIGZvciBoaWdoIGludGVuc2l0eSB0aGVyYXBldXRpYyB1bHRyYXNvdW5kPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5IaWdoLWludGVuc2l0eSB0aGVyYXBldXRpYyB1bHRyYXNvdW5kIChISVRVKSBpcyBhIG1pbmltYWxseSBpbnZhc2l2ZSBhbmQgbm9uLWlvbml6aW5nIG1lZGljYWwgcHJvY2VkdXJlIHVzZWQgdG8gY29tYmF0IGNhbmNlcnMuIEZhaXRoZnVsIGNoYXJhY3Rlcml6YXRpb24gb2YgSElUVSBmaWVsZHMgaXMgZnVuZGFtZW50YWwgdG8gZW5zdXJlIHBhdGllbnQgc2FmZXR5IGFuZCBjbGluaWNhbCBlZmZpY2llbmN5LiBIb3dldmVyLCBzdGFuZGFyZGl6ZWQgcXVhbGl0eSBhc3N1cmFuY2UgcHJvdG9jb2xzIGhhdmUgbm90IHlldCBiZWVuIGVzdGFibGlzaGVkIGZvciBISVRVLCB3aGljaCBpcyBhIHByZXJlcXVpc2l0ZSBmb3IgdGhlIHdpZGUgYWNjZXB0YW5jZSBvZiBISVRVIGFzIGEgdGhlcmFwZXV0aWMgbW9kYWxpdHkuIFRoaXMgcmV2aWV3IGRpc2N1c3NlcyB0aGUgY2hhbGxlbmdlcyBpbiB0aGUgYWNvdXN0aWMgb3V0cHV0IGNoYXJhY3Rlcml6YXRpb24gb2YgSElUVSBhbmQgdGhlIHNvbHV0aW9ucyB0aGF0IGhhdmUgYmVlbiBwcm9wb3NlZCB0byBvdmVyY29tZSB0aGlzIGlzc3VlLiBUaGUgcHVycG9zZSBvZiB0aGlzIHJldmlldyBpcyB0byBkaXNjdXNzIHRoZSBzdGF0ZSBvZiBhcnQgb2YgdGhlIG1ldHJvbG9naWNhbCB0ZWNobmlxdWVzLCBhbmQgaW52b2tlIG5ldyBpZGVhcyB0byBwcm9tcHQgZnVydGhlciBkZXZlbG9wbWVudCBvZiBISVRVIHVzYWdlIGFuZCBjaGFyYWN0ZXJpemF0aW9uIHRlY2huaXF1ZXMsIHRvIGVuc3VyZSB0aGUgc2FmZSBhbmQgZWZmZWN0aXZlIHVzYWdlIG9mIHRoZXJhcGV1dGljIHVsdHJhc291bmQuPC9wPjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWJlMDJlIj5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWJlMDJlPC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FiN2Q1NSIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIEFkdmFuY2VzIGluIG1ldHJvbG9neSBmb3IgZW5lcmd5LWNvbnRhaW5pbmcgZ2FzZXMgYW5kIGVtZXJnaW5nIGRlbWFuZHM8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJQWRyaWFhbiBNIEggdmFuIGRlciBWZWVuIDxlbT5ldCBhbDwvZW0+IDIwMjEgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41ODwvYj4gMDEyMDAxPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJBZHZhbmNlcyBpbiBtZXRyb2xvZ3kgZm9yIGVuZXJneS1jb250YWluaW5nIGdhc2VzIGFuZCBlbWVyZ2luZyBkZW1hbmRzIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iQWR2YW5jZXMgaW4gbWV0cm9sb2d5IGZvciBlbmVyZ3ktY29udGFpbmluZyBnYXNlcyBhbmQgZW1lcmdpbmcgZGVtYW5kcyIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWI3ZDU1L21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtBZHZhbmNlcyBpbiBtZXRyb2xvZ3kgZm9yIGVuZXJneS1jb250YWluaW5nIGdhc2VzIGFuZCBlbWVyZ2luZyBkZW1hbmRzJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FiN2Q1NS9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtBZHZhbmNlcyBpbiBtZXRyb2xvZ3kgZm9yIGVuZXJneS1jb250YWluaW5nIGdhc2VzIGFuZCBlbWVyZ2luZyBkZW1hbmRzPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5NZXRyb2xvZ2ljYWwgc2VydmljZXMgZnJvbSBOYXRpb25hbCBNZXRyb2xvZ3kgSW5zdGl0dXRlcyByZWxhdGVkIHRvIGVuZXJneSBnYXNlcyBoYXZlIGJlZW4gc3VwcG9ydGVkIGJ5IHRoZSBwcm9ncmFtbWUgb2Yga2V5IGNvbXBhcmlzb25zIG9mIHRoZSBHYXMgQW5hbHlzaXMgV29ya2luZyBHcm91cCBvZiB0aGUgQ29uc3VsdGF0aXZlIENvbW1pdHRlZSBmb3IgQW1vdW50IG9mIFN1YnN0YW5jZTogTWV0cm9sb2d5IGluIENoZW1pc3RyeSBhbmQgQmlvbG9neSBzaW5jZSBpdHMgY29uY2VwdGlvbiBpbiAxOTkzLiBNb3N0IG9mIHRoZSBrZXkgY29tcGFyaXNvbnMgaGF2ZSBiZWVuIHBlcmZvcm1lZCBvbiBuYXR1cmFsIGdhcyBjb21wb3NpdGlvbiBtZWFzdXJlbWVudCwgd2hpY2ggaXMga2V5IHRvIHRoZSBjYWxjdWxhdGlvbiBvZiBuYXR1cmFsIGdhcyBwcm9wZXJ0aWVzLCB0aGVyZWJ5IGZhY2lsaXRhdGluZyBmaXNjYWwgbWV0ZXJpbmcgYW5kIHRoZSB0cmFkZSBpbiBuYXR1cmFsIGdhcy4gSW4gdGhlIHJlY2VudCB5ZWFycywgbm9uLWNvbnZlbnRpb25hbCBlbmVyZ3kgZ2FzZXMgYW5kIG5hdHVyYWwgZ2FzIHN1YnN0aXR1dGVzLCBzdWNoIGFzIHJlZmluZXJ5IGdhcyBhbmQgYmlvZ2FzIGhhdmUgYmVlbiBhZGRyZXNzZWQuIFRoZSBwYXBlciBnaXZlcyBhbiBvdmVydmlldyBvdmVyIHRoZSBhY2hpZXZlbWVudHMgaW4gdGhpcyBhcmVhIGZyb20gdGhlIGZpcnN0IGtleSBjb21wYXJpc29uIChDQ1FNLUsxKSBvbndhcmQgYW5kIG91dGxpbmVzIHRoZSBjdXJyZW50IGNoYWxsZW5nZXMgdG8gdGhlIG1ldHJvbG9naWNhbCBjb21tdW5pdHkuIFRoZSBvbmdvaW5nIGVuZXJneSB0cmFuc2l0aW9uIHRvd2FyZHMgcmVuZXdhYmxlIGVuZXJneSBnYXNlcyBpcyBhdCB0aGUgY2VudHJlIG9mIHRoZXNlIGNoYWxsZW5nZXMuIFRoZSBhc3NvY2lhdGVkIGVtZXJnaW5nIGNoYWxsZW5nZXMgcHJpbWFyaWx5IGNvbmNlcm4gdGhlIG1lYXN1cmVtZW50IG9mIHRoZSBjb25jZW50cmF0aW9ucyBvZiBpbXB1cml0aWVzLCBzdWNoIGFzIHNpbGljb24gaW4gYmlvbWV0aGFuZSBhbmQgdXBncmFkZWQgYmlvZ2FzLCBjYXJib24gbW9ub3hpZGUgaW4gaHlkcm9nZW4sIGFuZCBtYW55IG90aGVycy4gVGhlIHBhcGVyIHByZXNlbnRzIHRoZSBmaXJzdCByZXN1bHRzIG9mIHRoZSBkZXZlbG9wbWVudCBvZiBtZWFzdXJlbWVudCBzdGFuZGFyZHMgYW5kIG1ldGhvZHMgZm9yIGltcHVyaXRpZXMgaW4gYmlvZ2FzLCBiaW9tZXRoYW5lIGFuZCBoeWRyb2dlbiBhbmQgdGhlIGltcGxpY2F0aW9ucyBmb3IgdGhlIHByb2dyYW1tZSBvZiBrZXkgY29tcGFyaXNvbnMuPC9wPjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWI3ZDU1Ij5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWI3ZDU1PC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8L2Rpdj4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj4KCQkJCQkJCQkgIDwhLS0gRW5kIFJldmlldyB0YWJwYW5lbCAtLT4KCgkJCQkJCQkJICA8IS0tIFN0YXJ0IEZlYXR1cmVkIHRhYnBhbmVsIC0tPgoJCQkJCQkJCSAgPCEtLSBFbmQgRmVhdHVyZWQgdGFicGFuZWwgLS0+CgoJCQkJCQkJCQkgIDwhLS0gU3RhcnQgRWRpdG9yJ3MgY2hvY2llIHRhYnBhbmVsIC0tPgoJCQkJCQkJCQkgIDwhLS0gRW5kIEVkaXRvcidzIGNob2NpZSB0YWJwYW5lbCAtLT4KCgkJCQkJCQkJCQkgIDwhLS0gU3RhcnQgQU0gdGFicGFuZWwgLS0+CgkJCQkJCQkJCQkgIDxkaXYgdGFiaW5kZXg9IjAiCgkJCQkJCQkJCQkJCSAgIHJvbGU9InRhYnBhbmVsIgoJCQkJCQkJCQkJCQkgICBpZD0iYWNjZXB0ZWQtbWFudXNjcmlwdHMtdGFiIgoJCQkJCQkJCQkJCQkgICBhcmlhLWxhYmVsbGVkYnk9ImFjY2VwdGVkLW1hbnVzY3JpcHRzIgoJCQkJCQkJCQkJCQkgICBoaWRkZW49IiI+CgkJCQkJCQkJCQkJCSAgPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtcGx1cy1pY29uIHJldmVhbC1jbG9zZWQgcmV2ZWFsLWVuYWJsZWQgcmV2ZWFsLWNvbnRhaW5lci0tam5sLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idGFicGFuZWxfX3RpdGxlIj48YSBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgZXZlbnRfdGFicy1hY2NvcmRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT0iYnV0dG9uIj5BY2NlcHRlZCBtYW51c2NyaXB0czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCB0YWJwYW5lbF9fY29udGVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9ImpubC1pc3N1ZS1kaXNwLWxpbmtzIiBjbGFzcz0iY2YiPgogICAgICAgICAgICA8YSBocmVmPSIiIGRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWxsIGFic3RyYWN0cyIgY2xhc3M9InJldmVhbC1hbGwtdHJpZ2dlciBtci0yIHNtYWxsIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFsbCBhYnN0cmFjdHMiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iaW4gdGhpcyB0YWIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZC1vcGVuPSJpbiB0aGlzIHRhYiI+T3BlbiBhbGwgYWJzdHJhY3RzPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtpbiB0aGlzIHRhYjwvc3Bhbj48L2E+CiAgICAgICAgPC9wPgogICAgICAgIDwhLS0gU3RhcnQgQU0gbGlzdCBjb250ZW50IC0tPgoKCTxkaXYgY2xhc3M9ImFydC1saXN0IiBpZD0id2Qtam5sLWlzc3VlLWFydC1saXN0Ij4KICAgIAk8ZGl2IGNsYXNzPSJhcnQtbGlzdCI+CiAgICAgICAJIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0gcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtY2xvc2VkIHJldmVhbC1wbHVzLWljb24iPgogICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS1ib2R5Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0iZXllYnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlRoZSBmb2xsb3dpbmcgYXJ0aWNsZSBpcyA8L3NwYW4+PHNwYW4gY2xhc3M9InJlZCI+T3BlbiBhY2Nlc3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OWU0IiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgWXR0ZXJiaXVtIG9wdGljYWwgbGF0dGljZSBjbG9jayB3aXRoIGluc3RhYmlsaXR5IG9mIG9yZGVyIDEwPHN1cD4tMTg8L3N1cD48L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJWmhhbmcgZXQgYWwmbmJzcDs8L3A+CgkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItdXBwZXIiPgoJCQkJPGEgaHJlZj0iIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9Ill0dGVyYml1bSBvcHRpY2FsIGxhdHRpY2UgY2xvY2sgd2l0aCBpbnN0YWJpbGl0eSBvZiBvcmRlciAxMC0xOCIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49Ill0dGVyYml1bSBvcHRpY2FsIGxhdHRpY2UgY2xvY2sgd2l0aCBpbnN0YWJpbGl0eSBvZiBvcmRlciAxMC0xOCIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OWU0L21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhY2NlcHRlZCBtYW51c2NyaXB0PHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtZdHRlcmJpdW0gb3B0aWNhbCBsYXR0aWNlIGNsb2NrIHdpdGggaW5zdGFiaWxpdHkgb2Ygb3JkZXIgMTAtMTgmbmJzcDs8L3NwYW4+PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OWU0L3BkZiIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlBERiI+PHNwYW4JY2xhc3M9Imljb24tZmlsZS1wZGYiPjwvc3Bhbj5QREY8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1l0dGVyYml1bSBvcHRpY2FsIGxhdHRpY2UgY2xvY2sgd2l0aCBpbnN0YWJpbGl0eSBvZiBvcmRlciAxMC0xODwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+CgkJCQkgCQkJPCEtLSBTdGFydCBBYnN0cmFjdCAtLT4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB3ZC1qbmwtYXJ0LWFic3RyYWN0IGNmIiBpdGVtcHJvcD0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICA8cD5XZSBoYXZlIGJ1aWx0IGFuIHl0dGVyYml1bSBvcHRpY2FsIGxhdHRpY2UgY2xvY2sgd2l0aCBpbXByb3ZlbWVudHMgb3ZlciBvdXIgcHJldmlvdXMgdmVyc2lvbi4gQW4gaW4tdmFjdXVtIGJsYWNrYm9keSByYWRpYXRpb24gKEJCUikgc2hpZWxkIGlzIGVtcGxveWVkIHRvIHByb3ZpZGUgYSB3ZWxsIGNoYXJhY3Rlcml6ZWQgQkJSIGVudmlyb25tZW50LiBUaGUgZWZmZWN0aXZlIHRlbXBlcmF0dXJlIGZlbHQgYnkgdGhlIGF0b21zIGNhbiBiZSBkZXRlcm1pbmVkIGF0IGFuIGFjY3VyYWN5IGxldmVsIG9mIDEzIG1LLCBsZWFkaW5nIHRvIGEgdG90YWwgQkJSIGZyZXF1ZW5jeSBzaGlmdCB1bmNlcnRhaW50eSBvZiA5LjU8Yj4mI3gwMGQ3OzwvYj4xMDxzdXA+LTE5PC9zdXA+LiBXZSBoYXZlIGFsc28gYnVpbHQgYW4gdWx0cmEtc3RhYmxlIG9wdGljYWwgY2F2aXR5IHN5c3RlbSB0byBwcmUtc3RhYmlsaXplIHRoZSBjbG9jayBsYXNlciwgYWNoaWV2aW5nIGEgZmxpY2tlciBmcmVxdWVuY3kgaW5zdGFiaWxpdHkgb2Yg4oi9MzxiPiYjeDAwZDc7PC9iPjEwPHN1cD4tMTY8L3N1cD4uIFJhYmkgc3BlY3Ryb3Njb3B5IG9mIHRoZSBsYXR0aWNlLXRyYXBwZWQgYXRvbXMgY2FuIGFjaGlldmUgc3ViLUhlcnR6IGxpbmV3aWR0aCBzcGVjdHJhLiBUd28geXR0ZXJiaXVtIGNsb2NrcyBoYXZlIGJlZW4gb3BlcmF0ZWQgaW4gYW4gYW50aXN5bmNocm9uaXplZCBjb25maWd1cmF0aW9uLCB3aXRoIHJlYWwtdGltZSBCQlItU3Rhcmstc2hpZnQgY29ycmVjdGlvbnMgYXBwbGllZCB0byBib3RoIG9mIHRoZW0uIEJ5IGNvbXBhcmluZyB0aGUgdHdvIGNsb2Nrcywgd2UgZGVtb25zdHJhdGUgYSBzaW5nbGUtY2xvY2sgaW5zdGFiaWxpdHkgb2YgNS40PGI+JiN4MDBkNzs8L2I+MTA8c3VwPi0xODwvc3VwPiBpbiA0NTAwIHMuIFRoaXMgY2xvY2sgd2lsbCBiZSBhcHBsaWVkIGZvciBmcmVxdWVuY3kgY29tcGFyaXNvbnMgdG8gb3RoZXIgb3B0aWNhbCBjbG9ja3Mgb2YgZGlmZmVyZW50IGF0b21pYyBzcGVjaWVzIGluIHRoZSBmdXR1cmUuPC9wPjwvZGl2PgogICAgPCEtLSBFbmQgYWJzdHJhY3QgLS0+CjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OWU0Ij5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OWU0PC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOThjYiIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIEFjaGlldmluZyB0cmFjZWFiaWxpdHkgdG8gVVRDIHRocm91Z2ggR05TUyBtZWFzdXJlbWVudHM8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJRGVmcmFpZ25lIGV0IGFsJm5ic3A7PC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJBY2hpZXZpbmcgdHJhY2VhYmlsaXR5IHRvIFVUQyB0aHJvdWdoIEdOU1MgbWVhc3VyZW1lbnRzIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iQWNoaWV2aW5nIHRyYWNlYWJpbGl0eSB0byBVVEMgdGhyb3VnaCBHTlNTIG1lYXN1cmVtZW50cyIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OGNiL21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhY2NlcHRlZCBtYW51c2NyaXB0PHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtBY2hpZXZpbmcgdHJhY2VhYmlsaXR5IHRvIFVUQyB0aHJvdWdoIEdOU1MgbWVhc3VyZW1lbnRzJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOThjYi9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtBY2hpZXZpbmcgdHJhY2VhYmlsaXR5IHRvIFVUQyB0aHJvdWdoIEdOU1MgbWVhc3VyZW1lbnRzPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj4KCQkJCSAJCQk8IS0tIFN0YXJ0IEFic3RyYWN0IC0tPgogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHdkLWpubC1hcnQtYWJzdHJhY3QgY2YiIGl0ZW1wcm9wPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgICAgIDxwPkNvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lIChVVEMpIGlzIHRoZSBpbnRlcm5hdGlvbmFsIHJlZmVyZW5jZSBmb3IgdGltZSBhbmQgZnJlcXVlbmN5IG1lYXN1cmVtZW50LCBhbmQgdGhlIGJhc2lzIG9mIGNpdmlsIHRpbWVrZWVwaW5nIHdvcmxkLXdpZGUuIFRoZSByZWNlcHRpb24gb2Ygc2lnbmFscyBmcm9tIEdsb2JhbCBOYXZpZ2F0aW9uIFNhdGVsbGl0ZSBTeXN0ZW1zIChHTlNTKSBhcyBhIHNvdXJjZSBvZiB0aW1lIGFuZCBmcmVxdWVuY3kgKHN5bmNocm9uaXphdGlvbiBhbmQgc3ludG9uaXphdGlvbikgaGFzIGZvdW5kIHdpZGVzcHJlYWQgdXNlIGluIHZpcnR1YWxseSBhbGwgdXNlciBzZWN0b3JzLCBpbmNsdWRpbmcgZWxlY3RyaWNhbCBwb3dlciBzdXBwbHksIHRlbGVjb21tdW5pY2F0aW9ucywgYW5kIGZpbmFuY2lhbCBpbnN0aXR1dGlvbnMuIFRoaXMgcGFwZXIgc3VtbWFyaXplcyB0aGUgY29uY2VwdCBvZiBtZXRyb2xvZ2ljYWwgdHJhY2VhYmlsaXR5IGFuZCB0aGUgcHJhY3RpY2VzIGVtcGxveWVkIGluIHRoZSB0aW1lIGFuZCBmcmVxdWVuY3kgbWV0cm9sb2d5IGNvbW11bml0eSBmb3IgYWNoaWV2aW5nIGl0LiBQcmFjdGljYWwgc3RlcHMgYXJlIHByb3Bvc2VkIHRvIGVuc3VyZSB0aGF0IHRyYWNlYWJpbGl0eSB0byBVVEMgZnJvbSBHTlNTIHNpZ25hbCByZWNlcHRpb24gaXMgYXZhaWxhYmxlIHRvIGEgd2lkZSBjb21tdW5pdHkgb2YgdXNlcnMsIGFkZHJlc3NpbmcgZGlmZmVyZW50IGxldmVscyBvZiByZXF1aXJlZCB1bmNlcnRhaW50eSBpbiB0aW1lIGFuZCBmcmVxdWVuY3kgb2Zmc2V0IGZyb20gVVRDLiBXZSBzdWdnZXN0IHNvbWUgcHJhY3RpY2FsIG1lYXN1cmVzIHRoYXQgY2FuIGJlIGZvbGxvd2VkIGJ5IHVzZXJzLCBhbmQgaW1wcm92ZW1lbnRzIHRvIHRoZSBzZXJ2aWNlcyBwcm92aWRlZCBieSBOYXRpb25hbCBNZXRyb2xvZ3kgSW5zdGl0dXRlcyAoTk1JcykuPC9wPjwvZGl2PgogICAgPCEtLSBFbmQgYWJzdHJhY3QgLS0+CjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OGNiIj5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OGNiPC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTc5ZiIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIFRoZSB1bnVzdWFsIHN0YXR1cyBvZiB0aGUgaGVjdGFyZSBpbiB0aGUgU0k8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJQnJvd24mbmJzcDs8L3A+CgkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItdXBwZXIiPgoJCQkJPGEgaHJlZj0iIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9IlRoZSB1bnVzdWFsIHN0YXR1cyBvZiB0aGUgaGVjdGFyZSBpbiB0aGUgU0kiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZC1vcGVuPSJUaGUgdW51c3VhbCBzdGF0dXMgb2YgdGhlIGhlY3RhcmUgaW4gdGhlIFNJIglkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFic3RyYWN0IiBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgbXItMiBub3dyYXAiIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWJzdHJhY3QiPk9wZW4gYWJzdHJhY3Q8L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3OWYvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFjY2VwdGVkIG1hbnVzY3JpcHQ8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1RoZSB1bnVzdWFsIHN0YXR1cyBvZiB0aGUgaGVjdGFyZSBpbiB0aGUgU0kmbmJzcDs8L3NwYW4+PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5NzlmL3BkZiIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlBERiI+PHNwYW4JY2xhc3M9Imljb24tZmlsZS1wZGYiPjwvc3Bhbj5QREY8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1RoZSB1bnVzdWFsIHN0YXR1cyBvZiB0aGUgaGVjdGFyZSBpbiB0aGUgU0k8L3NwYW4+PC9hPgoJCQkJPC9kaXY+CgkJCTxkaXYgY2xhc3M9InJldmVhbC1jb250ZW50Ij4KCQkJCTxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB2aWV3LXRleHQtc21hbGwiPgoJCQkJIAkJCTwhLS0gU3RhcnQgQWJzdHJhY3QgLS0+CiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgd2Qtam5sLWFydC1hYnN0cmFjdCBjZiIgaXRlbXByb3A9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgPHA+VGhlIHVuaXQgaGVjdGFyZSwgbWVhbmluZyBoZWN0b21ldHJlIHNxdWFyZWQsIGhhcyBsb25nIGJlZW4gdXNlZCBmb3IgZXhwcmVzc2luZyBtZWFzdXJlbWVudHMgb2YgbGFuZCBhcmVhLiBUaGlzIGFydGljbGUgZGVzY3JpYmVzIGl0cyBoaXN0b3J5IHdpdGhpbiB0aGUgbWV0cmljIHN5c3RlbSBhbmQgaG93IGl0IGNhbWUgdG8gZ2FpbiBpdHMgY3VycmVudCBzdGF0dXMgYXMgYSBub24tU0kgdW5pdCB0aGF0IGlzIGFjY2VwdGVkIGZvciB1c2Ugd2l0aCB0aGUgU0kuIEFzIGEgZnVuY3Rpb24gb2YgdGhpcyBpdCBoYXMgYmVjb21lIGRldGFjaGVkIGZyb20gaXRzIHBhcmVudCB1bml0LCB0aGUgYXJlLCB3aGljaCBpcyBubyBsb25nZXIgYWNjZXB0ZWQgZm9yIHVzZSB3aXRoIHRoZSBTSS4gVGhpcyBzaXR1YXRpb24gY2F1c2VzIGFtYmlndWl0eSBmb3IgdGhlIGZvcm1hdGlvbiBvZiBtdWx0aXBsZXMgYW5kIHN1Ym11bHRpcGxlcyBvZiB0aGUgaGVjdGFyZS4gVGhpcyBwYXBlciBkaXNjdXNzZXMgdGhpcyBpc3N1ZSwgcHJvcG9zZXMgcG9zc2libGUgc29sdXRpb25zLCBhbmQgY29uY2x1ZGVzIHRoYXQgdGhlIGhlY3RhcmUgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBsaXN0IG9mIG5vbi1TSSB1bml0cyB3aXRoIHdoaWNoIFNJIHByZWZpeGVzIG1heSBub3QgYmUgdXNlZCwgc2ltaWxhcmx5IHRvIHRoZSBub24tU0kgdW5pdHMgb2YgdGltZS4gQSBtaW5vciB1cGRhdGUgdG8gdGhlIFNJIEJyb2NodXJlIHdvdWxkIHJlc29sdmUgdGhpcyBhbWJpZ3VpdHkuPC9wPjwvZGl2PgogICAgPCEtLSBFbmQgYWJzdHJhY3QgLS0+CjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5NzlmIj5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5NzlmPC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTdhMCIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIFNlcmllcyBjb25uZWN0aW9uIG9mIHF1YW50dW0gSGFsbCByZXNpc3RhbmNlIGFycmF5IGFuZCBwcm9ncmFtbWFibGUgSm9zZXBoc29uIHZvbHRhZ2Ugc3RhbmRhcmQgZm9yIGN1cnJlbnQgZ2VuZXJhdGlvbiBhdCBvbmUgbWljcm9hbXBlcmU8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJQ2hhZSBldCBhbCZuYnNwOzwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iU2VyaWVzIGNvbm5lY3Rpb24gb2YgcXVhbnR1bSBIYWxsIHJlc2lzdGFuY2UgYXJyYXkgYW5kIHByb2dyYW1tYWJsZSBKb3NlcGhzb24gdm9sdGFnZSBzdGFuZGFyZCBmb3IgY3VycmVudCBnZW5lcmF0aW9uIGF0IG9uZSBtaWNyb2FtcGVyZSIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IlNlcmllcyBjb25uZWN0aW9uIG9mIHF1YW50dW0gSGFsbCByZXNpc3RhbmNlIGFycmF5IGFuZCBwcm9ncmFtbWFibGUgSm9zZXBoc29uIHZvbHRhZ2Ugc3RhbmRhcmQgZm9yIGN1cnJlbnQgZ2VuZXJhdGlvbiBhdCBvbmUgbWljcm9hbXBlcmUiCWRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWJzdHJhY3QiIGNsYXNzPSJyZXZlYWwtdHJpZ2dlciBtci0yIG5vd3JhcCIgZGF0YS1yZXZlYWwtdGV4dD0iT3BlbiBhYnN0cmFjdCI+T3BlbiBhYnN0cmFjdDwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTdhMC9tZXRhIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iVmlldyBhcnRpY2xlIj4gPHNwYW4gY2xhc3M9Imljb24tYXJ0aWNsZSI+PC9zcGFuPlZpZXcgYWNjZXB0ZWQgbWFudXNjcmlwdDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7U2VyaWVzIGNvbm5lY3Rpb24gb2YgcXVhbnR1bSBIYWxsIHJlc2lzdGFuY2UgYXJyYXkgYW5kIHByb2dyYW1tYWJsZSBKb3NlcGhzb24gdm9sdGFnZSBzdGFuZGFyZCBmb3IgY3VycmVudCBnZW5lcmF0aW9uIGF0IG9uZSBtaWNyb2FtcGVyZSZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3YTAvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7U2VyaWVzIGNvbm5lY3Rpb24gb2YgcXVhbnR1bSBIYWxsIHJlc2lzdGFuY2UgYXJyYXkgYW5kIHByb2dyYW1tYWJsZSBKb3NlcGhzb24gdm9sdGFnZSBzdGFuZGFyZCBmb3IgY3VycmVudCBnZW5lcmF0aW9uIGF0IG9uZSBtaWNyb2FtcGVyZTwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+CgkJCQkgCQkJPCEtLSBTdGFydCBBYnN0cmFjdCAtLT4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB3ZC1qbmwtYXJ0LWFic3RyYWN0IGNmIiBpdGVtcHJvcD0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICA8cD5BbiBhY2N1cmF0ZSBjdXJyZW50IHdvdWxkIGJlIHJlYWxpemVkIGJ5IGEgc2VyaWVzIGNvbm5lY3Rpb24gb2YgYW4gaW52YXJpYW50IHZvbHRhZ2UgYW5kIHJlc2lzdGFuY2Ugd2l0aCB6ZXJvIGludGVyY29ubmVjdGlvbiByZXNpc3RhbmNlIGluIHRoZSBmcmFtZXdvcmsgb2YgT2htJ3MgbGF3LiBJbiBwcmFjdGljZSwgaG93ZXZlciwgYWNjdXJhdGUgY3VycmVudCByZWFsaXphdGlvbiBpcyBsaW1pdGVkIGJ5IHRoZSB0ZW1wb3JhbCBkcmlmdCBhbmQgaW5zdGFiaWxpdHkgb2YgZW1wbG95ZWQgcmVzaXN0b3JzLCBzb2xpZC1zdGF0ZSB2b2x0YWdlIHNvdXJjZXMgYW5kIGludGVyY29ubmVjdGlvbiB3aXJlcyBhZ2FpbnN0IGVudmlyb25tZW50YWwgZmx1Y3R1YXRpb25zLCBzdWNoIGFzIHRlbXBlcmF0dXJlIG9yIGF0bW9zcGhlcmljIHByZXNzdXJlLiBIZXJlLCB3ZSBnZW5lcmF0ZWQgYSBjdXJyZW50IG9mIDEgzrxBLCBkZXRlcm1pbmVkIGJ5IHRoZSBKb3NlcGhzb24gdm9sdGFnZSBhbmQgcXVhbnRpemVkIEhhbGwgcmVzaXN0YW5jZSBhcnJheS4gQSBwcm9ncmFtbWFibGUgSm9zZXBoc29uIHZvbHRhZ2Ugc3RhbmRhcmQgKFBKVlMpLCAxIE3OqSBxdWFudGl6ZWQgSGFsbCByZXNpc3RhbmNlIGFycmF5IChRSFJBKSBhbmQgdWx0cmFzdGFibGUgbG93IG5vaXNlIGN1cnJlbnQgYW1wbGlmaWVyIChVTENBKSBhcmUgY29ubmVjdGVkIGluIHNlcmllcyB0byBnZW5lcmF0ZSBhbmQgbWVhc3VyZSBhIGN1cnJlbnQgb2YgMSDOvEEuIFRoZSBleHBlY3RlZCBjdXJyZW50IGlzIGNhbGN1bGF0ZWQgYXMgdGhlIHJhdGlvIG9mIHRoZSBKb3NlcGhzb24gdm9sdGFnZSB0byB0aGUgUUhSQSBwbHVzIHRoZSBvdXRwdXQgcmVzaXN0YW5jZSBvZiB0aGUgUEpWUy4gVGhlIHJlbGF0aXZlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgY3VycmVudCBtZWFzdXJlZCBieSB0aGUgVUxDQSBhbmQgdGhlIGNhbGN1bGF0ZWQgY3VycmVudCBpcyBhcyBzbWFsbCBhcyA0MCBuQS9BIHdpdGggYSBjb21iaW5lZCBtZWFzdXJlbWVudCB1bmNlcnRhaW50eSAoaz0xKSBvZiAwLjEzIM68QS9BLjwvcD48L2Rpdj4KICAgIDwhLS0gRW5kIGFic3RyYWN0IC0tPgo8L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTdhMCI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTdhMDwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3MzYiIGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRpdGxlIGV2ZW50X21haW4tbGluayI+CiAgICAgICAgICAgICAgICBHZW5lcmF0aW5nIGFuZCBtZWFzdXJpbmcgcGljby1yYWRpYW4gYW5nbGVzPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCUFsY29jayBldCBhbCZuYnNwOzwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iR2VuZXJhdGluZyBhbmQgbWVhc3VyaW5nIHBpY28tcmFkaWFuIGFuZ2xlcyIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IkdlbmVyYXRpbmcgYW5kIG1lYXN1cmluZyBwaWNvLXJhZGlhbiBhbmdsZXMiCWRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWJzdHJhY3QiIGNsYXNzPSJyZXZlYWwtdHJpZ2dlciBtci0yIG5vd3JhcCIgZGF0YS1yZXZlYWwtdGV4dD0iT3BlbiBhYnN0cmFjdCI+T3BlbiBhYnN0cmFjdDwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTczNi9tZXRhIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iVmlldyBhcnRpY2xlIj4gPHNwYW4gY2xhc3M9Imljb24tYXJ0aWNsZSI+PC9zcGFuPlZpZXcgYWNjZXB0ZWQgbWFudXNjcmlwdDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7R2VuZXJhdGluZyBhbmQgbWVhc3VyaW5nIHBpY28tcmFkaWFuIGFuZ2xlcyZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3MzYvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7R2VuZXJhdGluZyBhbmQgbWVhc3VyaW5nIHBpY28tcmFkaWFuIGFuZ2xlczwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+CgkJCQkgCQkJPCEtLSBTdGFydCBBYnN0cmFjdCAtLT4KICAgIDxkaXYgY2xhc3M9ImFydGljbGUtdGV4dCB3ZC1qbmwtYXJ0LWFic3RyYWN0IGNmIiBpdGVtcHJvcD0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICA8cD5UaGUgYW5ndWxhciBwZXJmb3JtYW5jZSBvZiBhIG5hbm8tYW5nbGUgZ2VuZXJhdG9yIChOQU5HTykgZGV2ZWxvcGVkIGF0IERpYW1vbmQgTGlnaHQgU291cmNlIGhhcyBiZWVuIGNoYXJhY3RlcmlzZWQgdXNpbmcgYSBkdWFsLWJlYW0gbGFzZXIgaW50ZXJmZXJvbWV0ZXIgZGVzaWduZWQgYW5kIGJ1aWx0IGF0IHRoZSBOYXRpb25hbCBQaHlzaWNhbCBMYWJvcmF0b3J5IChOUEwpLiBOQU5HTyBpcyBhIGZsZXh1cmUtYmFzZWQsIHBpZXpvIGFjdHVhdGVkIGRldmljZSB3aGljaCBnZW5lcmF0ZXMgbWlsbGktIHRvIHN1Yi1uYW5vLXJhZGlhbiBhbmdsZXMgZm9yIHRoZSBjYWxpYnJhdGlvbiBvZiBtZXRyb2xvZ3kgaW5zdHJ1bWVudHMgdXNlZCB0byB0ZXN0IHRoZSBxdWFsaXR5IG9mIHN5bmNocm90cm9uIFgtcmF5IG1pcnJvcnMgYW5kIGFuZ3VsYXIgbmFuby1wb3NpdGlvbmluZyBzdGFnZXMgYXQgRGlhbW9uZC4gVGhlIE5QTCBpbnRlcmZlcm9tZXRlciBwcm92aWRlcyB0cmFjZWFiaWxpdHkgZm9yIHNtYWxsIGFuZ2xlIG1lYXN1cmVtZW50cyBtYWRlIGJ5IE5BTkdPLiBBbiB1bmNlcnRhaW50eSBidWRnZXQgaGFzIGJlZW4gZGV2ZWxvcGVkIGZvciBtZWFzdXJlbWVudHMgb3ZlciBhIDUwIG5hbm9yYWRpYW4gcmFuZ2UuIEluIGNsb3NlZC1sb29wLCB1c2luZyBmZWVkYmFjayBmcm9tIHRoZSBOQU5HTydzIGFuZ2xlIGVuY29kZXIsIGZvciB0aGUgZmlyc3QgdGltZSB3ZSBzaG93IHRoYXQgMSBuYW5vcmFkaWFuIHN0ZXBzIG1hZGUgYnkgTkFOR08gYXJlIG1lYXN1cmFibGUgYnkgYW4gZXh0ZXJuYWwgbWV0cm9sb2d5IGRldmljZS4gVGhlIDIwMCBrSHogYWNxdWlzaXRpb24gcmF0ZSBvZiB0aGUgTlBMIGFuZ2xlIGludGVyZmVyb21ldGVyIGFsc28gcmV2ZWFscyBuZXcgZHluYW1pYyBpbmZvcm1hdGlvbiBhYm91dCBOQU5HTydzIGFuZ3VsYXIgbW90aW9uLiBUaGUgTlBMIGludGVyZmVyb21ldGVyIGRlbW9uc3RyYXRlcyB0aGF0IE5BTkdPIGluIG9wZW4tbG9vcCBjYW4gbWFrZTogZGlzdGluY3Qgc3RlcHMgb2YgNTAwIHBpY29yYWRpYW5zOyBzaW51c29pZGFsIG9zY2lsbGF0aW9ucyBhdCAwLjQgSHogd2l0aCBhbiBhbXBsaXR1ZGUgb2YgMTI1IHBpY29yYWRpYW5zOyBvciAxIG5hbm9yYWRpYW4gb3NjaWxsYXRpb25zIGF0IDQwIEh6LiBUcmFjZWFiaWxpdHkgdG8gdGhlIFNJIHRob3VnaCBOYXRpb25hbCBNZXRyb2xvZ3kgSW5zdGl0dXRlIGluc3RydW1lbnRhdGlvbiBmb3IgTkFOR08gd2lsbCBwcm92aWRlIGVuaGFuY2VkIGFjY3VyYWN5IGZvciBhIHdpZGUgcmFuZ2Ugb2YgYW5nbGUgbWV0cm9sb2d5IGFwcGxpY2F0aW9ucyBhdCBEaWFtb25kLCBpbmNsdWRpbmcgaW5wdXRzIHRvIGRldGVybWluaXN0aWMgcG9saXNoaW5nIHRlY2huaXF1ZXMgZm9yIHRoZSBjcmVhdGlvbiBvZiBuZXh0LWdlbmVyYXRpb24gWC1yYXkgbWlycm9ycyBhbmQgZHluYW1pYyBjaGFyYWN0ZXJpc2F0aW9uIG9mIG5hbm8tcG9zaXRpb25pbmcgc3RhZ2VzLjwvcD48L2Rpdj4KICAgIDwhLS0gRW5kIGFic3RyYWN0IC0tPgo8L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTczNiI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTczNjwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPC9kaXY+CiAgIAkgPC9kaXY+Cgo8IS0tIEVuZCBBTSBsaXN0IGNvbnRlbnQgLS0+PHA+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9qb3VybmFsLzAwMjYtMTM5NC9hY2NlcHRlZG1hbnVzY3JpcHRzLzEwLzEiPk1vcmUgQWNjZXB0ZWQgbWFudXNjcmlwdHM8L2E+CiAgICAgICAgPC9wPgogICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCQkJCQkJICA8L2Rpdj4KCQkJCQkJCQkJCQkgIDwhLS0gRW5kIEFNIHRhYnBhbmVsIC0tPgoKCQkJCQkJCQkJCQkgIDwhLS0gU3RhcnQgVHJlbmRpbmcgdGFicGFuZWwgLS0+CgkJCQkJCQkJCQkJICA8IS0tIEVuZCBUcmVuZGluZyB0YWJwYW5lbCAtLT4KCgkJCQkJCQkJCQkJCSAgPCEtLSBTdGFydCBPcGVuIEFjY2VzcyB0YWJwYW5lbCAtLT4KCgkJCQkJCQkJCQkJCSAgPGRpdiB0YWJpbmRleD0iMCIKCQkJCQkJCQkJCQkJCQkgICByb2xlPSJ0YWJwYW5lbCIKCQkJCQkJCQkJCQkJCQkgICBpZD0ib3Blbi1hY2Nlc3MtYXJ0aWNsZXMtdGFiIgoJCQkJCQkJCQkJCQkJCSAgIGFyaWEtbGFiZWxsZWRieT0ib3Blbi1hY2Nlc3MtYXJ0aWNsZXMiCgkJCQkJCQkJCQkJCQkJICAgaGlkZGVuPSIiPgoJCQkJCQkJCQkJCQkJCSAgPGRpdgogIGNsYXNzPSIKICAgIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLXBsdXMtaWNvbiByZXZlYWwtY2xvc2VkIHJldmVhbC1lbmFibGVkCiAgICByZXZlYWwtY29udGFpbmVyLS1qbmwtdGFiCiAgIgo+CiAgPGgyIGNsYXNzPSJ0YWJwYW5lbF9fdGl0bGUiPgogICAgPGEKICAgICAgY2xhc3M9InJldmVhbC10cmlnZ2VyIGV2ZW50X3RhYnMtYWNjb3JkaW9uIgogICAgICB0YWJpbmRleD0iMCIKICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgIHJvbGU9ImJ1dHRvbiIKICAgICAgPk9wZW4gYWNjZXNzPC9hCiAgICA+CiAgPC9oMj4KICA8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCB0YWJwYW5lbF9fY29udGVudCIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPgogICAgPHA+CiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9IiIKICAgICAgICAgIGRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWxsIGFic3RyYWN0cyIKICAgICAgICAgIGNsYXNzPSJyZXZlYWwtYWxsLXRyaWdnZXIgbXItMiBzbWFsbCIKICAgICAgICAgIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWxsIGFic3RyYWN0cyIKICAgICAgICAgIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iaW4gdGhpcyB0YWIiCiAgICAgICAgICBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iaW4gdGhpcyB0YWIiCiAgICAgICAgPgogICAgICAgICAgT3BlbiBhbGwgYWJzdHJhY3RzPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iCiAgICAgICAgICAgID4sJm5ic3A7aW4gdGhpcyB0YWI8L3NwYW4KICAgICAgICAgID4KICAgICAgICA8L2E+CiAgICAgIDwvcD4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTllNCIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIFl0dGVyYml1bSBvcHRpY2FsIGxhdHRpY2UgY2xvY2sgd2l0aCBpbnN0YWJpbGl0eSBvZiBvcmRlciAxMDxzdXA+LTE4PC9zdXA+PC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCUFuZyBaaGFuZyA8ZW0+ZXQgYWw8L2VtPiAyMDIyIDxlbT5NZXRyb2xvZ2lhPC9lbT4gPGI+PC9iPiA8L3A+CgkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItdXBwZXIiPgoJCQkJPGEgaHJlZj0iIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9Ill0dGVyYml1bSBvcHRpY2FsIGxhdHRpY2UgY2xvY2sgd2l0aCBpbnN0YWJpbGl0eSBvZiBvcmRlciAxMC0xOCIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49Ill0dGVyYml1bSBvcHRpY2FsIGxhdHRpY2UgY2xvY2sgd2l0aCBpbnN0YWJpbGl0eSBvZiBvcmRlciAxMC0xOCIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OWU0L21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtZdHRlcmJpdW0gb3B0aWNhbCBsYXR0aWNlIGNsb2NrIHdpdGggaW5zdGFiaWxpdHkgb2Ygb3JkZXIgMTAtMTgmbmJzcDs8L3NwYW4+PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OWU0L3BkZiIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlBERiI+PHNwYW4JY2xhc3M9Imljb24tZmlsZS1wZGYiPjwvc3Bhbj5QREY8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1l0dGVyYml1bSBvcHRpY2FsIGxhdHRpY2UgY2xvY2sgd2l0aCBpbnN0YWJpbGl0eSBvZiBvcmRlciAxMC0xODwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+V2UgaGF2ZSBidWlsdCBhbiB5dHRlcmJpdW0gb3B0aWNhbCBsYXR0aWNlIGNsb2NrIHdpdGggaW1wcm92ZW1lbnRzIG92ZXIgb3VyIHByZXZpb3VzIHZlcnNpb24uIEFuIGluLXZhY3V1bSBibGFja2JvZHkgcmFkaWF0aW9uIChCQlIpIHNoaWVsZCBpcyBlbXBsb3llZCB0byBwcm92aWRlIGEgd2VsbCBjaGFyYWN0ZXJpemVkIEJCUiBlbnZpcm9ubWVudC4gVGhlIGVmZmVjdGl2ZSB0ZW1wZXJhdHVyZSBmZWx0IGJ5IHRoZSBhdG9tcyBjYW4gYmUgZGV0ZXJtaW5lZCBhdCBhbiBhY2N1cmFjeSBsZXZlbCBvZiAxMyBtSywgbGVhZGluZyB0byBhIHRvdGFsIEJCUiBmcmVxdWVuY3kgc2hpZnQgdW5jZXJ0YWludHkgb2YgOS41PGI+JiN4MDBkNzs8L2I+MTA8c3VwPi0xOTwvc3VwPi4gV2UgaGF2ZSBhbHNvIGJ1aWx0IGFuIHVsdHJhLXN0YWJsZSBvcHRpY2FsIGNhdml0eSBzeXN0ZW0gdG8gcHJlLXN0YWJpbGl6ZSB0aGUgY2xvY2sgbGFzZXIsIGFjaGlldmluZyBhIGZsaWNrZXIgZnJlcXVlbmN5IGluc3RhYmlsaXR5IG9mIOKIvTM8Yj4mI3gwMGQ3OzwvYj4xMDxzdXA+LTE2PC9zdXA+LiBSYWJpIHNwZWN0cm9zY29weSBvZiB0aGUgbGF0dGljZS10cmFwcGVkIGF0b21zIGNhbiBhY2hpZXZlIHN1Yi1IZXJ0eiBsaW5ld2lkdGggc3BlY3RyYS4gVHdvIHl0dGVyYml1bSBjbG9ja3MgaGF2ZSBiZWVuIG9wZXJhdGVkIGluIGFuIGFudGlzeW5jaHJvbml6ZWQgY29uZmlndXJhdGlvbiwgd2l0aCByZWFsLXRpbWUgQkJSLVN0YXJrLXNoaWZ0IGNvcnJlY3Rpb25zIGFwcGxpZWQgdG8gYm90aCBvZiB0aGVtLiBCeSBjb21wYXJpbmcgdGhlIHR3byBjbG9ja3MsIHdlIGRlbW9uc3RyYXRlIGEgc2luZ2xlLWNsb2NrIGluc3RhYmlsaXR5IG9mIDUuNDxiPiYjeDAwZDc7PC9iPjEwPHN1cD4tMTg8L3N1cD4gaW4gNDUwMCBzLiBUaGlzIGNsb2NrIHdpbGwgYmUgYXBwbGllZCBmb3IgZnJlcXVlbmN5IGNvbXBhcmlzb25zIHRvIG90aGVyIG9wdGljYWwgY2xvY2tzIG9mIGRpZmZlcmVudCBhdG9taWMgc3BlY2llcyBpbiB0aGUgZnV0dXJlLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTllNCI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTllNDwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzkxZDUiIGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRpdGxlIGV2ZW50X21haW4tbGluayI+CiAgICAgICAgICAgICAgICBDYWxjdWxhdGlvbiBvZiBtYWduZXRpYyBmb3JjZXMgYW5kIHRvcnF1ZXMgb24gdGhlIEtpYmJsZSBjb2lsPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCVN0ZXBoYW4gU2NobGFtbWluZ2VyIDxlbT5ldCBhbDwvZW0+IDIwMjIgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj41OTwvYj4gMDY1MDAyPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJDYWxjdWxhdGlvbiBvZiBtYWduZXRpYyBmb3JjZXMgYW5kIHRvcnF1ZXMgb24gdGhlIEtpYmJsZSBjb2lsIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iQ2FsY3VsYXRpb24gb2YgbWFnbmV0aWMgZm9yY2VzIGFuZCB0b3JxdWVzIG9uIHRoZSBLaWJibGUgY29pbCIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MWQ1L21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtDYWxjdWxhdGlvbiBvZiBtYWduZXRpYyBmb3JjZXMgYW5kIHRvcnF1ZXMgb24gdGhlIEtpYmJsZSBjb2lsJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTFkNS9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtDYWxjdWxhdGlvbiBvZiBtYWduZXRpYyBmb3JjZXMgYW5kIHRvcnF1ZXMgb24gdGhlIEtpYmJsZSBjb2lsPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5BbmFseXRpY2FsbHkgdGhlIGZvcmNlIGFjdGluZyBvbiBhIGN1cnJlbnQtY2FycnlpbmcgY29pbCBpbiBhIG1hZ25ldGljIGZpZWxkIGNhbiBiZSBjYWxjdWxhdGVkIGluIHR3byB3YXlzLiBGaXJzdCwgYSBsaW5lIGludGVncmFsIGNhbiBiZSBjb25kdWN0ZWQgYWxvbmcgdGhlIGNvaWwncyB3aXJlLCBzdW1taW5nIHVwIHRoZSBkaWZmZXJlbnRpYWwgZm9yY2UgY29udHJpYnV0aW9ucy4gRWFjaCBjb250cmlidXRpb24gcmVzdWx0cyBmcm9tIGEgY3Jvc3MtcHJvZHVjdCBvZiB0aGUgY29ycmVzcG9uZGluZyBkaWZmZXJlbnRpYWwgbGluZSBzZWdtZW50IHdpdGggdGhlIG1hZ25ldGljIGZsdXggZGVuc2l0eSBhdCB0aGF0IGxvY2F0aW9uLiBBbHRlcm5hdGl2ZWx5LCB0aGUgY29pbCdzIGVuZXJneSBpbiB0aGUgZmllbGQgaXMgZ2l2ZW4gYXMgYSBwcm9kdWN0IG9mIHRocmVlIGZhY3RvcnMsIHRoZSBudW1iZXIgb2YgdHVybnMsIHRoZSBjdXJyZW50LCBhbmQgdGhlIGZsdXggdGhyZWFkaW5nIHRoZSBjb2lsLiBUaGUgZW5lcmd5IGNhbiB0aGVuIGJlIG9idGFpbmVkIGJ5IGV4ZWN1dGluZyBhIHN1cmZhY2UgaW50ZWdyYWwgb3ZlciB0aGUgY29pbCdzIG9wZW4gc3VyZmFjZSB1c2luZyB0aGUgc2NhbGFyIHByb2R1Y3Qgb2YgdGhlIGRpZmZlcmVudGlhbCBzdXJmYWNlIGVsZW1lbnQgd2l0aCB0aGUgbWFnbmV0aWMgZmx1eCBkZW5zaXR5IGFzIGl0cyBpbnRlZ3JhbmQuIFRoZSBmb3JjZSBvbiB0aGUgY29pbCBpcyB0aGUgbmVnYXRpdmUgZGVyaXZhdGl2ZSBvZiB0aGUgZW5lcmd5IHdpdGggcmVzcGVjdCB0byB0aGUgYXBwcm9wcmlhdGUgY29vcmRpbmF0ZS4gRm9yIHlva2UtYmFzZWQgS2liYmxlIGJhbGFuY2VzLCB0aGUgbGF0dGVyIG1ldGhvZCBpcyBtdWNoIHNpbXBsZXIgc2luY2UgbW9zdCBvZiB0aGUgZmx1eCBpcyBjb250YWluZWQgaW4gdGhlIGlubmVyIHlva2Ugb2YgdGhlIG1hZ25ldCBhbmQgY2FuIGJlIHdyaXR0ZW4gYXMgYSBzaW1wbGUgZXF1YXRpb24uIEhlcmUsIHdlIHVzZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIHNpbXBsZSBlcXVhdGlvbnMgYW5kIHRoZWlyIHJlc3VsdHMgZm9yIGZpbmRpbmcgdGhlIHRvcnF1ZXMgYW5kIGZvcmNlcyB0aGF0IGFjdCBvbiBhIGNvaWwgaW4gYSB5b2tlLWJhc2VkIG1hZ25ldCBzeXN0ZW0uIFdlIGZ1cnRoZXIgaW50cm9kdWNlIGEgc3RyYWlnaHRmb3J3YXJkIG1ldGhvZCB0aGF0IGFsbG93cyB0aGUgY2FsY3VsYXRpb24gb2YgdGhlIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbiBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGNvaWwgYW5kIHRoZSBtYWduZXQgZnJvbSB0aHJlZSBtZWFzdXJlbWVudHMuPC9wPjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MWQ1Ij5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MWQ1PC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOThjYiIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIEFjaGlldmluZyB0cmFjZWFiaWxpdHkgdG8gVVRDIHRocm91Z2ggR05TUyBtZWFzdXJlbWVudHM8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJUGFzY2FsZSBEZWZyYWlnbmUgPGVtPmV0IGFsPC9lbT4gMjAyMiA8ZW0+TWV0cm9sb2dpYTwvZW0+IDxiPjwvYj4gPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJBY2hpZXZpbmcgdHJhY2VhYmlsaXR5IHRvIFVUQyB0aHJvdWdoIEdOU1MgbWVhc3VyZW1lbnRzIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iQWNoaWV2aW5nIHRyYWNlYWJpbGl0eSB0byBVVEMgdGhyb3VnaCBHTlNTIG1lYXN1cmVtZW50cyIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5OGNiL21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtBY2hpZXZpbmcgdHJhY2VhYmlsaXR5IHRvIFVUQyB0aHJvdWdoIEdOU1MgbWVhc3VyZW1lbnRzJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOThjYi9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtBY2hpZXZpbmcgdHJhY2VhYmlsaXR5IHRvIFVUQyB0aHJvdWdoIEdOU1MgbWVhc3VyZW1lbnRzPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5Db29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSAoVVRDKSBpcyB0aGUgaW50ZXJuYXRpb25hbCByZWZlcmVuY2UgZm9yIHRpbWUgYW5kIGZyZXF1ZW5jeSBtZWFzdXJlbWVudCwgYW5kIHRoZSBiYXNpcyBvZiBjaXZpbCB0aW1la2VlcGluZyB3b3JsZC13aWRlLiBUaGUgcmVjZXB0aW9uIG9mIHNpZ25hbHMgZnJvbSBHbG9iYWwgTmF2aWdhdGlvbiBTYXRlbGxpdGUgU3lzdGVtcyAoR05TUykgYXMgYSBzb3VyY2Ugb2YgdGltZSBhbmQgZnJlcXVlbmN5IChzeW5jaHJvbml6YXRpb24gYW5kIHN5bnRvbml6YXRpb24pIGhhcyBmb3VuZCB3aWRlc3ByZWFkIHVzZSBpbiB2aXJ0dWFsbHkgYWxsIHVzZXIgc2VjdG9ycywgaW5jbHVkaW5nIGVsZWN0cmljYWwgcG93ZXIgc3VwcGx5LCB0ZWxlY29tbXVuaWNhdGlvbnMsIGFuZCBmaW5hbmNpYWwgaW5zdGl0dXRpb25zLiBUaGlzIHBhcGVyIHN1bW1hcml6ZXMgdGhlIGNvbmNlcHQgb2YgbWV0cm9sb2dpY2FsIHRyYWNlYWJpbGl0eSBhbmQgdGhlIHByYWN0aWNlcyBlbXBsb3llZCBpbiB0aGUgdGltZSBhbmQgZnJlcXVlbmN5IG1ldHJvbG9neSBjb21tdW5pdHkgZm9yIGFjaGlldmluZyBpdC4gUHJhY3RpY2FsIHN0ZXBzIGFyZSBwcm9wb3NlZCB0byBlbnN1cmUgdGhhdCB0cmFjZWFiaWxpdHkgdG8gVVRDIGZyb20gR05TUyBzaWduYWwgcmVjZXB0aW9uIGlzIGF2YWlsYWJsZSB0byBhIHdpZGUgY29tbXVuaXR5IG9mIHVzZXJzLCBhZGRyZXNzaW5nIGRpZmZlcmVudCBsZXZlbHMgb2YgcmVxdWlyZWQgdW5jZXJ0YWludHkgaW4gdGltZSBhbmQgZnJlcXVlbmN5IG9mZnNldCBmcm9tIFVUQy4gV2Ugc3VnZ2VzdCBzb21lIHByYWN0aWNhbCBtZWFzdXJlcyB0aGF0IGNhbiBiZSBmb2xsb3dlZCBieSB1c2VycywgYW5kIGltcHJvdmVtZW50cyB0byB0aGUgc2VydmljZXMgcHJvdmlkZWQgYnkgTmF0aW9uYWwgTWV0cm9sb2d5IEluc3RpdHV0ZXMgKE5NSXMpLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOThjYiI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOThjYjwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3OWYiIGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRpdGxlIGV2ZW50X21haW4tbGluayI+CiAgICAgICAgICAgICAgICBUaGUgdW51c3VhbCBzdGF0dXMgb2YgdGhlIGhlY3RhcmUgaW4gdGhlIFNJPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCVJpY2hhcmQgSiBDIEJyb3duIDIwMjIgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj48L2I+IDwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iVGhlIHVudXN1YWwgc3RhdHVzIG9mIHRoZSBoZWN0YXJlIGluIHRoZSBTSSIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IlRoZSB1bnVzdWFsIHN0YXR1cyBvZiB0aGUgaGVjdGFyZSBpbiB0aGUgU0kiCWRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWJzdHJhY3QiIGNsYXNzPSJyZXZlYWwtdHJpZ2dlciBtci0yIG5vd3JhcCIgZGF0YS1yZXZlYWwtdGV4dD0iT3BlbiBhYnN0cmFjdCI+T3BlbiBhYnN0cmFjdDwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTc5Zi9tZXRhIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iVmlldyBhcnRpY2xlIj4gPHNwYW4gY2xhc3M9Imljb24tYXJ0aWNsZSI+PC9zcGFuPlZpZXcgYXJ0aWNsZTxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7VGhlIHVudXN1YWwgc3RhdHVzIG9mIHRoZSBoZWN0YXJlIGluIHRoZSBTSSZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3OWYvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7VGhlIHVudXN1YWwgc3RhdHVzIG9mIHRoZSBoZWN0YXJlIGluIHRoZSBTSTwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+VGhlIHVuaXQgaGVjdGFyZSwgbWVhbmluZyBoZWN0b21ldHJlIHNxdWFyZWQsIGhhcyBsb25nIGJlZW4gdXNlZCBmb3IgZXhwcmVzc2luZyBtZWFzdXJlbWVudHMgb2YgbGFuZCBhcmVhLiBUaGlzIGFydGljbGUgZGVzY3JpYmVzIGl0cyBoaXN0b3J5IHdpdGhpbiB0aGUgbWV0cmljIHN5c3RlbSBhbmQgaG93IGl0IGNhbWUgdG8gZ2FpbiBpdHMgY3VycmVudCBzdGF0dXMgYXMgYSBub24tU0kgdW5pdCB0aGF0IGlzIGFjY2VwdGVkIGZvciB1c2Ugd2l0aCB0aGUgU0kuIEFzIGEgZnVuY3Rpb24gb2YgdGhpcyBpdCBoYXMgYmVjb21lIGRldGFjaGVkIGZyb20gaXRzIHBhcmVudCB1bml0LCB0aGUgYXJlLCB3aGljaCBpcyBubyBsb25nZXIgYWNjZXB0ZWQgZm9yIHVzZSB3aXRoIHRoZSBTSS4gVGhpcyBzaXR1YXRpb24gY2F1c2VzIGFtYmlndWl0eSBmb3IgdGhlIGZvcm1hdGlvbiBvZiBtdWx0aXBsZXMgYW5kIHN1Ym11bHRpcGxlcyBvZiB0aGUgaGVjdGFyZS4gVGhpcyBwYXBlciBkaXNjdXNzZXMgdGhpcyBpc3N1ZSwgcHJvcG9zZXMgcG9zc2libGUgc29sdXRpb25zLCBhbmQgY29uY2x1ZGVzIHRoYXQgdGhlIGhlY3RhcmUgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBsaXN0IG9mIG5vbi1TSSB1bml0cyB3aXRoIHdoaWNoIFNJIHByZWZpeGVzIG1heSBub3QgYmUgdXNlZCwgc2ltaWxhcmx5IHRvIHRoZSBub24tU0kgdW5pdHMgb2YgdGltZS4gQSBtaW5vciB1cGRhdGUgdG8gdGhlIFNJIEJyb2NodXJlIHdvdWxkIHJlc29sdmUgdGhpcyBhbWJpZ3VpdHkuPC9wPjwvZGl2PgoJCQkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItbG93ZXIiPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtci0yIglocmVmPSJodHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5NzlmIj5odHRwczovL2RvaS5vcmcvMTAuMTA4OC8xNjgxLTc1NzUvYWM5NzlmPC9hPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtIHJldmVhbC1jb250YWluZXIgcmV2ZWFsLWNsb3NlZCByZXZlYWwtcGx1cy1pY29uIj4KICAgIDxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tYm9keSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImV5ZWJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5UaGUgZm9sbG93aW5nIGFydGljbGUgaXMgPC9zcGFuPjxzcGFuIGNsYXNzPSJyZWQiPk9wZW4gYWNjZXNzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTczNiIgY2xhc3M9ImFydC1saXN0LWl0ZW0tdGl0bGUgZXZlbnRfbWFpbi1saW5rIj4KICAgICAgICAgICAgICAgIEdlbmVyYXRpbmcgYW5kIG1lYXN1cmluZyBwaWNvLXJhZGlhbiBhbmdsZXM8L2E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJzbWFsbCBhcnQtbGlzdC1pdGVtLW1ldGEiPgoJCQkJU2ltb24gQWxjb2NrIDxlbT5ldCBhbDwvZW0+IDIwMjIgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj48L2I+IDwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iR2VuZXJhdGluZyBhbmQgbWVhc3VyaW5nIHBpY28tcmFkaWFuIGFuZ2xlcyIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IkdlbmVyYXRpbmcgYW5kIG1lYXN1cmluZyBwaWNvLXJhZGlhbiBhbmdsZXMiCWRhdGEtcmV2ZWFsLWxhYmVsLWFsdD0iQ2xvc2UgYWJzdHJhY3QiIGNsYXNzPSJyZXZlYWwtdHJpZ2dlciBtci0yIG5vd3JhcCIgZGF0YS1yZXZlYWwtdGV4dD0iT3BlbiBhYnN0cmFjdCI+T3BlbiBhYnN0cmFjdDwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTczNi9tZXRhIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iVmlldyBhcnRpY2xlIj4gPHNwYW4gY2xhc3M9Imljb24tYXJ0aWNsZSI+PC9zcGFuPlZpZXcgYXJ0aWNsZTxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7R2VuZXJhdGluZyBhbmQgbWVhc3VyaW5nIHBpY28tcmFkaWFuIGFuZ2xlcyZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3MzYvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7R2VuZXJhdGluZyBhbmQgbWVhc3VyaW5nIHBpY28tcmFkaWFuIGFuZ2xlczwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+VGhlIGFuZ3VsYXIgcGVyZm9ybWFuY2Ugb2YgYSBuYW5vLWFuZ2xlIGdlbmVyYXRvciAoTkFOR08pIGRldmVsb3BlZCBhdCBEaWFtb25kIExpZ2h0IFNvdXJjZSBoYXMgYmVlbiBjaGFyYWN0ZXJpc2VkIHVzaW5nIGEgZHVhbC1iZWFtIGxhc2VyIGludGVyZmVyb21ldGVyIGRlc2lnbmVkIGFuZCBidWlsdCBhdCB0aGUgTmF0aW9uYWwgUGh5c2ljYWwgTGFib3JhdG9yeSAoTlBMKS4gTkFOR08gaXMgYSBmbGV4dXJlLWJhc2VkLCBwaWV6byBhY3R1YXRlZCBkZXZpY2Ugd2hpY2ggZ2VuZXJhdGVzIG1pbGxpLSB0byBzdWItbmFuby1yYWRpYW4gYW5nbGVzIGZvciB0aGUgY2FsaWJyYXRpb24gb2YgbWV0cm9sb2d5IGluc3RydW1lbnRzIHVzZWQgdG8gdGVzdCB0aGUgcXVhbGl0eSBvZiBzeW5jaHJvdHJvbiBYLXJheSBtaXJyb3JzIGFuZCBhbmd1bGFyIG5hbm8tcG9zaXRpb25pbmcgc3RhZ2VzIGF0IERpYW1vbmQuIFRoZSBOUEwgaW50ZXJmZXJvbWV0ZXIgcHJvdmlkZXMgdHJhY2VhYmlsaXR5IGZvciBzbWFsbCBhbmdsZSBtZWFzdXJlbWVudHMgbWFkZSBieSBOQU5HTy4gQW4gdW5jZXJ0YWludHkgYnVkZ2V0IGhhcyBiZWVuIGRldmVsb3BlZCBmb3IgbWVhc3VyZW1lbnRzIG92ZXIgYSA1MCBuYW5vcmFkaWFuIHJhbmdlLiBJbiBjbG9zZWQtbG9vcCwgdXNpbmcgZmVlZGJhY2sgZnJvbSB0aGUgTkFOR08ncyBhbmdsZSBlbmNvZGVyLCBmb3IgdGhlIGZpcnN0IHRpbWUgd2Ugc2hvdyB0aGF0IDEgbmFub3JhZGlhbiBzdGVwcyBtYWRlIGJ5IE5BTkdPIGFyZSBtZWFzdXJhYmxlIGJ5IGFuIGV4dGVybmFsIG1ldHJvbG9neSBkZXZpY2UuIFRoZSAyMDAga0h6IGFjcXVpc2l0aW9uIHJhdGUgb2YgdGhlIE5QTCBhbmdsZSBpbnRlcmZlcm9tZXRlciBhbHNvIHJldmVhbHMgbmV3IGR5bmFtaWMgaW5mb3JtYXRpb24gYWJvdXQgTkFOR08ncyBhbmd1bGFyIG1vdGlvbi4gVGhlIE5QTCBpbnRlcmZlcm9tZXRlciBkZW1vbnN0cmF0ZXMgdGhhdCBOQU5HTyBpbiBvcGVuLWxvb3AgY2FuIG1ha2U6IGRpc3RpbmN0IHN0ZXBzIG9mIDUwMCBwaWNvcmFkaWFuczsgc2ludXNvaWRhbCBvc2NpbGxhdGlvbnMgYXQgMC40IEh6IHdpdGggYW4gYW1wbGl0dWRlIG9mIDEyNSBwaWNvcmFkaWFuczsgb3IgMSBuYW5vcmFkaWFuIG9zY2lsbGF0aW9ucyBhdCA0MCBIei4gVHJhY2VhYmlsaXR5IHRvIHRoZSBTSSB0aG91Z2ggTmF0aW9uYWwgTWV0cm9sb2d5IEluc3RpdHV0ZSBpbnN0cnVtZW50YXRpb24gZm9yIE5BTkdPIHdpbGwgcHJvdmlkZSBlbmhhbmNlZCBhY2N1cmFjeSBmb3IgYSB3aWRlIHJhbmdlIG9mIGFuZ2xlIG1ldHJvbG9neSBhcHBsaWNhdGlvbnMgYXQgRGlhbW9uZCwgaW5jbHVkaW5nIGlucHV0cyB0byBkZXRlcm1pbmlzdGljIHBvbGlzaGluZyB0ZWNobmlxdWVzIGZvciB0aGUgY3JlYXRpb24gb2YgbmV4dC1nZW5lcmF0aW9uIFgtcmF5IG1pcnJvcnMgYW5kIGR5bmFtaWMgY2hhcmFjdGVyaXNhdGlvbiBvZiBuYW5vLXBvc2l0aW9uaW5nIHN0YWdlcy48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3MzYiPmh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3MzY8L2E+CjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0gcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtY2xvc2VkIHJldmVhbC1wbHVzLWljb24iPgogICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS1ib2R5Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0iZXllYnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlRoZSBmb2xsb3dpbmcgYXJ0aWNsZSBpcyA8L3NwYW4+PHNwYW4gY2xhc3M9InJlZCI+T3BlbiBhY2Nlc3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5NzM3IiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgVW5jZXJ0YWludHkgZXZhbHVhdGlvbiBpbiByZWZlcmVuY2UgbWF0ZXJpYWwgY2hhcmFjdGVyaXphdGlvbiBieSBkb3VibGUgSXNvdG9wZSBEaWx1dGlvbiBJbmR1Y3RpdmVseSBDb3VwbGVkIFBsYXNtYSBNYXNzIFNwZWN0cm9tZXRyeSAoSUQtSUNQLU1TKTwvYT4KICAgICAgICAgICAgPHAgY2xhc3M9InNtYWxsIGFydC1saXN0LWl0ZW0tbWV0YSI+CgkJCQlKb25nIFdoYSBMZWUgMjAyMiA8ZW0+TWV0cm9sb2dpYTwvZW0+IDxiPjwvYj4gPC9wPgoJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLXVwcGVyIj4KCQkJCTxhIGhyZWY9IiIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kPSJVbmNlcnRhaW50eSBldmFsdWF0aW9uIGluIHJlZmVyZW5jZSBtYXRlcmlhbCBjaGFyYWN0ZXJpemF0aW9uIGJ5IGRvdWJsZSBJc290b3BlIERpbHV0aW9uIEluZHVjdGl2ZWx5IENvdXBsZWQgUGxhc21hIE1hc3MgU3BlY3Ryb21ldHJ5IChJRC1JQ1AtTVMpIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iVW5jZXJ0YWludHkgZXZhbHVhdGlvbiBpbiByZWZlcmVuY2UgbWF0ZXJpYWwgY2hhcmFjdGVyaXphdGlvbiBieSBkb3VibGUgSXNvdG9wZSBEaWx1dGlvbiBJbmR1Y3RpdmVseSBDb3VwbGVkIFBsYXNtYSBNYXNzIFNwZWN0cm9tZXRyeSAoSUQtSUNQLU1TKSIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5NzM3L21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtVbmNlcnRhaW50eSBldmFsdWF0aW9uIGluIHJlZmVyZW5jZSBtYXRlcmlhbCBjaGFyYWN0ZXJpemF0aW9uIGJ5IGRvdWJsZSBJc290b3BlIERpbHV0aW9uIEluZHVjdGl2ZWx5IENvdXBsZWQgUGxhc21hIE1hc3MgU3BlY3Ryb21ldHJ5IChJRC1JQ1AtTVMpJm5ic3A7PC9zcGFuPjwvYT4KCQkJCTxhIGhyZWY9Ii9hcnRpY2xlLzEwLjEwODgvMTY4MS03NTc1L2FjOTczNy9wZGYiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJQREYiPjxzcGFuCWNsYXNzPSJpY29uLWZpbGUtcGRmIj48L3NwYW4+UERGPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtVbmNlcnRhaW50eSBldmFsdWF0aW9uIGluIHJlZmVyZW5jZSBtYXRlcmlhbCBjaGFyYWN0ZXJpemF0aW9uIGJ5IGRvdWJsZSBJc290b3BlIERpbHV0aW9uIEluZHVjdGl2ZWx5IENvdXBsZWQgUGxhc21hIE1hc3MgU3BlY3Ryb21ldHJ5IChJRC1JQ1AtTVMpPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5Eb3VibGUgaXNvdG9wZSBkaWx1dGlvbiBpbmR1Y3RpdmVseSBjb3VwbGVkIHBsYXNtYSBtYXNzIHNwZWN0cm9tZXRyeSAoSUQtSUNQLU1TKSBpcyBvbmUgb2YgdGhlIG1vc3QgaW1wb3J0YW50IG1lYXN1cmVtZW50IG1ldGhvZHMgaW4gdGhlIGVzdGFibGlzaG1lbnQgb2YgbWVhc3VyZW1lbnQgc3RhbmRhcmRzIGZvciBpbm9yZ2FuaWMgYW5hbHlzaXMuIEhvd2V2ZXIsIHRoZXJlIGlzIHN0aWxsIG5vIGdvb2QgY29uc2Vuc3VzIG9uIGFwcHJvYWNoZXMgZm9yIHVuY2VydGFpbnR5IGV2YWx1YXRpb24gaW4gZG91YmxlIElELUlDUC1NUy4gUGFydGljdWxhcmx5LCBhcHByb2FjaGVzIHRvIHRyZWF0aW5nIHRoZSBpbnN0cnVtZW50YWwgaXNvdG9waWMgZnJhY3Rpb25hdGlvbiAoSUlGKSBwaGVub21lbm9uIGFuZCBjb3JyZWxhdGlvbiBiZXR3ZWVuIHVuY2VydGFpbnR5IHNvdXJjZXMgYXJlIGRpdmVyc2UgYW5kIG9mdGVuIHVuY2xlYXIgaW4gdGhlIGxpdGVyYXR1cmUuIEhlcmUsIGFuIGFwcHJvYWNoIGZvciB1bmNlcnRhaW50eSBldmFsdWF0aW9uIGluIGRvdWJsZSBJRC1JQ1AtTVMgbWVhc3VyZW1lbnRzIGlzIGRlc2NyaWJlZC4gVXNpbmcgdGhyZWUgY2VydGlmaWVkIHJlZmVyZW5jZSBtYXRlcmlhbHMgKENSTXMpLCBpdCBpcyBzaG93biB0aGF0IHRoZSBJSUYgZWZmZWN0cyBjYW5jZWwgb3V0IGFuZCBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHRoZSB1bmNlcnRhaW50eSBidWRnZXQuIEZ1cnRoZXIsIGEgY29uc2lzdGVudCB3YXkgb2YgY29uc2lkZXJpbmcgY29ycmVsYXRlZCBzb3VyY2VzIG9mIHVuY2VydGFpbnR5IHRvIHByZXZlbnQgZG91YmxlIGNvdW50aW5nIG9mIHVuY2VydGFpbnRpZXMgaXMgZGVzY3JpYmVkIGluIGRldGFpbCBhbG9uZyB3aXRoIGFuIGV4YW1wbGUgb2YgbWVhc3VyaW5nIHRoZSBtYXNzIGZyYWN0aW9uIG9mIG1hZ25lc2l1bSBpbiBhbiBveXN0ZXIgcG93ZGVyIENSTS48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3MzciPmh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzk3Mzc8L2E+CjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0gcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtY2xvc2VkIHJldmVhbC1wbHVzLWljb24iPgogICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS1ib2R5Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0iZXllYnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlRoZSBmb2xsb3dpbmcgYXJ0aWNsZSBpcyA8L3NwYW4+PHNwYW4gY2xhc3M9InJlZCI+T3BlbiBhY2Nlc3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MTg3IiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgUFRC4oCTSU5SSU0gY29tcGFyaXNvbiBvZiBub3ZlbCBkaWdpdGFsIGltcGVkYW5jZSBicmlkZ2VzIHdpdGggZ3JhcGhlbmUgaW1wZWRhbmNlIHF1YW50dW0gc3RhbmRhcmRzPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCU1hcnRpbmEgTWFyemFubyA8ZW0+ZXQgYWw8L2VtPiAyMDIyIDxlbT5NZXRyb2xvZ2lhPC9lbT4gPGI+NTk8L2I+IDA2NTAwMTwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iUFRC4oCTSU5SSU0gY29tcGFyaXNvbiBvZiBub3ZlbCBkaWdpdGFsIGltcGVkYW5jZSBicmlkZ2VzIHdpdGggZ3JhcGhlbmUgaW1wZWRhbmNlIHF1YW50dW0gc3RhbmRhcmRzIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iUFRC4oCTSU5SSU0gY29tcGFyaXNvbiBvZiBub3ZlbCBkaWdpdGFsIGltcGVkYW5jZSBicmlkZ2VzIHdpdGggZ3JhcGhlbmUgaW1wZWRhbmNlIHF1YW50dW0gc3RhbmRhcmRzIglkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFic3RyYWN0IiBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgbXItMiBub3dyYXAiIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWJzdHJhY3QiPk9wZW4gYWJzdHJhY3Q8L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzkxODcvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFydGljbGU8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO1BUQuKAk0lOUklNIGNvbXBhcmlzb24gb2Ygbm92ZWwgZGlnaXRhbCBpbXBlZGFuY2UgYnJpZGdlcyB3aXRoIGdyYXBoZW5lIGltcGVkYW5jZSBxdWFudHVtIHN0YW5kYXJkcyZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzkxODcvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7UFRC4oCTSU5SSU0gY29tcGFyaXNvbiBvZiBub3ZlbCBkaWdpdGFsIGltcGVkYW5jZSBicmlkZ2VzIHdpdGggZ3JhcGhlbmUgaW1wZWRhbmNlIHF1YW50dW0gc3RhbmRhcmRzPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5UaGlzIHBhcGVyIGRlc2NyaWJlcyBhbiBvbnNpdGUgY29tcGFyaXNvbiBvZiB0d28gZGlmZmVyZW50IGRpZ2l0YWwgaW1wZWRhbmNlIGJyaWRnZXMgd2hlbiBwZXJmb3JtaW5nIG1lYXN1cmVtZW50cyBvbiBhIHF1YW50dW0gSGFsbCByZXNpc3RhbmNlIHN0YW5kYXJkIHdpdGggdGhlIHB1cnBvc2Ugb2YgcmVhbGl6aW5nIHRoZSBTSSB1bml0IG9mIGNhcGFjaXRhbmNlLCB0aGUgZmFyYWQuIEluIHRoZSBFTVBJUiBKb2ludCBSZXNlYXJjaCBQcm9qZWN0IDE4U0lCMDcgR0lRUywgPGk+Z3JhcGhlbmUgaW1wZWRhbmNlIHF1YW50dW0gc3RhbmRhcmRzPC9pPiwgdGhlIFBoeXNpa2FsaXNjaC1UZWNobmlzY2hlIEJ1bmRlc2Fuc3RhbHQgKFBUQiksIEdlcm1hbnksIGRldmVsb3BlZCBhIEpvc2VwaHNvbiBpbXBlZGFuY2UgYnJpZGdlLCBhbmQgdGhlIElzdGl0dXRvIE5hemlvbmFsZSBkaSBSaWNlcmNhIE1ldHJvbG9naWNhIChJTlJJTSkgYW5kIHRoZSBQb2xpdGVjbmljbyBkaSBUb3Jpbm8gKFBPTElUTyksIEl0YWx5LCBkZXZlbG9wZWQgYW4gZWxlY3Ryb25pYyBkaWdpdGFsIGltcGVkYW5jZSBicmlkZ2UuIFRoZSBmb3JtZXIgaXMgYmFzZWQgb24gSm9zZXBoc29uIHdhdmVmb3JtIGdlbmVyYXRvcnMgYW5kIHRoZSBsYXR0ZXIgb24gYW4gZWxlY3Ryb25pYyB3YXZlZm9ybSBzeW50aGVzaXplci4gVGhlIElOUklN4oCTUE9MSVRPIGltcGVkYW5jZSBicmlkZ2Ugd2FzIG1vdmVkIHRvIFBUQiBhbmQgdGhlIHR3byBicmlkZ2VzIHdlcmUgY29tcGFyZWQgYnkgbWVhc3VyaW5nIGJvdGggdGVtcGVyYXR1cmUtY29udHJvbGxlZCBzdGFuZGFyZHMgYW5kIGEgZ3JhcGhlbmUgQUMgcXVhbnRpemVkIEhhbGwgcmVzaXN0YW5jZSAoUUhSKSBzdGFuZGFyZC4gVGhlIHVuY2VydGFpbnRpZXMgZm9yIHRoZSBjYWxpYnJhdGlvbiBvZiAxMCBuRiBjYXBhY2l0YW5jZSBzdGFuZGFyZHMgYXQgMTIzM8KgSHogYXJlIHdpdGhpbiAxIDxiPiYjeDAwZDc7PC9iPiAxMDxzdXA+4oiSODwvc3VwPiBmb3IgdGhlIFBUQidzIGJyaWRnZSBhbmQgYXJvdW5kIDEgPGI+JiN4MDBkNzs8L2I+IDEwPHN1cD7iiJI3PC9zdXA+IGZvciB0aGUgSU5SSU3igJNQT0xJVE8ncyBicmlkZ2UuIFRoZSBjb21wYXJpc29uIG11dHVhbGx5IHZhbGlkYXRlcyB0aGUgdHdvIGJyaWRnZXMgd2l0aGluIHRoZSBjb21iaW5lZCB1bmNlcnRhaW50eS4gVGhlIHJlc3VsdCBjb25maXJtcyB0aGF0IGRpZ2l0YWwgaW1wZWRhbmNlIGJyaWRnZXMgYWxsb3cgdGhlIHJlYWxpemF0aW9uIG9mIHRoZSBTSSBmYXJhZCBmcm9tIHRoZSBRSFIgd2l0aCB1bmNlcnRhaW50aWVzIGNvbXBhcmFibGUgd2l0aCB0aGUgYmVzdCBjYWxpYnJhdGlvbiBjYXBhYmlsaXRpZXMgb2YgdGhlIEJJUE0gYW5kIHRoZSBtYWpvciBOYXRpb25hbCBNZXRyb2xvZ3kgSW5zdGl0dXRlcy48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzkxODciPmh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzkxODc8L2E+CjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0gcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtY2xvc2VkIHJldmVhbC1wbHVzLWljb24iPgogICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS1ib2R5Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0iZXllYnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlRoZSBmb2xsb3dpbmcgYXJ0aWNsZSBpcyA8L3NwYW4+PHNwYW4gY2xhc3M9InJlZCI+T3BlbiBhY2Nlc3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MzhjIiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgTG9uZy10ZXJtIHNwZWN0cmFsIHJlc3BvbnNpdml0eSBzdGFiaWxpdHkgb2YgUHJlZGljdGFibGUgUXVhbnR1bSBFZmZpY2llbnQgRGV0ZWN0b3JzPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCUdlaWxhbmQgUG9ycm92ZWNjaGlvIDxlbT5ldCBhbDwvZW0+IDIwMjIgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj48L2I+IDwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iTG9uZy10ZXJtIHNwZWN0cmFsIHJlc3BvbnNpdml0eSBzdGFiaWxpdHkgb2YgUHJlZGljdGFibGUgUXVhbnR1bSBFZmZpY2llbnQgRGV0ZWN0b3JzIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iTG9uZy10ZXJtIHNwZWN0cmFsIHJlc3BvbnNpdml0eSBzdGFiaWxpdHkgb2YgUHJlZGljdGFibGUgUXVhbnR1bSBFZmZpY2llbnQgRGV0ZWN0b3JzIglkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFic3RyYWN0IiBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgbXItMiBub3dyYXAiIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWJzdHJhY3QiPk9wZW4gYWJzdHJhY3Q8L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzkzOGMvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFydGljbGU8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO0xvbmctdGVybSBzcGVjdHJhbCByZXNwb25zaXZpdHkgc3RhYmlsaXR5IG9mIFByZWRpY3RhYmxlIFF1YW50dW0gRWZmaWNpZW50IERldGVjdG9ycyZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzkzOGMvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7TG9uZy10ZXJtIHNwZWN0cmFsIHJlc3BvbnNpdml0eSBzdGFiaWxpdHkgb2YgUHJlZGljdGFibGUgUXVhbnR1bSBFZmZpY2llbnQgRGV0ZWN0b3JzPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5UaGUgc3RhYmlsaXR5IG9mIGluZHVjZWQganVuY3Rpb24gc2lsaWNvbiBwaG90b2Rpb2RlcyB1c2VkIHRvIGNvbnN0cnVjdCB0aGUgUHJlZGljdGFibGUgUXVhbnR1bSBFZmZpY2llbnQgRGV0ZWN0b3IgKFBRRUQpIGhhcyBiZWVuIHN0dWRpZWQgb3ZlciBhIHRpbWUgcGVyaW9kIG9mIGEgZGVjYWRlIGJ5IG1lYXN1cmVtZW50cyBvZiBpdHMgc3BlY3RyYWwgcmVzcG9uc2l2aXR5IGFnYWluc3QgYWJzb2x1dGUgY3J5b2dlbmljIHJhZGlvbWV0ZXJzIChDUikgaW4gdHdvIGluZGVwZW5kZW50IGxhYm9yYXRvcmllcyBhdCBDTUkgYW5kIFBUQi4gUFFFRHMgb3BlcmF0ZWQgYXQgcm9vbSB0ZW1wZXJhdHVyZSBzaG93IGEgbG9uZy10ZXJtIHRlbXBvcmFsIHN0YWJpbGl0eSB3aXRoaW4gMTUwIHBwbSBvdmVyIGEgYnJvYWQgc3BlY3RyYWwgcmFuZ2UgZHVyaW5nIGEgMTAteWVhciBwZXJpb2QsIHdlbGwgd2l0aGluIHRoZSByYW5nZSBvZiB0aGUgY2xhaW1lZCBtZWFzdXJlbWVudCB1bmNlcnRhaW50eSB2YWx1ZXMgb2YgdGhlIGNyeW9nZW5pYyByYWRpb21ldGVycy4gVGhpcyBsb25nIHRlcm0gc3RhYmlsaXR5IGZ1bGZpbHMgb25lIG9mIHRoZSBmdW5kYW1lbnRhbCByZXF1aXJlbWVudCB0byBlc3RhYmxpc2ggYSBuZXcgcHJpbWFyeSBzdGFuZGFyZCBmb3IgdGhlIG1lYXN1cmVtZW50IG9mIHBvd2VyIG9mIG9wdGljYWwgcmFkaWF0aW9uLjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTM4YyI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTM4YzwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbSByZXZlYWwtY29udGFpbmVyIHJldmVhbC1jbG9zZWQgcmV2ZWFsLXBsdXMtaWNvbiI+CiAgICA8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLWJvZHkiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleWVicm93Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+VGhlIGZvbGxvd2luZyBhcnRpY2xlIGlzIDwvc3Bhbj48c3BhbiBjbGFzcz0icmVkIj5PcGVuIGFjY2Vzczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzkzOGQiIGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRpdGxlIGV2ZW50X21haW4tbGluayI+CiAgICAgICAgICAgICAgICBGZW10b3NlY29uZC1jb21iIGJhc2VkIDEwIE1Iei10by1vcHRpY2FsIGZyZXF1ZW5jeSBsaW5rIHdpdGggdW5jZXJ0YWludHkgYXQgdGhlIDEwPHN1cD7iiJIxODwvc3VwPiBsZXZlbDwvYT4KICAgICAgICAgICAgPHAgY2xhc3M9InNtYWxsIGFydC1saXN0LWl0ZW0tbWV0YSI+CgkJCQlNYXNhdG8gV2FkYSBhbmQgSGFqaW1lIEluYWJhIDIwMjIgPGVtPk1ldHJvbG9naWE8L2VtPiA8Yj48L2I+IDwvcD4KCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci11cHBlciI+CgkJCQk8YSBocmVmPSIiIGRhdGEtbGluay1wdXJwb3NlLWFwcGVuZD0iRmVtdG9zZWNvbmQtY29tYiBiYXNlZCAxMCBNSHotdG8tb3B0aWNhbCBmcmVxdWVuY3kgbGluayB3aXRoIHVuY2VydGFpbnR5IGF0IHRoZSAxMOKIkjE4IGxldmVsIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQtb3Blbj0iRmVtdG9zZWNvbmQtY29tYiBiYXNlZCAxMCBNSHotdG8tb3B0aWNhbCBmcmVxdWVuY3kgbGluayB3aXRoIHVuY2VydGFpbnR5IGF0IHRoZSAxMOKIkjE4IGxldmVsIglkYXRhLXJldmVhbC1sYWJlbC1hbHQ9IkNsb3NlIGFic3RyYWN0IiBjbGFzcz0icmV2ZWFsLXRyaWdnZXIgbXItMiBub3dyYXAiIGRhdGEtcmV2ZWFsLXRleHQ9Ik9wZW4gYWJzdHJhY3QiPk9wZW4gYWJzdHJhY3Q8L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzkzOGQvbWV0YSIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlZpZXcgYXJ0aWNsZSI+IDxzcGFuIGNsYXNzPSJpY29uLWFydGljbGUiPjwvc3Bhbj5WaWV3IGFydGljbGU8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO0ZlbXRvc2Vjb25kLWNvbWIgYmFzZWQgMTAgTUh6LXRvLW9wdGljYWwgZnJlcXVlbmN5IGxpbmsgd2l0aCB1bmNlcnRhaW50eSBhdCB0aGUgMTDiiJIxOCBsZXZlbCZuYnNwOzwvc3Bhbj48L2E+CgkJCQk8YSBocmVmPSIvYXJ0aWNsZS8xMC4xMDg4LzE2ODEtNzU3NS9hYzkzOGQvcGRmIiBjbGFzcz0ibXItMiBub3dyYXAgZXZlbnRfbWluaS1saW5rIiBkYXRhLWV2ZW50LWFjdGlvbj0iUERGIj48c3BhbgljbGFzcz0iaWNvbi1maWxlLXBkZiI+PC9zcGFuPlBERjxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj4sJm5ic3A7RmVtdG9zZWNvbmQtY29tYiBiYXNlZCAxMCBNSHotdG8tb3B0aWNhbCBmcmVxdWVuY3kgbGluayB3aXRoIHVuY2VydGFpbnR5IGF0IHRoZSAxMOKIkjE4IGxldmVsPC9zcGFuPjwvYT4KCQkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJyZXZlYWwtY29udGVudCI+CgkJCQk8ZGl2IGNsYXNzPSJhcnRpY2xlLXRleHQgdmlldy10ZXh0LXNtYWxsIj48cD5UaGUgSW50ZXJuYXRpb25hbCBTeXN0ZW0gb2YgVW5pdHMgKFNJKSBkZWZpbml0aW9uIG9mIHRoZSAic2Vjb25kIiBpcyBsaWtlbHkgdG8gYmUgcmVkZWZpbmVkIGluIHRoZSBvcHRpY2FsIGZyZXF1ZW5jeSByZWdpb24gaW4gdGhlIG5lYXIgZnV0dXJlLiBUaGVyZWZvcmUsIHVuY2VydGFpbnR5IHJlZHVjdGlvbiBpbiB0aGUgZnJlcXVlbmN5IGxpbmsgYmV0d2VlbiAxMCBNSHosIHdoaWNoIGlzIHVzZWQgaW4gdGhlIGZyZXF1ZW5jeSBsaW5rIHdpdGggYW4gYXJ0aWZpY2lhbCBzYXRlbGxpdGUsIGFuZCB0aGUgdWx0cmFzdGFibGUgbGFzZXIgZm9yIG9ic2VydmluZyBjbG9jayB0cmFuc2l0aW9ucyBpbiBvcHRpY2FsIGNsb2NrcywgaXMgYW4gaW1wb3J0YW50IGlzc3VlIGZvciBudW1lcmljYWwgZGV0ZXJtaW5hdGlvbiBpbiB0aGUgbmV3IGRlZmluaXRpb24gYW5kIGZvciBJbnRlcm5hdGlvbmFsIEF0b21pYyBUaW1lIChUQUkpIG9wZXJhdGlvbiBhZnRlciB0aGUgcmVkZWZpbml0aW9uLiBXZSBoYXZlIGV2YWx1YXRlZCBhbGwgdGhlIHBvc3NpYmxlIHVuY2VydGFpbnR5IGZhY3RvcnMgaW4gdGhlIGZyZXF1ZW5jeSBsaW5rIHdpdGggYSBmZW10b3NlY29uZCBjb21iIGJldHdlZW4gMTAgTUh6IGFuZCBhbiBvcHRpY2FsIGZyZXF1ZW5jeSBhbmQgb2J0YWluZWQgdGhlIGxvd2VzdCB1bmNlcnRhaW50eSB5ZXQgcmVwb3J0ZWQgb2YgMy45IDxiPiYjeDAwZDc7PC9iPiAxMDxzdXA+4oiSMTg8L3N1cD4gYnkgdGVtcGVyYXR1cmUtc3RhYmlsaXppbmcgUkYgbXVsdGlwbGllcnMgYW5kIGJ5IHVzaW5nIHRlbXBlcmF0dXJlIGluc2Vuc2l0aXZlIGNvYXhpYWwgY2FibGVzLiBGdXJ0aGVybW9yZSwgd2UgaGF2ZSB2YWxpZGF0ZWQgdGhlIHVuY2VydGFpbnR5IG9mIHRoZSBmcmVxdWVuY3kgbGluayBieSBzaW11bHRhbmVvdXNseSBtZWFzdXJpbmcgYW4gb3B0aWNhbCBmcmVxdWVuY3kgb2YgYW4gaWRlbnRpY2FsIGxhc2VyIHVzaW5nIHR3byBmZW10b3NlY29uZCBjb21icyByZWZlcmVuY2VkIHRvIGEgY29tbW9uIDEwIE1IeiBzb3VyY2UgYW5kIGNvbmZpcm1lZCB0byBiZSBjb25zaXN0ZW50IHdpdGggdGhlIGV2YWx1YXRlZCB1bmNlcnRhaW50eS48L3A+PC9kaXY+CgkJCQkJPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10b29scyBzbWFsbCB3ZC1hYnN0ci1sb3dlciI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1yLTIiCWhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzkzOGQiPmh0dHBzOi8vZG9pLm9yZy8xMC4xMDg4LzE2ODEtNzU3NS9hYzkzOGQ8L2E+CjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0gcmV2ZWFsLWNvbnRhaW5lciByZXZlYWwtY2xvc2VkIHJldmVhbC1wbHVzLWljb24iPgogICAgPGRpdiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS1ib2R5Ij4KCiAgICAgICAgPGRpdiBjbGFzcz0iZXllYnJvdyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPlRoZSBmb2xsb3dpbmcgYXJ0aWNsZSBpcyA8L3NwYW4+PHNwYW4gY2xhc3M9InJlZCI+T3BlbiBhY2Nlc3M8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MzhlIiBjbGFzcz0iYXJ0LWxpc3QtaXRlbS10aXRsZSBldmVudF9tYWluLWxpbmsiPgogICAgICAgICAgICAgICAgQ29oZXJlbnQgZmliZXIgbGlua3Mgb3BlcmF0ZWQgZm9yIHllYXJzOiBlZmZlY3Qgb2YgbWlzc2luZyBkYXRhPC9hPgogICAgICAgICAgICA8cCBjbGFzcz0ic21hbGwgYXJ0LWxpc3QtaXRlbS1tZXRhIj4KCQkJCU1hZHMgVMO4bm5lcyA8ZW0+ZXQgYWw8L2VtPiAyMDIyIDxlbT5NZXRyb2xvZ2lhPC9lbT4gPGI+PC9iPiA8L3A+CgkJCTxkaXYgY2xhc3M9ImFydC1saXN0LWl0ZW0tdG9vbHMgc21hbGwgd2QtYWJzdHItdXBwZXIiPgoJCQkJPGEgaHJlZj0iIiBkYXRhLWxpbmstcHVycG9zZS1hcHBlbmQ9IkNvaGVyZW50IGZpYmVyIGxpbmtzIG9wZXJhdGVkIGZvciB5ZWFyczogZWZmZWN0IG9mIG1pc3NpbmcgZGF0YSIgZGF0YS1saW5rLXB1cnBvc2UtYXBwZW5kLW9wZW49IkNvaGVyZW50IGZpYmVyIGxpbmtzIG9wZXJhdGVkIGZvciB5ZWFyczogZWZmZWN0IG9mIG1pc3NpbmcgZGF0YSIJZGF0YS1yZXZlYWwtbGFiZWwtYWx0PSJDbG9zZSBhYnN0cmFjdCIgY2xhc3M9InJldmVhbC10cmlnZ2VyIG1yLTIgbm93cmFwIiBkYXRhLXJldmVhbC10ZXh0PSJPcGVuIGFic3RyYWN0Ij5PcGVuIGFic3RyYWN0PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MzhlL21ldGEiIGNsYXNzPSJtci0yIG5vd3JhcCBldmVudF9taW5pLWxpbmsiIGRhdGEtZXZlbnQtYWN0aW9uPSJWaWV3IGFydGljbGUiPiA8c3BhbiBjbGFzcz0iaWNvbi1hcnRpY2xlIj48L3NwYW4+VmlldyBhcnRpY2xlPHNwYW4gY2xhc3M9Im9mZnNjcmVlbi1oaWRkZW4iPiwmbmJzcDtDb2hlcmVudCBmaWJlciBsaW5rcyBvcGVyYXRlZCBmb3IgeWVhcnM6IGVmZmVjdCBvZiBtaXNzaW5nIGRhdGEmbmJzcDs8L3NwYW4+PC9hPgoJCQkJPGEgaHJlZj0iL2FydGljbGUvMTAuMTA4OC8xNjgxLTc1NzUvYWM5MzhlL3BkZiIgY2xhc3M9Im1yLTIgbm93cmFwIGV2ZW50X21pbmktbGluayIgZGF0YS1ldmVudC1hY3Rpb249IlBERiI+PHNwYW4JY2xhc3M9Imljb24tZmlsZS1wZGYiPjwvc3Bhbj5QREY8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+LCZuYnNwO0NvaGVyZW50IGZpYmVyIGxpbmtzIG9wZXJhdGVkIGZvciB5ZWFyczogZWZmZWN0IG9mIG1pc3NpbmcgZGF0YTwvc3Bhbj48L2E+CgkJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0icmV2ZWFsLWNvbnRlbnQiPgoJCQkJPGRpdiBjbGFzcz0iYXJ0aWNsZS10ZXh0IHZpZXctdGV4dC1zbWFsbCI+PHA+QWltaW5nIGF0IGRlbGl2ZXJpbmcgYSBoaWdobHkgYXZhaWxhYmxlIHNlcnZpY2UsIHRoZSBGcmVuY2ggbmF0aW9uYWwgb3B0aWNhbCBmaWJlciBsaW5rIG5ldHdvcmsgaXMgcnVuIG1vc3RseSB1bm1hbm5lZCBhbmQgYXV0b21hdGljYWxseSwgd2l0aCB0aGUgaGVscCBvZiBhIGdsb2JhbCBzdXBlcnZpc2lvbi4gSG93ZXZlciwgYXQgYSB5ZWFyIHNjYWxlLCBtaXNzaW5nIGRhdGEgYXJlIHNlZW1pbmdseSB1bmF2b2lkYWJsZS4gSGVyZSwgd2UgcHJlc2VudCBhIGZpcnN0IHN0dWR5IG9mIHRoZSB1bmNlcnRhaW50eSBvZiBjb2hlcmVudCBmaWJlciBsaW5rcyB3aXRoIG1pc3NpbmcgZGF0YS4gV2UgcHJlc2VudCB0aGUgdG9vbHMgd2UgZWxhYm9yYXRlIHRvIGFzc2VzcyBzdGF0aXN0aWNhbCBwcm9wZXJ0aWVzIGZvciBwcm9jZXNzZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBzdGF0aW9uYXJ5LCBhIHNpbXVsYXRpb24gb2Ygb3B0aWNhbCBmaWJlciBsaW5rcyBkZXBlbmRpbmcgb25seSBvbiBhIGhhbmRmdWwgb2YgcGFyYW1ldGVycy4gV2Ugc2hvdyBob3cgbWlzc2luZyBkYXRhIGFmZmVjdHMgdGhlIHBoYXNlLWNvaGVyZW50IG9wdGljYWwgZmliZXIgbGlua3MsIGFuZCBob3cgdG8gbWl0aWdhdGUgdGhlIGlzc3VlIHdpdGggYSBmaWxsLWluIHByb2NlZHVyZSB0aGF0IHByZXNlcnZlcyB0aGUgc3RhdGlzdGljYWwgcHJvcGVydGllcy4gV2UgYXBwbHkgdGhlIG1ldGhvZCBmb3IgYSA1LXllYXItbG9uZyBkYXRhIHNldCBvZiBhIDE0MTAga20gbG9uZyBmaWJlciBsaW5rLiBTZWNvbmQsIHdlIGFwcGx5IHRoZSBtZXRob2QgdG8gdGhlIGNhc2Ugb2Ygb3B0aWNhbCBjbG9jayBjb21wYXJpc29ucywgd2hlcmUgdGhlIGRvd250aW1lcyBvZiB0aGUgb3B0aWNhbCBjbG9ja3MgZGVncmFkZSB0aGUgY29oZXJlbmNlIG9mIHRoZSBsaW5rcy4gV2Ugc2hvdyB0aGF0IG91ciBtZXRob2RvbG9neSBvZiBwcm9jZXNzaW5nIHRoZSBtaXNzaW5nIGRhdGEgaXMgcm9idXN0IGFuZCBjb252ZXJnZSB0byBjb25zaXN0ZW50IG1lYW4gdmFsdWVzLCBldmVuIHdpdGggIHZlcnkgbG93IHVwdGltZXMuIFdlIHByZXNlbnQgYW4gb2Zmc2V0IGFuZCB1bmNlcnRhaW50eSBjb250cmlidXRpb24gZnJvbSB0aGUgRnJlbmNoIGZpYmVyIG5ldHdvcmsgb2YgMi40KDkwKSoxMF4tMjAsIHRoYXQgaXMgYW4gaW1wcm92ZW1lbnQgYnkgYSBmYWN0b3IgNSBhcyBjb21wYXJlZCB0byBhIHByb2Nlc3Npbmcgd2l0aG91dCB0YWtpbmcgdGhlIGVmZmVjdCBvZiBtaXNzaW5nIGRhdGEgaW50byBhY2NvdW50LjwvcD48L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJhcnQtbGlzdC1pdGVtLXRvb2xzIHNtYWxsIHdkLWFic3RyLWxvd2VyIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibXItMiIJaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTM4ZSI+aHR0cHM6Ly9kb2kub3JnLzEwLjEwODgvMTY4MS03NTc1L2FjOTM4ZTwvYT4KPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2Pgo8L2Rpdj4KPC9kaXY+CjxwPgoJCTxhIGhyZWY9Ii9uc2VhcmNoP3Rlcm1zPSZuZXh0UGFnZT0yJnByZXZpb3VzUGFnZT0tMSZjdXJyZW50UGFnZT0xJnNlYXJjaERhdGVQZXJpb2Q9YW55dGltZSZqb3VybmFscz0wMDI2LTEzOTQmYWNjZXNzVHlwZT1vcGVuLWFjY2VzcyZvcmRlckJ5PW5ld2VzdCZwYWdlTGVuZ3RoPTIwIj5Nb3JlCgkJCU9wZW4gQWNjZXNzIGFydGljbGVzPC9hPgoJPC9wPgo8L2Rpdj4KPC9kaXY+CjwvZGl2PgoJCQkJCQkJCQkJCQkJICA8IS0tIEVuZCBPcGVuIEFjY2VzcyB0YWJwYW5lbCAtLT4KCgkJCQkJCQkJCQkJCSAgPCEtLSBTdGFydCBTcG90bGlnaHRzIHRhYnBhbmVsIC0tPgoKCQkJCQkJCQkJCQkJICA8IS0tIEVuZCBTcG90bGlnaHRzIHRhYnBhbmVsIC0tPgoKCQkJCQkJCQkJCQkJICA8L2Rpdj4KCgkJCQkJCQkJCQkJCSAgPCEtLSBFbmQgQXJ0aWNsZSBsaXN0aW5nIHRhYnMgLS0+CjwhLS0gR29vZ2xlIGFkdmVydHMgc3RhcnQgLS0+CiAgICAgICAgPCEtLSAgU3RhcnQgb2YgZ29vZ2xlIGJhbm5lcnMgb24gdGhlIG1pZGRsZS4gIC0tPgo8YXNpZGU+CiAgICA8ZGl2IGlkPSdkaXYtZ3B0LWFkLTE1NjI1OTQ3NzQwMDctMCcgc3R5bGU9J3dpZHRoOiA3MjhweDsgaGVpZ2h0OiA5MHB4Oyc+CiAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uKCkgeyBnb29nbGV0YWcuZGlzcGxheSgnZGl2LWdwdC1hZC0xNTYyNTk0Nzc0MDA3LTAnKTsgfSk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICA8L2Rpdj4KPC9hc2lkZT4KPCEtLSAgRW5kIG9mIGdvb2dsZSBiYW5uZXJzIG9uIHRoZSBtaWRkbGUuICAtLT4KPCEtLSBHb29nbGUgYWR2ZXJ0cyBlbmQgLS0+CiAgICA8L2Rpdj4KCjwhLS0gRW5kIEpvdXJuYWwgQ29udGVudCAtLT4KPC9kaXY+CiAgICAgICAgICAgIDwvbWFpbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRiMiB0YjIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZS1hbmQtYmVsb3ciPgogICAgICAgICAgICAgICAgICAgIDwhLS0gU3RhcnQgSm91cm5hbCBTaWRlYmFyIC0tPgoKPCEtLSBTdGFydCBKb3VybmFsIGxpbmtzIC0tPgo8YXNpZGUgaWQ9IndkLWpubC1saW5rcyI+CiAgICAgICAgPGgyIGNsYXNzPSJyZXBsaWNhLWg0Ij5Kb3VybmFsIGxpbmtzPC9oMj4KICAgICAgICA8dWw+PGxpPjxhIGhyZWYgPSAiaHR0cDovL21jMDQubWFudXNjcmlwdGNlbnRyYWwuY29tL21ldC1iaXBtIiB0YXJnZXQ9Il9ibGFuayI+PHN0cm9uZz5TdWJtaXQgYW4gYXJ0aWNsZTwvc3Ryb25nPjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9wdWJsaXNoaW5nc3VwcG9ydC5pb3BzY2llbmNlLmlvcC5vcmcvam91cm5hbHMvbWV0cm9sb2dpYS9hYm91dC1tZXRyb2xvZ2lhLyI+QWJvdXQgdGhlIGpvdXJuYWw8L2E+PC9saT4KPGxpPjxhIGhyZWY9Ii8wMDI2LTEzOTQvcGFnZS9FZGl0b3JpYWwgQm9hcmQiPkVkaXRvcmlhbCBib2FyZDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9wdWJsaXNoaW5nc3VwcG9ydC5pb3BzY2llbmNlLmlvcC5vcmcvam91cm5hbHMvbWV0cm9sb2dpYS8iPkF1dGhvciBndWlkZWxpbmVzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL3B1Ymxpc2hpbmdzdXBwb3J0LmlvcHNjaWVuY2UuaW9wLm9yZy9xdWVzdGlvbnMvdm9sdW50ZWVyaW5nLXRvLWJlLWEtam91cm5hbC1yZXZpZXdlciI+UmV2aWV3IGZvciB0aGlzIGpvdXJuYWw8L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9wdWJsaXNoaW5nc3VwcG9ydC5pb3BzY2llbmNlLmlvcC5vcmcvam91cm5hbHMvbWV0cm9sb2dpYS9hYm91dC1tZXRyb2xvZ2lhLyNwdWJsaWNhdGlvbi1jaGFyZ2VzIj5QdWJsaWNhdGlvbiBjaGFyZ2VzPC9hPjwvbGk+CjxsaT48YSBocmVmPSIvMDAyNi0xMzk0L3BhZ2UvSm91cm5hbF9uZXdzIj5OZXdzIGFuZCBlZGl0b3JpYWw8L2E+PC9saT4KPGxpPjxhIGhyZWY9Ii8wMDI2LTEzOTQvcGFnZS9Bd2FyZHMvIj5Bd2FyZHM8L2E+PC9saT4KPGxpPjxhIGhyZWY9Ii8wMDI2LTEzOTQvcGFnZS9Kb3VybmFsX2NvbGxlY3Rpb25zIj5Kb3VybmFsIGNvbGxlY3Rpb25zPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2lvcHB1Ymxpc2hpbmcub3JnL2xpYnJhcmlhbnMvIj5QcmljaW5nIGFuZCBvcmRlcmluZzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iLzAwMjYtMTM5NC9wYWdlL0NvbnRhY3RfdXMiPkNvbnRhY3QgdXM8L2E+PC9saT4KPC91bD4KICAgICAgICA8L2FzaWRlPgo8IS0tIEVuZCBKb3VybmFsIGxpbmtzIC0tPgo8IS0tIFN0YXJ0IGpvdXJuYWwgcGFydG5lcnMgbGlzdCAtLT4KPCEtLSBFbmQgam91cm5hbCBwYXJ0bmVycyBsaXN0IC0tPgoKPCEtLSBHb29nbGUgYWR2ZXJ0cyBzdGFydCAtLT4KICAgIDwhLS0gIFN0YXJ0IG9mIGdvb2dsZSBiYW5uZXJzIG9uIHJpZ2h0IGhhbmQgc2lkZS4gIC0tPgo8YXNpZGUgcm9sZT0iY29tcGxlbWVudGFyeSIgYXJpYS1sYWJlbD0iQWR2ZXJ0cyI+CiAgICA8ZGl2IGlkPSdkaXYtZ3B0LWFkLTE1NjI1OTUwMDkxMDMtMCcgc3R5bGU9J3dpZHRoOiAxODBweDsgaGVpZ2h0OiAxNTBweDsnPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpIHsgZ29vZ2xldGFnLmRpc3BsYXkoJ2Rpdi1ncHQtYWQtMTU2MjU5NTAwOTEwMy0wJyk7IH0pOwogICAgICAgIDwvc2NyaXB0PgogICAgPC9kaXY+CgogICAgPGRpdiBpZD0nZGl2LWdwdC1hZC0xNTYyNTk1MDQyNTk1LTAnIHN0eWxlPSd3aWR0aDogMTgwcHg7IGhlaWdodDogMTUwcHg7Jz4KICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24oKSB7IGdvb2dsZXRhZy5kaXNwbGF5KCdkaXYtZ3B0LWFkLTE1NjI1OTUwNDI1OTUtMCcpOyB9KTsKICAgICAgICA8L3NjcmlwdD4KICAgIDwvZGl2PgoKICAgIDxkaXYgaWQ9J2Rpdi1ncHQtYWQtMTU2MjU5NTA2MjE5My0wJyBzdHlsZT0nd2lkdGg6IDE4MHB4OyBoZWlnaHQ6IDE1MHB4Oyc+CiAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uKCkgeyBnb29nbGV0YWcuZGlzcGxheSgnZGl2LWdwdC1hZC0xNTYyNTk1MDYyMTkzLTAnKTsgfSk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICA8L2Rpdj4KPC9hc2lkZT4KPCEtLSAgRW5kIG9mIGdvb2dsZSBiYW5uZXJzIG9uIHJpZ2h0IGhhbmQgc2lkZS4gIC0tPgo8IS0tIEdvb2dsZSBhZHZlcnRzIGVuZCAtLT4KPCEtLSBTdGFydCBKb3VybmFsIGhpc3RvcnkgLS0+CiAgICA8YXNpZGUgaWQ9IndkLWpubC1oaXN0b3J5Ij4KICAgICAgICA8aDIgY2xhc3M9InJlcGxpY2EtaDQiPkpvdXJuYWwgaW5mb3JtYXRpb248L2gyPgogICAgICAgIDx1bD4KICAgICAgICAgICAgPGxpPjE5NjUtcHJlc2VudAogICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgICBNZXRyb2xvZ2lhPGJyLz4KICAgICAgICAgICAgICAgIGRvaTogMTAuMTA4OC9pc3NuLjAwMjYtMTM5NDxici8+T25saW5lIElTU046IDAwMjYtMTM5NDxici8+UHJpbnQgSVNTTjogMDAyNi0xMzk0PGJyLz48L2xpPgogICAgICAgIDwvdWw+CiAgICAgICAgPGJyLz4KCiAgICAgICAgPC9hc2lkZT4KICAgIDwhLS0gRW5kIEpvdXJuYWwgaGlzdG9yeSAtLT4KPCEtLSBFbmQgSm91cm5hbCBTaWRlYmFyIC0tPgo8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8IS0tIEVuZCB0d28gY29sdW1uIGxheW91dCAtLT4KPC9kaXY+CgogICAgPGRpdiBkYXRhLXNjcm9sbC1oZWFkZXI9IiIgY2xhc3M9ImRhdGEtaGVhZGVyLWFuY2hvciIgaWQ9ImV4cCI+PC9kaXY+CjwhLS0gRm9vdGVyIHRpbGUgc3RhcnRzIC0tPgo8Zm9vdGVyIHJvbGU9ImNvbnRlbnRpbmZvIiBkYXRhLWZvb3Rlci1jb250ZW50PgogICAgPGRpdiBjbGFzcz0iaW9wcy1mb290ZXIgY2YiPgogICAgICAgIDxkaXYgY2xhc3M9IndyYXBwZXIiPgogICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IkZvb3RlciI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW9wcy1mb290ZXItbG9nbyIgaWQ9IndkLWlvcHMtZm9vdGVyLWxvZ28iIGl0ZW1wcm9wPSJ1cmwiIGhyZWY9Ii8iPgogICAgICAgICAgICAgICAgICAgIDxtZXRhIGNvbnRlbnQ9IklPUHNjaWVuY2UiIGl0ZW1wcm9wPSJuYW1lIj4KICAgICAgICAgICAgICAgICAgICA8c3ZnIGhlaWdodD0iMTMiIHdpZHRoPSI5MCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWFnZSB4bGluazpocmVmPSJodHRwczovL3N0YXRpYy5pb3BzY2llbmNlLmNvbS8yLjkyLjAvaW1nL2lvcHMtbG9nby5zdmciIHNyYz0iaHR0cHM6Ly9zdGF0aWMuaW9wc2NpZW5jZS5jb20vMi45Mi4wL2ltZy9pb3BzLWxvZ28ucG5nIiBib3JkZXI9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjEzIiB3aWR0aD0iOTAiLz4KICAgICAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib2Zmc2NyZWVuLWhpZGRlbiI+SU9QIFNjaWVuY2UgaG9tZTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDxzbWFsbD4KICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvam91cm5hbHMiPkpvdXJuYWxzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYm9va3MiPkJvb2tzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcGFnZS9hYm91dGlvcHNjaWVuY2UiPkFib3V0IElPUHNjaWVuY2U8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9jb250YWN0Ij5Db250YWN0IHVzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvaW5mby9wYWdlL2RldmVsb3BpbmctY291bnRyaWVzLWFjY2VzcyI+RGV2ZWxvcGluZyBjb3VudHJpZXMgYWNjZXNzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvaW5mby9wYWdlL29wZW5hY2Nlc3MiPklPUCBQdWJsaXNoaW5nIG9wZW4gYWNjZXNzIHBvbGljeTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8L3NtYWxsPgogICAgICAgICAgICA8L25hdj4KICAgICAgICA8L2Rpdj4gPCEtLSBlbmQgd3JhcHBlciAtLT4KICAgIDwvZGl2PiA8IS0tIGVuZCBpb3BwLWZvb3RlciAtLT4KCiAgICA8ZGl2IGNsYXNzPSJpb3BwLWZvb3RlciBjZiI+CiAgICAgICAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIG1hci0wICI+CiAgICAgICAgICAgICAgICA8bmF2IHJvbGU9Im5hdmlnYXRpb24iIGFyaWEtbGFiZWw9IkZ1cnRoZXIgaW5mb3JtYXRpb24gYWJvdXQgSU9QIFB1Ymxpc2hpbmciPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpb3BwLWZvb3Rlci1sb2dvIiBpZD0id2QtaW9wcC1mb290ZXItbG9nbyIgaXRlbXByb3A9InVybCIKICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwOi8vaW9wcHVibGlzaGluZy5vcmciPgogICAgICAgICAgICAgICAgICAgICAgICA8bWV0YSBjb250ZW50PSJJT1BzY2llbmNlIiBpdGVtcHJvcD0ibmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9IjEwMCIgaGVpZ2h0PSIxNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1hZ2UgeGxpbms6aHJlZj0iaHR0cHM6Ly9zdGF0aWMuaW9wc2NpZW5jZS5jb20vMi45Mi4wL2ltZy9pb3BwLWxvZ28td2hpdGUuc3ZnIiBzcmM9Imh0dHBzOi8vc3RhdGljLmlvcHNjaWVuY2UuY29tLzIuOTIuMC9pbWcvaW9wcC1sb2dvLnBuZyIgYm9yZGVyPSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxMDAiIGhlaWdodD0iMTUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvZmZzY3JlZW4taGlkZGVuIj5JT1AgUHVibGlzaGluZyBob21lPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5IG1hci0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzbWFsbCI+PGEgaHJlZj0iL3BhZ2UvY29weXJpZ2h0X25vdGljZSI+JmNvcHk7IENvcHlyaWdodCAyMDIyIElPUAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFB1Ymxpc2hpbmc8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic21hbGwiPjxhIGhyZWY9Ii9wYWdlL3Rlcm1zIj5UZXJtcyAmYW1wOyBjb25kaXRpb25zPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNtYWxsIj48YSBocmVmPSIvcGFnZS9kaXNjbGFpbWVyIj5EaXNjbGFpbWVyPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNtYWxsIj48YSBocmVmPSJodHRwOi8vaW9wcHVibGlzaGluZy5vcmcvcHJpdmFjeVBvbGljeSIgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWw9Im5vb3BlbmVyIj5Qcml2YWN5ICZhbXA7IGNvb2tpZSBwb2xpY3kgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Imljb24tbmV3dGFiIHdoaXRlLXRleHQiPjwvc3Bhbj48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic21hbGwiPjxzbWFsbD5UaGlzIHNpdGUgdXNlcyBjb29raWVzLiBCeSBjb250aW51aW5nIHRvIHVzZSB0aGlzIHNpdGUgeW91IGFncmVlIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3VyIHVzZSBvZiBjb29raWVzLjwvc21hbGw+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvbmF2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4gPCEtLSBlbmQgd3JhcHBlciAtLT4KICAgIDwvZGl2PiA8IS0tIGVuZCBpb3BwLWZvb3RlciAtLT4KPC9mb290ZXI+CjwhLS0gRm9vdGVyIHRpbGUgZW5kcyAtLT4KPHNjcmlwdD4KICB2YXIgaW1nQmFzZSA9ICJodHRwczovL3N0YXRpYy5pb3BzY2llbmNlLmNvbS8yLjkyLjAvaW1nIjsKICAvKiAgQ3V0dGluZyB0aGUgbXVzdGFyZCAtIGh0dHA6Ly9yZXNwb25zaXZlbmV3cy5jby51ay9wb3N0LzE4OTQ4NDY2Mzk5L2N1dHRpbmctdGhlLW11c3RhcmQgKi8KCiAgLyogVGhpcyBpcyB0aGUgb3JpZ2luYWwgaWYgc3RhdGVtZW50LCBmcm9tIHRoZSBsaW5rIGFib3ZlLiBJIGhhdmUgYW1lbmRlZCBpdCB0byB0dXJuIG9mIEpTIG9uIGFsbCBJRSBicm93c2VycyBsZXNzIHRoYW4gMTAuCglUaGlzIGlzIGR1ZSB0byBhIGZ1bmN0aW9uIGluIHRoZSBpb3AuanF1ZXJ5LnRvb2xiYXIuanMgbGluZSAzNS8zNi4gVXNlcyAucmVtb3ZlIHdoaWNoIGlzIG5vdCBuYXRpdmUganMgc3VwcG9ydGVkIGluIElFOSBvciBsb3dlciAqLwogIC8qIGlmKCdxdWVyeVNlbGVjdG9yJyBpbiBkb2N1bWVudAoJJiYgJ2xvY2FsU3RvcmFnZScgaW4gd2luZG93CgkmJiAnYWRkRXZlbnRMaXN0ZW5lcicgaW4gd2luZG93KSB7ICovCgogIC8qIFRoaXMgaXMgdGhlIHVwZGF0ZWQgc2VsZWN0b3IsIHRha2VuIGZyb206IGh0dHBzOi8vanVzdG1hcmt1cC5jb20vbG9nLzIwMTUvMDIvMjYvY3V0LXRoZS1tdXN0YXJkLXJldmlzaXRlZC8gKi8KCWlmKCd2aXNpYmlsaXR5U3RhdGUnIGluIGRvY3VtZW50KSB7CgoJLyohIGxvYWRKUzogbG9hZCBhIEpTIGZpbGUgYXN5bmNocm9ub3VzbHkuIFtjXTIwMTQgQHNjb3R0amVobCwgRmlsYW1lbnQgR3JvdXAsIEluYy4gKEJhc2VkIG9uIGh0dHA6Ly9nb28uZ2wvUkVRR1EgYnkgUGF1bCBJcmlzaCkuLiBMaWNlbnNlZCBNSVQgKi8KCWZ1bmN0aW9uIGxvYWRKUyggc3JjLCBjYiApewoJICAidXNlIHN0cmljdCI7CgkgIHZhciByZWYgPSB3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJzY3JpcHQiIClbIDAgXTsKCSAgdmFyIHNjcmlwdCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCAic2NyaXB0IiApOwoJICBzY3JpcHQuc3JjID0gc3JjOwoJICBzY3JpcHQuYXN5bmMgPSB0cnVlOwoJICByZWYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIHNjcmlwdCwgcmVmICk7CgkgIGlmIChjYiAmJiB0eXBlb2YoY2IpID09PSAiZnVuY3Rpb24iKSB7CgkJc2NyaXB0Lm9ubG9hZCA9IGNiOwoJICB9CgkgIHJldHVybiBzY3JpcHQ7Cgl9CgoJbG9hZEpTKCAiaHR0cHM6Ly9zdGF0aWMuaW9wc2NpZW5jZS5jb20vMi45Mi4wL2pzL3NjcmlwdHMubWluLmpzIiApOwoKICB9Cjwvc2NyaXB0Pgo8IS0tIEdlbmVyYWwgLSBDYWx0ZWNoIC0tPgo8c2NyaXB0PnZhciBleGNsdWRlZCA9IGZhbHNlO3ZhciBleGNsdWRlZF9wYWdlcyA9IFsnam91cm5hbC8wOTUzLTg5ODQnLCcvam91cm5hbC8xNzUxLTgxMjEnLCcvam91cm5hbC8yNTE1LTUxNzInLCcvam91cm5hbC8xNTM4LTM4ODEnLCcvam91cm5hbC8wMDA0LTYzN1gnLCcvam91cm5hbC8yMDQxLTgyMDUnLCcvam91cm5hbC8yNjMyLTMzMzgnLCcvam91cm5hbC8wMDY3LTAwNDknLCcvam91cm5hbC8xNzUxLTgxMjEnLCcvam91cm5hbC8wOTUzLTg5ODQnLCcvam91cm5hbExpc3QnXTtmb3IoaT0wO2k8ZXhjbHVkZWRfcGFnZXMubGVuZ3RoO2krKyl7aWYod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZihleGNsdWRlZF9wYWdlc1tpXSk+LTEpe2V4Y2x1ZGVkID0gdHJ1ZTt9fWlmKCFleGNsdWRlZCl7KGZ1bmN0aW9uKGcsZSxvLHQsYSxyLGdlLHRsLHkpe2NvbnNvbGUubG9nKCdwcm9jZXNzaW5nJyk7dD1nLmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpWzBdO3k9Zy5jcmVhdGVFbGVtZW50KGUpO3kuYXN5bmM9dHJ1ZTt2YXIgYT13aW5kb3csYj1nLmRvY3VtZW50RWxlbWVudCxjPWcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSx3PWEuaW5uZXJXaWR0aHx8Yi5jbGllbnRXaWR0aHx8Yy5jbGllbnRXaWR0aCxoPWEuaW5uZXJIZWlnaHR8fGIuY2xpZW50SGVpZ2h0fHxjLmNsaWVudEhlaWdodDt5LnNyYz0naHR0cHM6Ly9nMTc4Mjc1OTAxNi5jby9ncD9pZD0tTW56cnVJNGhudU1Cek40WkJsVCZyZWZ1cmw9JytnLnJlZmVycmVyKycmd2ludXJsPScrZW5jb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbikrJyZjdz0nK3crJyZjaD0nK2g7dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh5LHQpO30pKGRvY3VtZW50LCdzY3JpcHQnKTt9PC9zY3JpcHQ+CjwhLS0gRm9jdXMgLSBNYXRocyAtIENhbHRlY2ggLS0+CjxzY3JpcHQ+IChmdW5jdGlvbihnLGUsbyx0LGEscixnZSx0bCx5KXsgdD1nLmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpWzBdO3k9Zy5jcmVhdGVFbGVtZW50KGUpO3kuYXN5bmM9dHJ1ZTsgdmFyIGE9d2luZG93LGI9Zy5kb2N1bWVudEVsZW1lbnQsYz1nLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0sdz1hLmlubmVyV2lkdGh8fGIuY2xpZW50V2lkdGh8fGMuY2xpZW50V2lkdGgsaD1hLmlubmVySGVpZ2h0fHxiLmNsaWVudEhlaWdodHx8Yy5jbGllbnRIZWlnaHQ7IHkuc3JjPSdodHRwczovL2cxNzgyNzU5MDE2LmNvL2dwP2lkPS1NbnpyQTNKV1JQLTJwU2dvN0VpJnJlZnVybD0nK2cucmVmZXJyZXIrJyZ3aW51cmw9JytlbmNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uKSsnJmN3PScrdysnJmNoPScraDsgdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh5LHQpOyB9KShkb2N1bWVudCwnc2NyaXB0Jyk7PC9zY3JpcHQ+CjwhLS0gRm9jdXMgLSBDb25kZW5zZWQgc3ViamVjdCBjb2xsZWN0aW9uIC0gQ2FsdGVjaCAtLT4KPHNjcmlwdD4gKGZ1bmN0aW9uKGcsZSxvLHQsYSxyLGdlLHRsLHkpeyB0PWcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSlbMF07eT1nLmNyZWF0ZUVsZW1lbnQoZSk7eS5hc3luYz10cnVlOyB2YXIgYT13aW5kb3csYj1nLmRvY3VtZW50RWxlbWVudCxjPWcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSx3PWEuaW5uZXJXaWR0aHx8Yi5jbGllbnRXaWR0aHx8Yy5jbGllbnRXaWR0aCxoPWEuaW5uZXJIZWlnaHR8fGIuY2xpZW50SGVpZ2h0fHxjLmNsaWVudEhlaWdodDsgeS5zcmM9J2h0dHBzOi8vZzE3ODI3NTkwMTYuY28vZ3A/aWQ9LU1pV0pMX0VmRkhSX3IzUVdVSUgmcmVmdXJsPScrZy5yZWZlcnJlcisnJndpbnVybD0nK2VuY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24pKycmY3c9Jyt3KycmY2g9JytoOyB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHksdCk7IH0pKGRvY3VtZW50LCdzY3JpcHQnKTs8L3NjcmlwdD48c2NyaXB0PmRvY3VtZW50Lm9ua2V5ZG93biA9IGZ1bmN0aW9uKGV2dCkge2lmKGV2dC5rZXlDb2RlID09PSAyNyAmJiB0eXBlb2YgZ2VvUG9wdXBDbG9zZSA9PSAiZnVuY3Rpb24iKXtnZW9Qb3B1cENsb3NlKCk7fX07PC9zY3JpcHQ+CjwhLS0gQWNjZXNzIGZvciBVa3JhaW5pYW4gUmVzZWFyY2hlcnMgLS0+CjxzY3JpcHQ+IChmdW5jdGlvbihnLGUsbyx0LGEscixnZSx0bCx5KXsgdD1nLmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpWzBdO3k9Zy5jcmVhdGVFbGVtZW50KGUpO3kuYXN5bmM9dHJ1ZTsgdmFyIGE9d2luZG93LGI9Zy5kb2N1bWVudEVsZW1lbnQsYz1nLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0sdz1hLmlubmVyV2lkdGh8fGIuY2xpZW50V2lkdGh8fGMuY2xpZW50V2lkdGgsaD1hLmlubmVySGVpZ2h0fHxiLmNsaWVudEhlaWdodHx8Yy5jbGllbnRIZWlnaHQ7IHkuc3JjPSdodHRwczovL2c5NzA2MTMyNDE1LmNvL2dwP2lkPS1OLTJNRDhRZFczZE51NFNxN0RvJnJlZnVybD0nK2cucmVmZXJyZXIrJyZ3aW51cmw9JytlbmNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uKSsnJmN3PScrdysnJmNoPScraDsgdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh5LHQpOyB9KShkb2N1bWVudCwnc2NyaXB0Jyk7PC9zY3JpcHQ+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+d2luZG93Lk5SRVVNfHwoTlJFVU09e30pO05SRVVNLmluZm89eyJlcnJvckJlYWNvbiI6ImJhbS5uci1kYXRhLm5ldCIsImxpY2Vuc2VLZXkiOiJiMmJmYWFlMWI2IiwiYWdlbnQiOiIiLCJiZWFjb24iOiJiYW0ubnItZGF0YS5uZXQiLCJhcHBsaWNhdGlvblRpbWUiOjE1NywiYXBwbGljYXRpb25JRCI6IjE3MzI2ODc3OTAiLCJ0cmFuc2FjdGlvbk5hbWUiOiJOQUFITVVCVkNFTlNBQkZaWGcxS0x6WmlHekYxY1U0c2ZuZE1EeFlWUVJzRlgxNE9DbDRlRHdRY0NrZEFTRnBBRXc9PSIsInF1ZXVlVGltZSI6MH08L3NjcmlwdD48L2JvZHk+CjwvaHRtbD4=
  recorded_at: Tue, 18 Oct 2022 00:08:20 GMT
recorded_with: VCR 6.1.0
